{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/favicon.ico","path":"favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"source/tools/online-markdown/CNAME","path":"tools/online-markdown/CNAME","modified":0,"renderable":0},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"source/tools/online-markdown/index.html","path":"tools/online-markdown/index.html","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/favicon.ico","path":"tools/online-markdown/favicon.ico","modified":0,"renderable":0},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"source/tools/online-markdown/demo.md","path":"tools/online-markdown/demo.md","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/pageThemes/默认样式-适合代码.css","path":"tools/online-markdown/pageThemes/默认样式-适合代码.css","modified":0,"renderable":0},{"_id":"source/static/api/css/imgshare.css","path":"static/api/css/imgshare.css","modified":0,"renderable":0},{"_id":"source/static/api/css/like.css","path":"static/api/css/like.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style0_16.css","path":"static/api/css/share_style0_16.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_popup.css","path":"static/api/css/share_popup.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style0_24.css","path":"static/api/css/share_style0_24.css","modified":0,"renderable":0},{"_id":"source/static/api/css/select_share.css","path":"static/api/css/select_share.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style0_32.css","path":"static/api/css/share_style0_32.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style1_32.css","path":"static/api/css/share_style1_32.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style2.css","path":"static/api/css/share_style2.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style2_16.css","path":"static/api/css/share_style2_16.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style2_24.css","path":"static/api/css/share_style2_24.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style1_24.css","path":"static/api/css/share_style1_24.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style4.css","path":"static/api/css/share_style4.css","modified":0,"renderable":0},{"_id":"source/static/api/css/slide_share.css","path":"static/api/css/slide_share.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style1_16.css","path":"static/api/css/share_style1_16.css","modified":0,"renderable":0},{"_id":"source/static/api/css/weixin_popup.css","path":"static/api/css/weixin_popup.css","modified":0,"renderable":0},{"_id":"source/static/api/css/share_style2_32.css","path":"static/api/css/share_style2_32.css","modified":0,"renderable":0},{"_id":"source/static/api/js/share.js","path":"static/api/js/share.js","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"source/tools/online-markdown/imgs/uncheck.png","path":"tools/online-markdown/imgs/uncheck.png","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/pageThemes/字号偏大-间距偏大-宽屏模式.css","path":"tools/online-markdown/pageThemes/字号偏大-间距偏大-宽屏模式.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/pageThemes/字号偏大-间距偏大-窄屏模式.css","path":"tools/online-markdown/pageThemes/字号偏大-间距偏大-窄屏模式.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/imgs/checked.png","path":"tools/online-markdown/imgs/checked.png","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-cave-light.css","path":"tools/online-markdown/themes/atelier-cave-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-dune-light.css","path":"tools/online-markdown/themes/atelier-dune-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-dune-dark.css","path":"tools/online-markdown/themes/atelier-dune-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-estuary-dark.css","path":"tools/online-markdown/themes/atelier-estuary-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-estuary-light.css","path":"tools/online-markdown/themes/atelier-estuary-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-cave-dark.css","path":"tools/online-markdown/themes/atelier-cave-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-forest-light.css","path":"tools/online-markdown/themes/atelier-forest-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-forest-dark.css","path":"tools/online-markdown/themes/atelier-forest-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/imgs/qrcode.jpg","path":"tools/online-markdown/imgs/qrcode.jpg","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-heath-dark.css","path":"tools/online-markdown/themes/atelier-heath-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-lakeside-light.css","path":"tools/online-markdown/themes/atelier-lakeside-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-lakeside-dark.css","path":"tools/online-markdown/themes/atelier-lakeside-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-plateau-light.css","path":"tools/online-markdown/themes/atelier-plateau-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-plateau-dark.css","path":"tools/online-markdown/themes/atelier-plateau-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-heath-light.css","path":"tools/online-markdown/themes/atelier-heath-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-savanna-dark.css","path":"tools/online-markdown/themes/atelier-savanna-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-savanna-light.css","path":"tools/online-markdown/themes/atelier-savanna-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-sulphurpool-light.css","path":"tools/online-markdown/themes/atelier-sulphurpool-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-sulphurpool-dark.css","path":"tools/online-markdown/themes/atelier-sulphurpool-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/github-v2.css","path":"tools/online-markdown/themes/github-v2.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/github-light.css","path":"tools/online-markdown/themes/github-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/github.css","path":"tools/online-markdown/themes/github.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-seaside-light.css","path":"tools/online-markdown/themes/atelier-seaside-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/hemisu-light.css","path":"tools/online-markdown/themes/hemisu-light.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/hemisu-dark.css","path":"tools/online-markdown/themes/hemisu-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/tomorrow-night-blue.css","path":"tools/online-markdown/themes/tomorrow-night-blue.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/tomorrow-night-bright.css","path":"tools/online-markdown/themes/tomorrow-night-bright.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/tomorrow-night-eighties.css","path":"tools/online-markdown/themes/tomorrow-night-eighties.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/atelier-seaside-dark.css","path":"tools/online-markdown/themes/atelier-seaside-dark.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/vibrant-ink.css","path":"tools/online-markdown/themes/vibrant-ink.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/tomorrow.css","path":"tools/online-markdown/themes/tomorrow.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/tomorrow-night.css","path":"tools/online-markdown/themes/tomorrow-night.css","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/themes/tranquil-heart.css","path":"tools/online-markdown/themes/tranquil-heart.css","modified":0,"renderable":0},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"source/static/api/js/trans/data.js","path":"static/api/js/trans/data.js","modified":0,"renderable":0},{"_id":"source/static/api/js/trans/logger.js","path":"static/api/js/trans/logger.js","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"source/static/api/js/base/class.js","path":"static/api/js/base/class.js","modified":0,"renderable":0},{"_id":"source/static/api/js/conf/const.js","path":"static/api/js/conf/const.js","modified":0,"renderable":0},{"_id":"source/static/api/js/conf/define.js","path":"static/api/js/conf/define.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/combine_api.js","path":"static/api/js/share/combine_api.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/image_api.js","path":"static/api/js/share/image_api.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/select_api.js","path":"static/api/js/share/select_api.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/likeshare.js","path":"static/api/js/share/likeshare.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/share_api.js","path":"static/api/js/share/share_api.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/slide_api.js","path":"static/api/js/share/slide_api.js","modified":0,"renderable":0},{"_id":"source/static/api/js/trans/trans_bdysc.js","path":"static/api/js/trans/trans_bdysc.js","modified":0,"renderable":0},{"_id":"source/static/api/js/trans/trans_bdxc.js","path":"static/api/js/trans/trans_bdxc.js","modified":0,"renderable":0},{"_id":"source/static/api/js/trans/trans.js","path":"static/api/js/trans/trans.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/like_api.js","path":"static/api/js/share/like_api.js","modified":0,"renderable":0},{"_id":"source/static/api/js/share/api_base.js","path":"static/api/js/share/api_base.js","modified":0,"renderable":0},{"_id":"source/static/api/js/start/router.js","path":"static/api/js/start/router.js","modified":0,"renderable":0},{"_id":"source/static/api/js/view/image_view.js","path":"static/api/js/view/image_view.js","modified":0,"renderable":0},{"_id":"source/static/api/js/view/select_view.js","path":"static/api/js/view/select_view.js","modified":0,"renderable":0},{"_id":"source/static/api/js/trans/trans_weixin.js","path":"static/api/js/trans/trans_weixin.js","modified":0,"renderable":0},{"_id":"source/static/api/js/view/like_view.js","path":"static/api/js/view/like_view.js","modified":0,"renderable":0},{"_id":"source/static/api/js/view/share_view.js","path":"static/api/js/view/share_view.js","modified":0,"renderable":0},{"_id":"source/static/api/js/view/slide_view.js","path":"static/api/js/view/slide_view.js","modified":0,"renderable":0},{"_id":"source/static/api/js/view/view_base.js","path":"static/api/js/view/view_base.js","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_0_32.png","path":"static/api/img/share/icons_0_32.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_0_16.png","path":"static/api/img/share/icons_0_16.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_0_24.png","path":"static/api/img/share/icons_0_24.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_2_16.png","path":"static/api/img/share/icons_2_16.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_1_24.png","path":"static/api/img/share/icons_1_24.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l0.gif","path":"static/api/img/share/l0.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_2_32.png","path":"static/api/img/share/icons_2_32.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_2_24.png","path":"static/api/img/share/icons_2_24.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_1_32.png","path":"static/api/img/share/icons_1_32.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l5.gif","path":"static/api/img/share/l5.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l4.gif","path":"static/api/img/share/l4.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l1.gif","path":"static/api/img/share/l1.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l3.gif","path":"static/api/img/share/l3.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l2.gif","path":"static/api/img/share/l2.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/icons_1_16.png","path":"static/api/img/share/icons_1_16.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/pop_c.gif","path":"static/api/img/share/pop_c.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l8.gif","path":"static/api/img/share/l8.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l7.gif","path":"static/api/img/share/l7.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/l6.gif","path":"static/api/img/share/l6.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r0.gif","path":"static/api/img/share/r0.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r3.gif","path":"static/api/img/share/r3.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r2.gif","path":"static/api/img/share/r2.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r1.gif","path":"static/api/img/share/r1.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r7.gif","path":"static/api/img/share/r7.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r8.gif","path":"static/api/img/share/r8.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r5.gif","path":"static/api/img/share/r5.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/sc.png","path":"static/api/img/share/sc.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r4.gif","path":"static/api/img/share/r4.gif","modified":0,"renderable":0},{"_id":"source/static/api/img/share/selectshare_close.png","path":"static/api/img/share/selectshare_close.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/share-search-icon.png","path":"static/api/img/share/share-search-icon.png","modified":0,"renderable":0},{"_id":"source/static/api/img/share/r6.gif","path":"static/api/img/share/r6.gif","modified":0,"renderable":0},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"source/static/api/js/component/comm_tools.js","path":"static/api/js/component/comm_tools.js","modified":0,"renderable":0},{"_id":"source/static/api/js/component/pop_base.js","path":"static/api/js/component/pop_base.js","modified":0,"renderable":0},{"_id":"source/static/api/js/component/anticheat.js","path":"static/api/js/component/anticheat.js","modified":0,"renderable":0},{"_id":"source/static/api/js/component/pop_dialog.js","path":"static/api/js/component/pop_dialog.js","modified":0,"renderable":0},{"_id":"source/static/api/js/component/pop_popup.js","path":"static/api/js/component/pop_popup.js","modified":0,"renderable":0},{"_id":"source/static/api/js/component/partners.js","path":"static/api/js/component/partners.js","modified":0,"renderable":0},{"_id":"source/static/api/js/component/pop_popup_slide.js","path":"static/api/js/component/pop_popup_slide.js","modified":0,"renderable":0},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"source/static/api/js/component/animate.js","path":"static/api/js/component/animate.js","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"source/static/api/js/component/qrcode.js","path":"static/api/js/component/qrcode.js","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"source/static/api/js/base/tangram.js","path":"static/api/js/base/tangram.js","modified":0,"renderable":0},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"source/tools/online-markdown/js/index0.js","path":"tools/online-markdown/js/index0.js","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/js/index1.js","path":"tools/online-markdown/js/index1.js","modified":0,"renderable":0},{"_id":"source/tools/online-markdown/js/index.js","path":"tools/online-markdown/js/index.js","modified":0,"renderable":0},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"themes/next/.bowerrc","hash":"334da94ca6f024d60d012cc26ea655681e724ad8","modified":1537594877324},{"_id":"themes/next/.editorconfig","hash":"211d2c92bfdddb3e81ea946f4ca7a539f150f4da","modified":1537594877324},{"_id":"themes/next/.gitignore","hash":"de5b9b9e5b313b4a86e805b02f334d35c87bfe56","modified":1537594877324},{"_id":"themes/next/.hound.yml","hash":"289dcf5bfe92dbd680d54d6e0668f41c9c9c0c78","modified":1537594877324},{"_id":"themes/next/.jshintrc","hash":"b7d23f2ce8d99fa073f22f9960605f318acd7710","modified":1537594877324},{"_id":"themes/next/README.md","hash":"06aaf1241e9e1619956c86d8b1397a643840a9d1","modified":1537594877340},{"_id":"source/favicon.ico","hash":"5fea4f7e44b37655acb7d05bb29ffc294dd7e93b","modified":1537594877028},{"_id":"themes/next/.javascript_ignore","hash":"74b54cf920cbbf4038a68e54b7138af8b8f45588","modified":1537594877324},{"_id":"themes/next/gulpfile.coffee","hash":"e549561461642051d195550ec49d793e44ee22a0","modified":1537594877340},{"_id":"themes/next/README.en.md","hash":"fa31bbc6dd8778b8dee469740c92b3b5b59702af","modified":1537594877324},{"_id":"themes/next/_config.yml","hash":"c5c63eaa4d03a046aae2ad56f45c842b0ee0cb35","modified":1537594877340},{"_id":"themes/next/package.json","hash":"48e2352f8e41f2b6bbf55254d10f3192ee206d5a","modified":1537594877387},{"_id":"themes/next/bower.json","hash":"bd70cf5988bbfc8cbcf13adae659151a55466524","modified":1537594877340},{"_id":"source/_posts/再识RPC-thrift.md","hash":"02c82f45d6f7d19305969127d5ba469201e91cb4","modified":1537597640285},{"_id":"source/_posts/游戏灰度发布.md","hash":"4ef5827d01a3c7bad5c0cb544b9c8f9c64208137","modified":1537598545468},{"_id":"source/categories/index.md","hash":"d53fd42874a34ba878c6079be9c9e55e3cb1a9b3","modified":1537598596833},{"_id":"source/tags/index.md","hash":"5d3c2d4a33f59c83eaed4f6b96f13fdf4b90479d","modified":1537598596817},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"2692e36cc35b1594530981e7727771f601720a43","modified":1537594877324},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"4312fb37fa2b8663006be3c4fe01125ec01171c1","modified":1537594877324},{"_id":"themes/next/scripts/merge-configs.js","hash":"f8cde6953939802f92da5b7a2458c6c539e9be69","modified":1537594877402},{"_id":"source/about/index.md","hash":"6cc0ec690562bf26f089ffee84347de82919a724","modified":1537601568518},{"_id":"themes/next/languages/de.yml","hash":"db6a9d669f4b6282cda6c0a2d4e03d3e308a4846","modified":1537594877340},{"_id":"themes/next/languages/default.yml","hash":"fe00529a94bb2550194a31d178f5810b45014ab6","modified":1537594877340},{"_id":"themes/next/languages/fr-FR.yml","hash":"91cf55b9d75879e72c8008d2659fe2ea993a4cca","modified":1537594877340},{"_id":"themes/next/languages/ja.yml","hash":"bc89436a2a015ef72f43f265e56e37d94e73c0cd","modified":1537594877340},{"_id":"themes/next/languages/pt-BR.yml","hash":"4b91f96b07e05705b28964df7460466c9b522e2c","modified":1537594877356},{"_id":"themes/next/languages/en.yml","hash":"d02acdce503c86fbb01920ad22d31ec56fc285f1","modified":1537594877340},{"_id":"themes/next/languages/ko.yml","hash":"c59676f2af80c3c594c34c4a0fcbf65fd8864ff3","modified":1537594877340},{"_id":"themes/next/languages/id.yml","hash":"d8b9dc017da0be7f71fda1cacd8064cbc38963b9","modified":1537594877340},{"_id":"themes/next/languages/pt.yml","hash":"f364905121a816c9797acce07c0a4f248965b29a","modified":1537594877356},{"_id":"themes/next/languages/ru.yml","hash":"402e676252ab1fc4522257a578738cb9536eb077","modified":1537594877356},{"_id":"themes/next/languages/zh-Hans.yml","hash":"439c16c744b1596f24d9e0b4e230c4d3c93b7d85","modified":1537594877356},{"_id":"themes/next/languages/zh-hk.yml","hash":"a59f3f3114f5eb4d170a76da4359307e8f5159a7","modified":1537594877356},{"_id":"themes/next/languages/zh-tw.yml","hash":"18da1324d2212faca9a6e5e6ce98b419c86d4b0c","modified":1537594877356},{"_id":"themes/next/test/helpers.js","hash":"f25e7f3265eb5a6e1ccbb5e5012fa9bebf134105","modified":1537594877481},{"_id":"themes/next/test/.jshintrc","hash":"c9fca43ae0d99718e45a6f5ce736a18ba5fc8fb6","modified":1537594877481},{"_id":"themes/next/test/intern.js","hash":"db90b1063356727d72be0d77054fdc32fa882a66","modified":1537594877481},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877434},{"_id":"themes/next/layout/_layout.swig","hash":"0e579cc739111c61bbe776c78acb1a769a606831","modified":1537624139410},{"_id":"themes/next/layout/post.swig","hash":"b8334c479840b7724638eec71971cbd8512ae58d","modified":1537594877387},{"_id":"themes/next/layout/index.swig","hash":"e5b52e04296203262a400e8e36ae12426d31fd5b","modified":1537594877387},{"_id":"themes/next/layout/category.swig","hash":"58cf08388901f7549b1fca95548b2c79173aa840","modified":1537594877387},{"_id":"themes/next/layout/archive.swig","hash":"b867a08f6b43de8b5d700c84b943df55917407ae","modified":1537594877387},{"_id":"themes/next/layout/page.swig","hash":"2a13804aa186f6062738d136e430870c53789bf4","modified":1537594877387},{"_id":"themes/next/layout/tag.swig","hash":"6f764ea3ab11eeb7c530df45528d449b14f5dc62","modified":1537594877387},{"_id":"themes/next/layout/schedule.swig","hash":"595013860078799d455af4965b3a7c5c4fd3923c","modified":1537594877387},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"99b66949f18398689b904907af23c013be1b978f","modified":1537594877402},{"_id":"themes/next/scripts/tags/full-image.js","hash":"c9f833158c66bd72f627a0559cf96550e867aa72","modified":1537594877402},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"ac681b0d0d8d39ba3817336c0270c6787c2b6b70","modified":1537594877402},{"_id":"themes/next/scripts/tags/note.js","hash":"7dc14db08f2c74f8f1952534b424f220f5c000c6","modified":1537594877402},{"_id":"themes/next/source/css/main.styl","hash":"a91dbb7ef799f0a171b5e726c801139efe545176","modified":1537594877434},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1537594877434},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1537594877434},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1537594877434},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1537594877434},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1537594877434},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537594877449},{"_id":"themes/next/source/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1537594877449},{"_id":"themes/next/source/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1537594877449},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1537594877449},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1537594877434},{"_id":"source/tools/online-markdown/CNAME","hash":"9a688d4cc80b6decdd0a839a28ae61cd2dd644c8","modified":1537594805361},{"_id":"themes/next/source/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1537594877449},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1537594877449},{"_id":"source/tools/online-markdown/index.html","hash":"5acfff7ddbba5d25bb86da6d1208be47b0415ced","modified":1537594805361},{"_id":"source/tools/online-markdown/favicon.ico","hash":"1ca9685ceb5e5e6814e87c80054d17553eeaccc5","modified":1537594805361},{"_id":"themes/next/source/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1537594877449},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1537594877449},{"_id":"source/tools/online-markdown/demo.md","hash":"a17f9714053ae7c93a95ef5ba44df80fabecc2e0","modified":1537594805361},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877418},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877418},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877418},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877434},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877434},{"_id":"themes/next/layout/_custom/header.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1537594877356},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1537594877356},{"_id":"themes/next/layout/_macro/reward.swig","hash":"b6cb171f0ed227b82b8f7601814af2df93f3a09a","modified":1537594877356},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"c5cc0070ca7c9a8dbd4b09e0398db536c3cdbe8a","modified":1537594877356},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"3b261c758a7673d91c116367be1bb5223403f9e0","modified":1537594877356},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"ba75672183d94f1de7c8bd0eeee497a58c70e889","modified":1537594877371},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"b87a5122dbff1d5fccf8f3d09d1640bd4b01c4a0","modified":1537594877356},{"_id":"themes/next/layout/_partials/comments.swig","hash":"a5ffadb516522f85c052b290b94c0e4af3002644","modified":1537594877371},{"_id":"themes/next/layout/_partials/footer.swig","hash":"93f258b4e1c4a495e75563d4d4fa63c9a4b82822","modified":1537594877371},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"dfbb6e9692333166aa78231ad12b2a40c153cbcb","modified":1537594877371},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"1634fb887842698e01ff6e632597fe03c75d2d01","modified":1537594877371},{"_id":"themes/next/layout/_partials/search.swig","hash":"952b7b8d9ce2c81d4002a9dc2331f1e710f99616","modified":1537594877371},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"d8c98938719284fa06492c114d99a1904652a555","modified":1537594877387},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"c0f5a0955f69ca4ed9ee64a2d5f8aa75064935ad","modified":1537594877387},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"931808ad9b8d8390c0dcf9bdeb0954eeb9185d68","modified":1537594877387},{"_id":"themes/next/layout/_partials/head.swig","hash":"740684ef2b6e56183529387882042612e904bc8d","modified":1537594877371},{"_id":"themes/next/layout/_partials/header.swig","hash":"d9b10a92fdccd57a0c0d6773831f9c1b0f1bb449","modified":1537594877371},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"c9d45628330ce8bf5fbe71c9f131c7d75334c1c4","modified":1537594877387},{"_id":"themes/next/layout/_macro/post.swig","hash":"2da53e16d358771b0534b43ec31c0617ab83d115","modified":1537594877356},{"_id":"source/tools/online-markdown/pageThemes/默认样式-适合代码.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594805377},{"_id":"source/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1537594877043},{"_id":"source/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1537594877043},{"_id":"source/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1537594877043},{"_id":"source/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1537594877043},{"_id":"source/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1537594877043},{"_id":"source/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1537594877043},{"_id":"source/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1537594877059},{"_id":"source/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1537594877059},{"_id":"source/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1537594877059},{"_id":"source/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1537594877059},{"_id":"source/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1537594877059},{"_id":"source/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1537594877059},{"_id":"source/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1537594877059},{"_id":"source/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1537594877059},{"_id":"source/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1537594877059},{"_id":"source/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1537594877059},{"_id":"source/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1537594877059},{"_id":"source/static/api/js/share.js","hash":"73bdb33580128e6c79a726a25f98092c0faa369d","modified":1537594877121},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"3403fdd8efde1a0afd11ae8a5a97673f5903087f","modified":1537594877418},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"a0f23e75a137d8c996c70e2059e0074f1e97a127","modified":1537594877418},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"531934ea21ef4dc9f0978512050f54834f0a6cff","modified":1537594877418},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"e55265c8a8a6ae0c3c08e3509de92ee62c3cb5f6","modified":1537594877434},{"_id":"themes/next/source/css/_variables/base.styl","hash":"4c4298a7011841d9ee2aec5bd192df5730b08517","modified":1537594877434},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"d7826b48a20162835450495db534d353ac52e476","modified":1537594877434},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537603909933},{"_id":"themes/next/source/js/src/affix.js","hash":"1b509c3b5b290a6f4607f0f06461a0c33acb69b1","modified":1537594877449},{"_id":"themes/next/source/js/src/motion.js","hash":"ff9ea37d05c269e3a140c4ab448af03efc4bcc76","modified":1537594877449},{"_id":"themes/next/source/js/src/post-details.js","hash":"458af3b1bd7783c1950808e66cedfa9fb68bf21f","modified":1537594877449},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"b35a7dc47b634197b93487cea8671a40a9fdffce","modified":1537594877449},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"b7657be25fc52ec67c75ab5481bdcb483573338b","modified":1537594877449},{"_id":"themes/next/source/js/src/utils.js","hash":"e34f83848883732ddd7a34a3e3ed2a293f0f76a7","modified":1537594877449},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"4a0da1bed19e65bd7db42421b447061bc1618710","modified":1537594877449},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877387},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877387},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"84bdc8a4fe127849a5c99bdefe1d0b65ee1a4a0a","modified":1537594877449},{"_id":"source/tools/online-markdown/imgs/uncheck.png","hash":"1be5fb6b9201a288ee6ea0cf5a14494c09b45a17","modified":1537594805361},{"_id":"source/tools/online-markdown/pageThemes/字号偏大-间距偏大-宽屏模式.css","hash":"16c78b42b1e416a35ada1ae6e9f493d2ad539e62","modified":1537594805377},{"_id":"source/tools/online-markdown/pageThemes/字号偏大-间距偏大-窄屏模式.css","hash":"317de9ae2dcb500c3bb69a07692448da517ea214","modified":1537594805377},{"_id":"source/tools/online-markdown/imgs/checked.png","hash":"946cf4b417fb7849d2e536f35489730e1a851ff7","modified":1537594805361},{"_id":"source/tools/online-markdown/themes/atelier-cave-light.css","hash":"46bbc73ac8a735e2d907be44d964d9ba96e8a16b","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-dune-light.css","hash":"8237c95fc706fd01725144c7e852f586f5269b2c","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-dune-dark.css","hash":"47dcb8b3b91aeedf9d74abe760a986c7a0f78a8e","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-estuary-dark.css","hash":"fccbba89b0e1e42b3676291aaf3098e7c46169a6","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-estuary-light.css","hash":"641351e6e00f73c0b06208dc21dde214105b5333","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-cave-dark.css","hash":"09f3cd75ed03ccc20fc8f817908102ed26219125","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-forest-light.css","hash":"ca610b6c535dccd8442ff412683509f9b5f7d42c","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-forest-dark.css","hash":"750da2899332c401e63c77f0b79c1280f060a24d","modified":1537594805377},{"_id":"source/tools/online-markdown/imgs/qrcode.jpg","hash":"cb8cfa92764f970f3ebc94c5c23f51d5b67e7a7d","modified":1537594805361},{"_id":"source/tools/online-markdown/themes/atelier-heath-dark.css","hash":"9f751e5e2f741a2ca802119a0b9629456777495a","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-lakeside-light.css","hash":"74c98a39d22780b038551ab6c2a30759b5425518","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-lakeside-dark.css","hash":"1c0a402a9f8b243f3ef18895ab4a56fbfcf49a1f","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-plateau-light.css","hash":"6160404d0e976cf8e4d8621e6b7e2e8814541771","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-plateau-dark.css","hash":"5be42e7c5fdc012500d13db48ddeab95ae297916","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-heath-light.css","hash":"f7a03f2a997bba346a350bedfc860594af29768b","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-savanna-dark.css","hash":"d34b76751cdf2d8fbb11b15af27c0a9b88d2d181","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-savanna-light.css","hash":"1a81911ada5f680e3af2a266cbebf68c8fc032aa","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-sulphurpool-light.css","hash":"ec816451c57efebb77025f04b9191a22c4e573e0","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-sulphurpool-dark.css","hash":"e8d643b9e6276f76d0ca873da654ce1760694710","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/github-v2.css","hash":"8b9e795a1dc3e79ab68d07d007d659d685f935ee","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/github-light.css","hash":"694aef1cac04b881294205279c8cdf6da898abb7","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/github.css","hash":"741fde7dc9a25924f267dc251a018526525f6b98","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-seaside-light.css","hash":"4eae4f7ac1a5bc9947c403942d2fb0daef697cac","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/hemisu-light.css","hash":"923d9f6fa7b043b90a212246acdafdaf363aefc0","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/hemisu-dark.css","hash":"dbe6c7f5effeec9c332b7d2a95505f1167027922","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/tomorrow-night-blue.css","hash":"33e4483b73b72d561ec3ee6bac085a8ecfc07564","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/tomorrow-night-bright.css","hash":"2a69a02e3820845a4e1f12c7ba4e00e8e61f15a9","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/tomorrow-night-eighties.css","hash":"ab4a7ca393524f5c15c36ae46152a559cdcb2400","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/atelier-seaside-dark.css","hash":"0e649a5526ff0e3452be4519465f9282705e68b1","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/vibrant-ink.css","hash":"db15bbca779664e13472a84146f7f010dc011799","modified":1537594805393},{"_id":"source/tools/online-markdown/themes/tomorrow.css","hash":"2b6bc58a2a889882a45be1c553f7f9a36f9b3f90","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/tomorrow-night.css","hash":"40d3a13e572b5e2743762aaff97738c3248acbf6","modified":1537594805377},{"_id":"source/tools/online-markdown/themes/tranquil-heart.css","hash":"cb601cf28f7ec08fd1a9700aa755f7cb1645ac4a","modified":1537594805393},{"_id":"themes/next/source/lib/fancybox/.bower.json","hash":"9be892a4e14e0da18ff9cb962c9ef71f163b1b22","modified":1481442025548},{"_id":"themes/next/source/lib/fancybox/.gitattributes","hash":"672d3b5767e0eacd83bb41b188c913f2cf754793","modified":1481442025560},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1537594877449},{"_id":"source/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877152},{"_id":"source/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1537594877152},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"865d6c1328ab209a4376b9d2b7a7824369565f28","modified":1537594877481},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"bf3eef9d647cd7c9b62feda3bc708c6cdd7c0877","modified":1537594877465},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1537594877465},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"68a9b9d53126405b0fa5f3324f1fb96dbcc547aa","modified":1537594877465},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"a9b3ee1e4db71a0e4ea6d5bed292d176dd68b261","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"c31ff06a740955e44edd4403902e653ccabfd4db","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"03ddbf76c1dd1afb93eed0b670d2eee747472ef1","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"71e7183634dc1b9449f590f15ebd7201add22ca7","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"8868275e8b6340c87a81c69a54ed138d11fb3c3e","modified":1537594877465},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"bb2c3a926bb7f8fea54d424882b25d93dfde7ae6","modified":1537594877356},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"92d92860418c4216aa59eb4cb4a556290a7ad9c3","modified":1537594877481},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"218cc936ba3518a3591b2c9eda46bc701edf7710","modified":1537594877356},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"63da5e80ebb61bb66a2794d5936315ca44231f0c","modified":1537594877481},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"dde584994ac13dc601836e86f4cf490e418d9723","modified":1537594877481},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"90fa628f156d8045357ff11eaf32e61abacf10e8","modified":1537594877481},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4ded6fee668544778e97e38c2b211fc56c848e77","modified":1537594877481},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"b930297cb98b8e1dbd5abe9bc1ed9d5935d18ce8","modified":1537594877481},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"e0acf1db27b0cc16128a59c46db1db406b5c4c58","modified":1537594877481},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"bf172816a9c57f9040e3d19c24e181a142daf92b","modified":1537594877481},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"bf773ad48a0b9aa77681a89d7569eefc0f7b7b18","modified":1537594877481},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"f5e487b0d213ca0bd94aa30bc23b240d65081627","modified":1537594877371},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"efa7efcbb575381b508f9aa0e0c53140eef72a7b","modified":1537594877371},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"b25002a83cbd2ca0c4a5df87ad5bff26477c0457","modified":1537594877371},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"a8c7f9ca7c605d039a1f3bf4e4d3183700a3dd62","modified":1537594877371},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"9e3d133ac5bcc6cb51702c83b2611a49811abad1","modified":1537594877371},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"dbbfb50f6502f6b81dcc9fee7b31f1e812da3464","modified":1537594877481},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"44d65145e5003d96d3c78c9e87839128d44cce93","modified":1537594877371},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"d4fbffd7fa8f2090eb32a871872665d90a885fac","modified":1537594877371},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"12684840de632eb16e53ffa863166306a756fd4f","modified":1537594877371},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a9a3995b9615adfb8d6b127c78c6771627bee19a","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"9c8f4b2a29741d96adf0b8fef52ae7f4396f27f5","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"188423f7df0eb8c99a03cb6741384415651c4665","modified":1537594877387},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"f4a570908f6c89c6edfb1c74959e733eaadea4f2","modified":1537594877481},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"fe95dd3d166634c466e19aa756e65ad6e8254d3e","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"a0bd3388587fd943baae0d84ca779a707fbcad89","modified":1537594877387},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"9b84ab576982b2c3bb0291da49143bc77fba3cc6","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"e495aed8fb36bf8015ddbd64366270a7debad2b0","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"db15d7e1552aa2d2386a6b8a33b3b3a40bf9e43d","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f592adff22628b271ec9657b080cf6b9cc200615","modified":1537594877387},{"_id":"source/static/api/js/base/class.js","hash":"db02960fb51f69a0d50dc9ed626a998be3884706","modified":1537594877090},{"_id":"source/static/api/js/conf/const.js","hash":"7da7df37d0f3d3e1977a8d107c98a3c1ecdb39c2","modified":1537594877121},{"_id":"source/static/api/js/conf/define.js","hash":"ee0afad836be1553980501855752ccd79fe1fe0e","modified":1537594877121},{"_id":"source/static/api/js/share/combine_api.js","hash":"7ad3c5396bf20704e87f98ebe118034ed3cc7b22","modified":1537594877121},{"_id":"source/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1537594877121},{"_id":"source/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1537594877121},{"_id":"source/static/api/js/share/likeshare.js","hash":"2d14ab97cc3dc294c51c0d6814f4ea45f4b4e312","modified":1537594877121},{"_id":"source/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1537594877137},{"_id":"source/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1537594877137},{"_id":"source/static/api/js/trans/trans_bdysc.js","hash":"28bb985a03b6b1da5a89a143331932a12126c9c3","modified":1537594877152},{"_id":"source/static/api/js/trans/trans_bdxc.js","hash":"a512ebfca0319ab38d06b7b0fb74bcdc942dc46e","modified":1537594877152},{"_id":"source/static/api/js/trans/trans.js","hash":"cb82afecdbede8d5a00b6c5ea9595187b6408376","modified":1537594877152},{"_id":"source/static/api/js/share/like_api.js","hash":"4034b10f8f34367c6db47ae092e5b4107c2fb8b4","modified":1537594877121},{"_id":"source/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1537594877121},{"_id":"source/static/api/js/start/router.js","hash":"27bc546a9c796b15e59442aaf09ae645a2ed4c74","modified":1537594877152},{"_id":"source/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1537594877168},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"12662536c7a07fff548abe94171f34b768dd610f","modified":1537594877418},{"_id":"source/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1537594877168},{"_id":"source/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1537594877152},{"_id":"source/static/api/js/view/like_view.js","hash":"c1b6a3f3f89ac734c6da284c1ba1dde2ada4e250","modified":1537594877168},{"_id":"source/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1537594877168},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"c9218b48c56e52c06af9ce3cc8fbdae737cf16fe","modified":1537594877418},{"_id":"source/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1537594877168},{"_id":"source/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1537594877168},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"5a35aa0381b0e1d465b952a997194441020446ea","modified":1537594877418},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"ea9069645696f86c5df64208490876fe150c8cae","modified":1537594877418},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"b6ee5fefa6046086a76ddbcfafc82482816fa3e0","modified":1537594877418},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"3f40e8a9fe8e7bd5cfc4cf4cbbbcb9539462e973","modified":1537594877418},{"_id":"source/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1537594877059},{"_id":"source/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1537594877059},{"_id":"source/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1537594877059},{"_id":"source/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1537594877074},{"_id":"source/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1537594877059},{"_id":"source/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1537594877074},{"_id":"source/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1537594877074},{"_id":"source/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1537594877074},{"_id":"source/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1537594877059},{"_id":"source/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1537594877074},{"_id":"source/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1537594877074},{"_id":"source/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1537594877074},{"_id":"source/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1537594877074},{"_id":"source/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1537594877074},{"_id":"source/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1537594877059},{"_id":"source/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1537594877090},{"_id":"source/static/api/img/share/l8.gif","hash":"ec7dbc7703961356e05528d2844b983f225445e4","modified":1537594877074},{"_id":"source/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1537594877074},{"_id":"source/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1537594877074},{"_id":"source/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1537594877090},{"_id":"source/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1537594877090},{"_id":"source/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1537594877090},{"_id":"source/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1537594877090},{"_id":"source/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1537594877090},{"_id":"source/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1537594877090},{"_id":"source/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1537594877090},{"_id":"source/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1537594877090},{"_id":"source/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1537594877090},{"_id":"source/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1537594877090},{"_id":"source/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1537594877090},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ad69cbf94eedacc27e756cdb9c7073416db697d0","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"b7d5cc29586ac796a50d90974ad99d24a5982137","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"ff4489cd582f518bba6909a301ac1292a38b4e96","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"22828f5141c0cecb9ef25a110e194cdfa3a36423","modified":1537594877402},{"_id":"source/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1537594877090},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"88559b13ce94311405b170a0506ded91273beceb","modified":1537594877402},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"25d5e45a355ee2093f3b8b8eeac125ebf3905026","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"b1025c421406d2c24cc92a02ae28c1915b01e240","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"26666c1f472bf5f3fb9bc62081cca22b4de15ccb","modified":1537594877434},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"6eb4bcc3056bd279d000607e8b4dad50d368ca69","modified":1537594877418},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"d0bfd1bef988c76f7d7dd72d88af6f0908a8b0db","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"55b44e03054cd20ed8129bf986b15fba5fd85aad","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9b913b73d31d21f057f97115ffab93cfa578b884","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"f23ac53ab901c48859dd29eee6e386b60ff956ba","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"09c965022c13b84ed8a661fee8ac2a6d550495ae","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"748dbfbf9c08e719ddc775958003c64b00d39dab","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"31127dcbf4c7b4ada53ffbf1638b5fe325b7cbc0","modified":1537594877434},{"_id":"themes/next/source/lib/jquery/index.js","hash":"17a740d68a1c330876c198b6a4d9319f379f3af2","modified":1537594877481},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"5dbc0d0c897e46760e5dbee416530d485c747bba","modified":1537594877434},{"_id":"source/static/api/js/component/comm_tools.js","hash":"28d096a61f54e64bdbc32d172ae20e7f6e9656a7","modified":1537594877090},{"_id":"source/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1537594877090},{"_id":"source/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1537594877090},{"_id":"source/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1537594877090},{"_id":"source/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1537594877106},{"_id":"source/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1537594877090},{"_id":"source/static/api/js/component/pop_popup_slide.js","hash":"45a72013fba95249ca965fd4d98f3bbde7a7098a","modified":1537594877106},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c9875c010bebd77b4f59d459a10455fceb0a66a1","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Pisces/_full-image.styl","hash":"de31e923bf5102498f06b1ae6bdf2ea22409f3e0","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"338e9475519ce72af29a1bc05610f9f486e0f1c2","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"9887bd3894db5394c1e64e800afaae55f47e8dd0","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"1f6e2ce674735269599acc6d77b3ea18d31967fc","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"88a5e0e95f93e4adb196bff1aac17d6cfb03768a","modified":1537594877434},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"983c0723e8cfd84b67c2e66da0c26425a8db06e0","modified":1537594877434},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"c2390263a298a2b78c5f941e6827c13f02e1ee85","modified":1537594877449},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1537594877449},{"_id":"source/static/api/js/component/animate.js","hash":"17a3495543db66e4eb56a81a93edf3e41ca8cc31","modified":1537594877090},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1537594877449},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1537594877449},{"_id":"source/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1537594877121},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1537594877449},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"82f33ad0842aa9c154d029e0dada2497d4eb1d57","modified":1537594877465},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1537594877449},{"_id":"source/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1537594877090},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"ae6318aeb62ad4ce7a7e9a4cdacd93ffb004f0fb","modified":1537594877465},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1537594877465},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"1d6aeda0480d0e4cb6198edf7719d601d4ae2ccc","modified":1537594877465},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"d71602cbca33b9ecdb7ab291b7f86a49530f3601","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"a02674d823c7b577d38c3cdb91953993b6e4b3a0","modified":1537594877465},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1537594877449},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"a817b6c158cbc5bab3582713de9fe18a18a80552","modified":1537594877481},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"41ea797c68dbcff2f6fb3aba1d1043a22e7cc0f6","modified":1537594877481},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"f8eca53c6ba4b66401f75277a9b6d50bccb7ac5b","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1537594877465},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"af7f3e43cbdc4f88c13f101f0f341af96ace3383","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"1600f340e0225361580c44890568dc07dbcf2c89","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"e4a13e8cd19762ef3aea0e59dfae8b3c1f251f11","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"753d262911c27baf663fcaf199267133528656af","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"1b6af02fd0ba3f729675cd95429a0cea4aebf358","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"a10b7f19d7b5725527514622899df413a34a89db","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"a79e7e0d809fcf407593dd7ed9e023db21c3cbd6","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"8a399df90dadba5ad4e781445b58f4765aeb701e","modified":1537594877387},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"24105e62d7f26946907fa14cd02589f899bf8122","modified":1537594877387},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"4c4ef6e997d0c6e21de39c2daa0c768e12c8c6fa","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"53cde051e0337f4bf42fb8d6d7a79fa3fa6d4ef2","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d63e0cacc53dd375fcc113465a4328c59ff5f2c1","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"852fd77500bda2c1a6651a14aa48d7d6222adc9d","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"1727702eac5d326b5c81a667944a245016668231","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"104b5c79cd891506e0beaf938b083685f1da8637","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"7fb593f90d74a99c21840679933b9ef6fdc16a61","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"f9760ecf186954cee3ba4a149be334e9ba296b89","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"167986d0f649516671ddf7193eebba7b421cd115","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"4e3838d7ac81d9ad133960f0f7ed58a44a015285","modified":1537594877402},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"71397a5823e8ec8aad3b68aace13150623b3e19d","modified":1537594877387},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"0656e753f182c9f47fef7304c847b7587a85ef0d","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"8cf318644acc8b4978537c263290363e21c7f5af","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"7f2bdd6109614d35408ee5ac3335aad4464c69c7","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"cd2def16d31feb234be27dcdce2a919f70cc6919","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"761eba9811b050b25d548cc0854de4824b41eb08","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"1153bb71edf253765145559674390e16dd67c633","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"7fe4d4d656e86276c17cb4e48a560cb6a4def703","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"821991c0890966a512b43e8b1cf9537e738a09a0","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"06b9a99d63b4d57fdbf70b88ab7036fbc47e3f52","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"e71652d3216e289c8548b1ea2357822c1476a425","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"a200c0a1c5a895ac9dc41e0641a5dfcd766be99b","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"61f8cea3c01acd600e90e1bc2a07def405503748","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"b0ceb8eba2e366698212884799b023ca0cc9db16","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"4866fb9453d7d4c83a1c4e55d74e4afed336eb8b","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"cd9e214e502697f2f2db84eb721bac57a49b0fce","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"e28c805011f65b54060f03be90ec5a23714c4985","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"74e9989a10fc682388cbd25ff7df0d7d4025fb8c","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"5a982d8ef3b3623ea5f59e63728990f5623c1b57","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post-more-link.styl","hash":"2bc3e33fdfbcf348c96ca60598f629dcd7ba3617","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"01567edaea6978628aa5521a122a85434c418bfd","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"702be9e57dd6ff5fa99642a1f6e3df26215b8805","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"394888efec32749b353292a59ec7f1b609d6325e","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"8355b0e9375b3245508efda0e18acd069c2aa767","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"681b7c8ce4dc47130a0ca67c1ec62be7c96e4c4f","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"2ad1a2a9bbf6742d1b0762c4c623b68113d1e0fe","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"dd941824210733588841897457e0cc9697ca5608","modified":1537594877418},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"a07aa12cc36ac5c819670c2a3c17d07ed7a08986","modified":1537594877434},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"c8a05ce90784db9744c22fab22019eb637df1f2f","modified":1537594877418},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1537594877434},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"350469437b20ecfd6f3ca45e400478f8e3f71cfb","modified":1537594877402},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"2fe76476432b31993338cb45cdb3b29a518b6379","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"8420b4be386469337243336aee694297875bd439","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"5dbeed535d63a50265d96b396a5440f9bb31e4ba","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"7f7e9df15148608a9c29326dd880d8e8e8efc0ec","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"15975ba7456b96916b1dbac448a1a0d2c38b8f3d","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"3b1aabbab57b0b1fafa311feb1212f59e78e7928","modified":1537594877418},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"4f1e9d96940aa3e42d58fb63a26d4fa260323b0d","modified":1537594877418},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"cf900c5026ab36f31118317d0ae32a213e3ec2a9","modified":1537594877434},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"4237c6e9d59da349639de20e559e87c2c0218cfd","modified":1537594877481},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"eb4ede7d7446d8a2f2ddeef3b17f497a6ad30756","modified":1537594877418},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1537594877481},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1537594877481},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1537594877449},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"6394c48092085788a8c0ef72670b0652006231a1","modified":1537594877449},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"ee948b4489aedeb548a77c9e45d8c7c5732fd62d","modified":1537594877449},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"b88b589f5f1aa1b3d87cc7eef34c281ff749b1ae","modified":1537594877465},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"d22b1629cb23a6181bebb70d0cf653ffe4b835c8","modified":1537594877465},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1537594877481},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"717cc7f82be9cc151e23a7678601ff2fd3a7fa1d","modified":1537594877418},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"51139a4c79573d372a347ef01a493222a1eaf10a","modified":1537594877465},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"90a1b22129efc172e2dfcceeeb76bff58bc3192f","modified":1537594877449},{"_id":"source/tools/online-markdown/js/index0.js","hash":"d0c6948479a3ef9411d1f5f9959ba005e7d4009e","modified":1537594805377},{"_id":"source/tools/online-markdown/js/index1.js","hash":"8793020cc2b64f8a996b58e84f512f1aa8215496","modified":1537594805377},{"_id":"source/tools/online-markdown/js/index.js","hash":"dbf4aa69f6b070206a4c09381e9d810a7e549fdb","modified":1537594805361},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1537594877465},{"_id":"source/_posts/类加载器.md","hash":"add4e0f5edb6317fe231d59b623489fb8ca7bb85","modified":1539178197485},{"_id":"public/tools/online-markdown/pageThemes/默认样式-适合代码.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539177043192},{"_id":"public/static/api/js/trans/data.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539177043199},{"_id":"public/static/api/js/trans/logger.js","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1539177043199},{"_id":"public/categories/index.html","hash":"e412f04dd1ea09808deae9fa33b69a2a92517e43","modified":1539178223262},{"_id":"public/tags/index.html","hash":"0f90fd735ef29ef66c57968bc65dc6ffbfaf526d","modified":1539178223264},{"_id":"public/about/index.html","hash":"a8087b5a94d15dcb8b63ba654951646c1cb90169","modified":1539178223265},{"_id":"public/archives/index.html","hash":"2076bdc472ea6963611e910d5e3d0b2f5d7afa91","modified":1539178223265},{"_id":"public/archives/2018/index.html","hash":"0260555da3ff1ab2064d92a94891e007528a3e29","modified":1539178223265},{"_id":"public/archives/2018/01/index.html","hash":"af248d78f81122c7b975778612061e43d8042c48","modified":1539178223266},{"_id":"public/archives/2018/09/index.html","hash":"a074dd78e34c41cc792512ae1dc826051277879a","modified":1539178223266},{"_id":"public/archives/2018/10/index.html","hash":"f06bd641e5d2f2f16fe1bf01920f6b7e33e5609d","modified":1539178223266},{"_id":"public/tags/rpc/index.html","hash":"eec5f7d078eb3c2d37512f7ad2d67681b7d94e36","modified":1539178223266},{"_id":"public/tags/thrift/index.html","hash":"4477ad590b1693160b43dc3c4793e53fe53b087e","modified":1539178223267},{"_id":"public/tags/classloader/index.html","hash":"993963b7f05dd23c98b15de6c918aea276310ca8","modified":1539178223267},{"_id":"public/categories/source/index.html","hash":"fe1d46b0c59e7cfa567c35584ba5c1b4fd5d2f65","modified":1539178223266},{"_id":"public/categories/java/index.html","hash":"b9056a564a7a6e7a9c1ebcce3a11cb31171ff3e0","modified":1539178223266},{"_id":"public/blog/undefined.html","hash":"7fefc286c715516f22cf3ed596d0298984e7d1ac","modified":1539177427144},{"_id":"public/blog/game-gray-release.html","hash":"c59b829087327d4c4f080b5f2d9a2c727017e251","modified":1539178223267},{"_id":"public/blog/recognition-of-rpc-thrift.html","hash":"0383b7c3386f2e7ebf768889bdb8bf2c1d3e5e26","modified":1539178223267},{"_id":"public/index.html","hash":"6e2f94b648f62283d8527370dfbc320a26c26651","modified":1539178223268},{"_id":"public/favicon.ico","hash":"5fea4f7e44b37655acb7d05bb29ffc294dd7e93b","modified":1539177043222},{"_id":"public/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1539177043222},{"_id":"public/images/cc-by-nc.svg","hash":"6f076713fb9bf934aa2c1046bdf2cf2e37bc1eab","modified":1539177043222},{"_id":"public/images/algolia_logo.svg","hash":"16505f61f19ba65f629dfd033f14ee9abcf18756","modified":1539177043222},{"_id":"public/images/cc-by-nc-sa.svg","hash":"6f55543d1fb9cbc436c101d24f802dec7b41efc3","modified":1539177043222},{"_id":"public/images/cc-by-nd.svg","hash":"42cd73da328077ccc92f859bb8f3cf621b3484f8","modified":1539177043222},{"_id":"public/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539177043223},{"_id":"public/images/quote-l.svg","hash":"cd108d6f44351cadf8e6742565217f88818a0458","modified":1539177043223},{"_id":"public/images/cc-by.svg","hash":"e92a33c32d1dac8ed94849b2b4e6456e887efe70","modified":1539177043223},{"_id":"public/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1539177043223},{"_id":"public/images/cc-by-nc-nd.svg","hash":"bc3588c9b2d7c68830524783120ff6cf957cf668","modified":1539177043223},{"_id":"public/tools/online-markdown/CNAME","hash":"9a688d4cc80b6decdd0a839a28ae61cd2dd644c8","modified":1539177043223},{"_id":"public/images/quote-r.svg","hash":"2a2a250b32a87c69dcc1b1976c74b747bedbfb41","modified":1539177043223},{"_id":"public/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1539177043223},{"_id":"public/tools/online-markdown/index.html","hash":"5acfff7ddbba5d25bb86da6d1208be47b0415ced","modified":1539177043223},{"_id":"public/tools/online-markdown/favicon.ico","hash":"1ca9685ceb5e5e6814e87c80054d17553eeaccc5","modified":1539177043223},{"_id":"public/images/cc-zero.svg","hash":"9bfb52b2f63527a7049247bf00d44e6dc1170e7d","modified":1539177043223},{"_id":"public/images/cc-by-sa.svg","hash":"70c1535f43e54e5ff35ca81419e77e4c0c301398","modified":1539177043223},{"_id":"public/tools/online-markdown/demo.md","hash":"a17f9714053ae7c93a95ef5ba44df80fabecc2e0","modified":1539177043223},{"_id":"public/static/api/css/imgshare.css","hash":"c3624a2dde649ed28b2e5d1f050fd971fbaf71a0","modified":1539177043223},{"_id":"public/static/api/css/like.css","hash":"2024d58206df01b858c38f07957f928b44e14cb3","modified":1539177043224},{"_id":"public/static/api/css/share_style0_16.css","hash":"090e77e9e6e9b8ee0d73a233cbe46499de935bdd","modified":1539177043224},{"_id":"public/static/api/css/share_popup.css","hash":"338ba2b30ef8ce0c84cd36b37d7f8482996291dc","modified":1539177043224},{"_id":"public/static/api/css/share_style0_24.css","hash":"7d1f9f32b80f91001f4f951aa045180cde22d82e","modified":1539177043224},{"_id":"public/static/api/css/select_share.css","hash":"d0259abdb410193cf761e42bffaa51e70327a0cd","modified":1539177043224},{"_id":"public/static/api/css/share_style0_32.css","hash":"7c2d12ea532c8a55c102b649bb23ef5bf53b3ed3","modified":1539177043224},{"_id":"public/static/api/css/share_style1_32.css","hash":"626d67a4c0bb72a152e90d25dbf281c0c35a2140","modified":1539177043230},{"_id":"public/static/api/css/share_style2.css","hash":"1ad451187cde8a74843fd398b924ca0ac911e9be","modified":1539177043230},{"_id":"public/static/api/css/share_style2_16.css","hash":"572c8e856988e463eb865f38d33ba003cc20d083","modified":1539177043230},{"_id":"public/static/api/css/share_style2_24.css","hash":"917d963d3be111064cbb1d122963da91ee3724a0","modified":1539177043230},{"_id":"public/static/api/css/share_style1_24.css","hash":"3ee5f745c863b4f68299fe5dc125f913ca619c07","modified":1539177043230},{"_id":"public/static/api/css/share_style4.css","hash":"0a9e2ed712a5ef5c4699c038cd001a0d688a0fdf","modified":1539177043230},{"_id":"public/static/api/css/slide_share.css","hash":"3898feaf45559b039f885bee8f9e831f48adb20c","modified":1539177043230},{"_id":"public/static/api/css/share_style1_16.css","hash":"aeb4e9fa96cfa0167481e1f4007079dc3f3c6c27","modified":1539177043230},{"_id":"public/static/api/css/weixin_popup.css","hash":"5e6c5084bfd16051de5776c2e136a5462b08a32c","modified":1539177043230},{"_id":"public/static/api/css/share_style2_32.css","hash":"3657bbc4b5bbc66ebca4906ee0a1cbf9f98be883","modified":1539177043230},{"_id":"public/static/api/js/share.js","hash":"73bdb33580128e6c79a726a25f98092c0faa369d","modified":1539177043231},{"_id":"public/tools/online-markdown/imgs/uncheck.png","hash":"1be5fb6b9201a288ee6ea0cf5a14494c09b45a17","modified":1539177043231},{"_id":"public/tools/online-markdown/pageThemes/字号偏大-间距偏大-宽屏模式.css","hash":"16c78b42b1e416a35ada1ae6e9f493d2ad539e62","modified":1539177043231},{"_id":"public/tools/online-markdown/pageThemes/字号偏大-间距偏大-窄屏模式.css","hash":"317de9ae2dcb500c3bb69a07692448da517ea214","modified":1539177043231},{"_id":"public/tools/online-markdown/imgs/checked.png","hash":"946cf4b417fb7849d2e536f35489730e1a851ff7","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-cave-light.css","hash":"46bbc73ac8a735e2d907be44d964d9ba96e8a16b","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-dune-light.css","hash":"8237c95fc706fd01725144c7e852f586f5269b2c","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-estuary-dark.css","hash":"fccbba89b0e1e42b3676291aaf3098e7c46169a6","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-dune-dark.css","hash":"47dcb8b3b91aeedf9d74abe760a986c7a0f78a8e","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-estuary-light.css","hash":"641351e6e00f73c0b06208dc21dde214105b5333","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-cave-dark.css","hash":"09f3cd75ed03ccc20fc8f817908102ed26219125","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-forest-dark.css","hash":"750da2899332c401e63c77f0b79c1280f060a24d","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-forest-light.css","hash":"ca610b6c535dccd8442ff412683509f9b5f7d42c","modified":1539177043231},{"_id":"public/tools/online-markdown/imgs/qrcode.jpg","hash":"cb8cfa92764f970f3ebc94c5c23f51d5b67e7a7d","modified":1539177043231},{"_id":"public/tools/online-markdown/themes/atelier-heath-dark.css","hash":"9f751e5e2f741a2ca802119a0b9629456777495a","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-lakeside-dark.css","hash":"1c0a402a9f8b243f3ef18895ab4a56fbfcf49a1f","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-lakeside-light.css","hash":"74c98a39d22780b038551ab6c2a30759b5425518","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-plateau-light.css","hash":"6160404d0e976cf8e4d8621e6b7e2e8814541771","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-plateau-dark.css","hash":"5be42e7c5fdc012500d13db48ddeab95ae297916","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-heath-light.css","hash":"f7a03f2a997bba346a350bedfc860594af29768b","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-savanna-dark.css","hash":"d34b76751cdf2d8fbb11b15af27c0a9b88d2d181","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-savanna-light.css","hash":"1a81911ada5f680e3af2a266cbebf68c8fc032aa","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-sulphurpool-light.css","hash":"ec816451c57efebb77025f04b9191a22c4e573e0","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-sulphurpool-dark.css","hash":"e8d643b9e6276f76d0ca873da654ce1760694710","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/github-light.css","hash":"694aef1cac04b881294205279c8cdf6da898abb7","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/github-v2.css","hash":"8b9e795a1dc3e79ab68d07d007d659d685f935ee","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/github.css","hash":"741fde7dc9a25924f267dc251a018526525f6b98","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/hemisu-light.css","hash":"923d9f6fa7b043b90a212246acdafdaf363aefc0","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/atelier-seaside-light.css","hash":"4eae4f7ac1a5bc9947c403942d2fb0daef697cac","modified":1539177043232},{"_id":"public/tools/online-markdown/themes/hemisu-dark.css","hash":"dbe6c7f5effeec9c332b7d2a95505f1167027922","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/tomorrow-night-blue.css","hash":"33e4483b73b72d561ec3ee6bac085a8ecfc07564","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/tomorrow-night-bright.css","hash":"2a69a02e3820845a4e1f12c7ba4e00e8e61f15a9","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/tomorrow-night-eighties.css","hash":"ab4a7ca393524f5c15c36ae46152a559cdcb2400","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/atelier-seaside-dark.css","hash":"0e649a5526ff0e3452be4519465f9282705e68b1","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/vibrant-ink.css","hash":"db15bbca779664e13472a84146f7f010dc011799","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/tomorrow-night.css","hash":"40d3a13e572b5e2743762aaff97738c3248acbf6","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/tomorrow.css","hash":"2b6bc58a2a889882a45be1c553f7f9a36f9b3f90","modified":1539177043233},{"_id":"public/tools/online-markdown/themes/tranquil-heart.css","hash":"cb601cf28f7ec08fd1a9700aa755f7cb1645ac4a","modified":1539177043234},{"_id":"public/lib/fastclick/LICENSE","hash":"6f474ea75c42442da7bbcf2e9143ce98258efd8d","modified":1539177043234},{"_id":"public/lib/font-awesome/HELP-US-OUT.txt","hash":"ee33b2798b1e714b904d663436c6b3521011d1fa","modified":1539177043234},{"_id":"public/static/api/js/base/class.js","hash":"db02960fb51f69a0d50dc9ed626a998be3884706","modified":1539177043234},{"_id":"public/static/api/js/conf/const.js","hash":"7da7df37d0f3d3e1977a8d107c98a3c1ecdb39c2","modified":1539177043234},{"_id":"public/static/api/js/conf/define.js","hash":"ee0afad836be1553980501855752ccd79fe1fe0e","modified":1539177043234},{"_id":"public/static/api/js/share/combine_api.js","hash":"7ad3c5396bf20704e87f98ebe118034ed3cc7b22","modified":1539177043234},{"_id":"public/static/api/js/share/select_api.js","hash":"bf259a7912ee6124d741dbb5e45cab40bfa45e90","modified":1539177043234},{"_id":"public/static/api/js/share/image_api.js","hash":"43a93415f2a5dd34760042c2bcd9f4692feecb5d","modified":1539177043234},{"_id":"public/static/api/js/share/share_api.js","hash":"f7b86d0cc063f692a73a174d04e77cbe3c5facc7","modified":1539177043234},{"_id":"public/static/api/js/share/likeshare.js","hash":"2d14ab97cc3dc294c51c0d6814f4ea45f4b4e312","modified":1539177043234},{"_id":"public/static/api/js/trans/trans_bdysc.js","hash":"28bb985a03b6b1da5a89a143331932a12126c9c3","modified":1539177043235},{"_id":"public/static/api/js/share/slide_api.js","hash":"c317e3f7fec13d89178e475f26a689bb94e5aa76","modified":1539177043235},{"_id":"public/static/api/js/trans/trans.js","hash":"cb82afecdbede8d5a00b6c5ea9595187b6408376","modified":1539177043235},{"_id":"public/static/api/js/trans/trans_bdxc.js","hash":"a512ebfca0319ab38d06b7b0fb74bcdc942dc46e","modified":1539177043235},{"_id":"public/static/api/js/share/api_base.js","hash":"cbacd664451f80955c2ff4caccd4b9110062c714","modified":1539177043235},{"_id":"public/static/api/js/share/like_api.js","hash":"4034b10f8f34367c6db47ae092e5b4107c2fb8b4","modified":1539177043235},{"_id":"public/static/api/js/start/router.js","hash":"27bc546a9c796b15e59442aaf09ae645a2ed4c74","modified":1539177043235},{"_id":"public/static/api/js/view/image_view.js","hash":"bb66297a5bd2c7dd931b9145f5d4a616876f3373","modified":1539177043235},{"_id":"public/static/api/js/view/select_view.js","hash":"2611efec1d31d85609feea0c57e14d3f817a6220","modified":1539177043236},{"_id":"public/static/api/js/trans/trans_weixin.js","hash":"e68e9bc91ee6fbcd64ac788463870f01602a8562","modified":1539177043236},{"_id":"public/static/api/js/view/like_view.js","hash":"c1b6a3f3f89ac734c6da284c1ba1dde2ada4e250","modified":1539177043236},{"_id":"public/static/api/js/view/share_view.js","hash":"f445ce9cbbcf887da5e248b1cfadc03ab7df76d0","modified":1539177043236},{"_id":"public/static/api/js/view/slide_view.js","hash":"973ded5cd15eb119e79ffd9326af3a44167b26bd","modified":1539177043236},{"_id":"public/static/api/js/view/view_base.js","hash":"b3fd7dafde05d63af3dfe9e0a59f9367f81402c5","modified":1539177043236},{"_id":"public/static/api/img/share/icons_0_32.png","hash":"c20521634fdacef39631031671528713e6ba6081","modified":1539177043236},{"_id":"public/static/api/img/share/icons_0_16.png","hash":"0eec1e81a04664b2032bd389513349e9bd5d5b0f","modified":1539177043236},{"_id":"public/static/api/img/share/icons_0_24.png","hash":"a89223f9714c8c4fa169430a327963ca6a1c9a6e","modified":1539177043236},{"_id":"public/static/api/img/share/icons_1_24.png","hash":"9f1d472095dbe138ef7aff069b1d18cae6ffa942","modified":1539177043236},{"_id":"public/static/api/img/share/icons_2_16.png","hash":"07340442cb61aabb419dd226f4bfb206a7577f52","modified":1539177043236},{"_id":"public/static/api/img/share/l0.gif","hash":"738b92632b0a9789a9eb568b8d101eb64f55f6e0","modified":1539177043236},{"_id":"public/static/api/img/share/icons_2_32.png","hash":"deba62865245a6b5aafa446787d72165c703b943","modified":1539177043237},{"_id":"public/static/api/img/share/icons_2_24.png","hash":"e47fb87c533f2be89f22901f0864d9b5ef83412d","modified":1539177043237},{"_id":"public/static/api/img/share/icons_1_32.png","hash":"09825de5f238c97e4374d545961d6e0d5bbfb3e2","modified":1539177043237},{"_id":"public/static/api/img/share/l5.gif","hash":"148706f56b8ef4fd9d8483d0ac3a6730e72fc0ad","modified":1539177043237},{"_id":"public/static/api/img/share/l4.gif","hash":"8a9c3cf99766d3f07a9c480cfdffdc3197b9a6b9","modified":1539177043237},{"_id":"public/static/api/img/share/l1.gif","hash":"70e1932ca7a622ed3322b683eceb7a590860a55e","modified":1539177043237},{"_id":"public/static/api/img/share/l3.gif","hash":"26c0dd37d98df63abb9d3d83e01bb47c34ee3f0f","modified":1539177043237},{"_id":"public/static/api/img/share/l2.gif","hash":"e6a5d6104c226a686d48759e0268e09d762e242e","modified":1539177043237},{"_id":"public/static/api/img/share/icons_1_16.png","hash":"3793c3265429ab7b830bfaf18322259cd0b4c4ef","modified":1539177043237},{"_id":"public/static/api/img/share/pop_c.gif","hash":"e8b9ece6ddaa47ccb2c15f2396d1cd3020740603","modified":1539177043237},{"_id":"public/static/api/img/share/l8.gif","hash":"ec7dbc7703961356e05528d2844b983f225445e4","modified":1539177043237},{"_id":"public/static/api/img/share/l7.gif","hash":"e4f7e5e56c8f4eb026b5cb0affe3bd69c31af261","modified":1539177043237},{"_id":"public/static/api/img/share/l6.gif","hash":"f4b8e3188f744f13aca46b27b451d55d9e209c48","modified":1539177043237},{"_id":"public/static/api/img/share/r0.gif","hash":"882f255fbafc0136a3917c1dd40db88879c1b1c1","modified":1539177043238},{"_id":"public/static/api/img/share/r2.gif","hash":"67c84a67be3b039892e9cb8c7c29ed29813bf60f","modified":1539177043238},{"_id":"public/static/api/img/share/r3.gif","hash":"ecdd21f1457be54afc96e2d005524eef93d7bf85","modified":1539177043238},{"_id":"public/static/api/img/share/r1.gif","hash":"96064d132ee2477c0e444c2e18162f9d1dc9e9c2","modified":1539177043238},{"_id":"public/static/api/img/share/r7.gif","hash":"3c596c924910c93cf3e37cc1b2870dbf271151e2","modified":1539177043238},{"_id":"public/static/api/img/share/r8.gif","hash":"c068ece54a72a3f2428d4f1b5ca7c176f027dd4e","modified":1539177043238},{"_id":"public/static/api/img/share/r5.gif","hash":"e61b32d1830390303927bdab21823959f8dc7023","modified":1539177043238},{"_id":"public/static/api/img/share/sc.png","hash":"e5a2ca56973a3d6608e7e3a48ebd9fa5ebda9991","modified":1539177043238},{"_id":"public/static/api/img/share/selectshare_close.png","hash":"6f3666278268890a153c85fb9f04ac848c442561","modified":1539177043238},{"_id":"public/static/api/img/share/r4.gif","hash":"517435e69a2215a0f003e75a4861154ca963c30e","modified":1539177043238},{"_id":"public/static/api/img/share/r6.gif","hash":"4bc01e08ef0015fddf5b8c7257c094ec584ca3ee","modified":1539177043238},{"_id":"public/static/api/img/share/share-search-icon.png","hash":"0629677a7eb5aa3e8bab3faa310c6d8c467a3287","modified":1539177043238},{"_id":"public/static/api/js/component/comm_tools.js","hash":"28d096a61f54e64bdbc32d172ae20e7f6e9656a7","modified":1539177043238},{"_id":"public/static/api/js/component/anticheat.js","hash":"ee6b11a7ed39ae67c1c2aeeef96b4a0f40f8083c","modified":1539177043239},{"_id":"public/static/api/js/component/pop_base.js","hash":"eae6e120c149a21caa2883c533ccc40bc07fda51","modified":1539177043239},{"_id":"public/static/api/js/component/pop_dialog.js","hash":"4417d2fa9ad8ff6c79a2352ef07e9d10a1313ee0","modified":1539177043239},{"_id":"public/static/api/js/component/pop_popup.js","hash":"aface5a8c3f71e9e024bf0df5b361ed8f5452f50","modified":1539177043239},{"_id":"public/static/api/js/component/partners.js","hash":"a4c275ffb4d3557280211e6bf0573485b397ffd8","modified":1539177043239},{"_id":"public/static/api/js/component/pop_popup_slide.js","hash":"45a72013fba95249ca965fd4d98f3bbde7a7098a","modified":1539177043239},{"_id":"public/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1539177043239},{"_id":"public/static/api/js/component/animate.js","hash":"17a3495543db66e4eb56a81a93edf3e41ca8cc31","modified":1539177043239},{"_id":"public/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1539177043239},{"_id":"public/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1539177043239},{"_id":"public/static/api/js/component/qrcode.js","hash":"2e3cc4cc5545556dd97ab899ff32d3ab7ccee808","modified":1539177043239},{"_id":"public/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1539177046311},{"_id":"public/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1539177046316},{"_id":"public/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1539177046316},{"_id":"public/lib/font-awesome/css/font-awesome.css.map","hash":"1573904b82807abbb32c97a3632c6c6808eaac50","modified":1539177046316},{"_id":"public/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1539177046316},{"_id":"public/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1539177046335},{"_id":"public/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1539177046335},{"_id":"public/js/src/post-details.js","hash":"2038f54e289b6da5def09689e69f623187147be5","modified":1539177046345},{"_id":"public/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1539177046345},{"_id":"public/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1539177046345},{"_id":"public/js/src/utils.js","hash":"384e17ff857f073060f5bf8c6e4f4b7353236331","modified":1539177046345},{"_id":"public/js/src/algolia-search.js","hash":"96b29f69b8b916b22f62c9959a117b5a968200a5","modified":1539177046345},{"_id":"public/js/src/bootstrap.js","hash":"39bf93769d9080fa01a9a875183b43198f79bc19","modified":1539177046345},{"_id":"public/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1539177046346},{"_id":"public/lib/fastclick/README.html","hash":"da3c74d484c73cc7df565e8abbfa4d6a5a18d4da","modified":1539177046346},{"_id":"public/lib/fastclick/bower.json","hash":"4dcecf83afddba148464d5339c93f6d0aa9f42e9","modified":1539177046346},{"_id":"public/lib/velocity/bower.json","hash":"0ef14e7ccdfba5db6eb3f8fc6aa3b47282c36409","modified":1539177046346},{"_id":"public/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1539177046346},{"_id":"public/lib/font-awesome/bower.json","hash":"64394a2a9aa00f8e321d8daa5e51a420f0e96dad","modified":1539177046346},{"_id":"public/lib/jquery_lazyload/CONTRIBUTING.html","hash":"a6358170d346af13b1452ac157b60505bec7015c","modified":1539177046346},{"_id":"public/lib/jquery_lazyload/README.html","hash":"bde24335f6bc09d8801c0dcd7274f71b466552bd","modified":1539177046346},{"_id":"public/lib/jquery_lazyload/bower.json","hash":"ae3c3b61e6e7f9e1d7e3585ad854380ecc04cf53","modified":1539177046347},{"_id":"public/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1539177046347},{"_id":"public/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1539177046347},{"_id":"public/js/src/schemes/pisces.js","hash":"9ccee9189c910b8a264802d7b2ec305d12dedcd0","modified":1539177046347},{"_id":"public/css/main.css","hash":"321980dda9fc9a27a182eee02db810c7adcdbe14","modified":1539177046347},{"_id":"public/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1539177046347},{"_id":"public/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1539177046347},{"_id":"public/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1539177046347},{"_id":"public/static/api/js/base/tangram.js","hash":"e1952e27f6dc3d6339128cec157acef8cc0a775f","modified":1539177046348},{"_id":"public/lib/font-awesome/fonts/FontAwesome.otf","hash":"1b22f17fdc38070de50e6d1ab3a32da71aa2d819","modified":1539177046348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"97e438cc545714309882fbceadbf344fcaddcec5","modified":1539177046348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"965ce8f688fedbeed504efd498bc9c1622d12362","modified":1539177046348},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"6d7e6a5fc802b13694d8820fc0138037c0977d2e","modified":1539177046348},{"_id":"public/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1539177046351},{"_id":"public/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1539177046351},{"_id":"public/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1539177046351},{"_id":"public/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1539177046351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1539177046351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1539177046351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1539177046351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1539177046351},{"_id":"public/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1539177046352},{"_id":"public/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1539177046352},{"_id":"public/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1539177046352},{"_id":"public/lib/font-awesome/css/font-awesome.css","hash":"4eda182cbcc046dbf449aef97c02c230cf80a494","modified":1539177046352},{"_id":"public/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1539177046352},{"_id":"public/lib/font-awesome/css/font-awesome.min.css","hash":"35a0db1de70a567f384806b72c30189f0e5090c8","modified":1539177046352},{"_id":"public/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1539177046352},{"_id":"public/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1539177046352},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"61d8d967807ef12598d81582fa95b9f600c3ee01","modified":1539177046352},{"_id":"public/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"964e8dac2cee79c4b49b5bc300675773f6518812","modified":1539177046743},{"_id":"public/tools/online-markdown/js/index1.js","hash":"8793020cc2b64f8a996b58e84f512f1aa8215496","modified":1539177046831},{"_id":"public/tools/online-markdown/js/index0.js","hash":"d0c6948479a3ef9411d1f5f9959ba005e7d4009e","modified":1539177046831},{"_id":"public/tools/online-markdown/js/index.js","hash":"dbf4aa69f6b070206a4c09381e9d810a7e549fdb","modified":1539177046831},{"_id":"source/_posts/自定义类加载器.md","hash":"39de15481ff0e1ed33f5b9f9fb9fff3b157e60ed","modified":1539178178317},{"_id":"public/blog/custom-class-loader.html","hash":"9eac304cda4aabfa8d225458b3f5d8e857149c58","modified":1539178223269},{"_id":"public/blog/classloader.html","hash":"e1a6847cdbe46e3649096b5dadd8a4aabec92c59","modified":1539178223269}],"Category":[{"name":"源码解读","_id":"cjn35m50i0003kkjoyuwet3ll"},{"name":"java","_id":"cjn369p8200019wjo3kxj1yo0"}],"Data":[],"Page":[{"title":"分类","type":"categories","comments":0,"translate_title":"classification","date":"2016-12-11T13:32:57.000Z","_content":"","source":"categories/index.md","raw":"---\ntitle: 分类\ntype: categories\ncomments: false\ntranslate_title: classification\ndate: 2016-12-11 21:32:57\n---\n","updated":"2018-09-22T06:43:16.833Z","path":"categories/index.html","layout":"page","_id":"cjn35m50i0001kkjoibvmsuh0","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tags","type":"tags","comments":0,"translate_title":"tags","date":"2016-12-13T13:20:40.000Z","_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ntype: tags\ncomments: false\ntranslate_title: tags\ndate: 2016-12-13 21:20:40\n---\n","updated":"2018-09-22T06:43:16.817Z","path":"tags/index.html","layout":"page","_id":"cjn35m5340009kkjo7hj66k56","content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About me","translate_title":"about-me","date":"2016-12-11T13:36:10.000Z","_content":"\n### About me\n\n姓名： 朱兴生\n\n\n##### 简介\n\n###### 混饭工具Java\n\n- Spring、MyBatis等主流开源框架\n- 多线程并发及性能优化\n- TCP/UDP网络编程\n- Netty、Mina等网络通信框架\n- 常用Linux命令\n- SQL语句、Mysql操作\n- Redis操作，sentinel,cluster\n- Maven、Git、SVN、IDEA、Eclipse等工具\n\n###### 混迹于游戏开发一线，开发过SLG,RPG,A-RPG\n\n- 上线就挂的《领主传说》\n- 略有小成的《疯狂战机》；没上成线的《骑士联盟》\n- 月流水过亿的《大闹天宫OL》;3D试水《惊天动地》\n\n\n##### 联系我\n\n- Email: zhuxingsheng@gmail.com\n- 微信公众号:\n\n![image](http://oirwmbp4e.bkt.clouddn.com/weixin.jpg)","source":"about/index.md","raw":"---\ntitle: About me\ntranslate_title: about-me\ndate: 2016-12-11 21:36:10\n---\n\n### About me\n\n姓名： 朱兴生\n\n\n##### 简介\n\n###### 混饭工具Java\n\n- Spring、MyBatis等主流开源框架\n- 多线程并发及性能优化\n- TCP/UDP网络编程\n- Netty、Mina等网络通信框架\n- 常用Linux命令\n- SQL语句、Mysql操作\n- Redis操作，sentinel,cluster\n- Maven、Git、SVN、IDEA、Eclipse等工具\n\n###### 混迹于游戏开发一线，开发过SLG,RPG,A-RPG\n\n- 上线就挂的《领主传说》\n- 略有小成的《疯狂战机》；没上成线的《骑士联盟》\n- 月流水过亿的《大闹天宫OL》;3D试水《惊天动地》\n\n\n##### 联系我\n\n- Email: zhuxingsheng@gmail.com\n- 微信公众号:\n\n![image](http://oirwmbp4e.bkt.clouddn.com/weixin.jpg)","updated":"2018-09-22T07:32:48.518Z","path":"about/index.html","comments":1,"layout":"page","_id":"cjn35m53k000akkjof9ov83u2","content":"<h3 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h3><p>姓名： 朱兴生</p>\n<h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><h6 id=\"混饭工具Java\"><a href=\"#混饭工具Java\" class=\"headerlink\" title=\"混饭工具Java\"></a>混饭工具Java</h6><ul>\n<li>Spring、MyBatis等主流开源框架</li>\n<li>多线程并发及性能优化</li>\n<li>TCP/UDP网络编程</li>\n<li>Netty、Mina等网络通信框架</li>\n<li>常用Linux命令</li>\n<li>SQL语句、Mysql操作</li>\n<li>Redis操作，sentinel,cluster</li>\n<li>Maven、Git、SVN、IDEA、Eclipse等工具</li>\n</ul>\n<h6 id=\"混迹于游戏开发一线，开发过SLG-RPG-A-RPG\"><a href=\"#混迹于游戏开发一线，开发过SLG-RPG-A-RPG\" class=\"headerlink\" title=\"混迹于游戏开发一线，开发过SLG,RPG,A-RPG\"></a>混迹于游戏开发一线，开发过SLG,RPG,A-RPG</h6><ul>\n<li>上线就挂的《领主传说》</li>\n<li>略有小成的《疯狂战机》；没上成线的《骑士联盟》</li>\n<li>月流水过亿的《大闹天宫OL》;3D试水《惊天动地》</li>\n</ul>\n<h5 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h5><ul>\n<li>Email: <a href=\"mailto:zhuxingsheng@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxingsheng@gmail.com</a></li>\n<li>微信公众号:</li>\n</ul>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/weixin.jpg\" alt=\"image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"About-me\"><a href=\"#About-me\" class=\"headerlink\" title=\"About me\"></a>About me</h3><p>姓名： 朱兴生</p>\n<h5 id=\"简介\"><a href=\"#简介\" class=\"headerlink\" title=\"简介\"></a>简介</h5><h6 id=\"混饭工具Java\"><a href=\"#混饭工具Java\" class=\"headerlink\" title=\"混饭工具Java\"></a>混饭工具Java</h6><ul>\n<li>Spring、MyBatis等主流开源框架</li>\n<li>多线程并发及性能优化</li>\n<li>TCP/UDP网络编程</li>\n<li>Netty、Mina等网络通信框架</li>\n<li>常用Linux命令</li>\n<li>SQL语句、Mysql操作</li>\n<li>Redis操作，sentinel,cluster</li>\n<li>Maven、Git、SVN、IDEA、Eclipse等工具</li>\n</ul>\n<h6 id=\"混迹于游戏开发一线，开发过SLG-RPG-A-RPG\"><a href=\"#混迹于游戏开发一线，开发过SLG-RPG-A-RPG\" class=\"headerlink\" title=\"混迹于游戏开发一线，开发过SLG,RPG,A-RPG\"></a>混迹于游戏开发一线，开发过SLG,RPG,A-RPG</h6><ul>\n<li>上线就挂的《领主传说》</li>\n<li>略有小成的《疯狂战机》；没上成线的《骑士联盟》</li>\n<li>月流水过亿的《大闹天宫OL》;3D试水《惊天动地》</li>\n</ul>\n<h5 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h5><ul>\n<li>Email: <a href=\"mailto:zhuxingsheng@gmail.com\" target=\"_blank\" rel=\"noopener\">zhuxingsheng@gmail.com</a></li>\n<li>微信公众号:</li>\n</ul>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/weixin.jpg\" alt=\"image\"></p>\n"}],"Post":[{"title":"再识RPC-thrift","author":"朱兴生","translate_title":"recognition-of-rpc-thrift","date":"2018-09-22T01:46:00.000Z","_content":"# RPC\n\n## 原理\n\n![image](https://www.cs.rutgers.edu/~pxk/417/notes/images/rpc-flow.png)\n\n什么是Stub？\n\nStub是一段代码，用来转换RPC过程中传递的参数。处理内容包括不同OS之间的大小端问题。另外，Client端一般叫Stub，Server端一般叫Skeleton。\n\n生产方式：\n1. 手动生成，比较麻烦；\n2. 自动生成，使用IDL（InterfaceDescriptionLanguate），定义C/S的接口\n\n\n## RPC的套路：\n\n自古深情留不住 唯有套路留人心\n\nRPC最本质的就是通过socket把方法信息传输到远程服务器并执行相应method\n\n在java界的rpc框架的实现手法：\n\n- 服务端：socket + 反射\n- 客户端：动态代理 + socket\n\n之前也解析过motain框架，[《motain客服端分析》](https://mp.weixin.qq.com/s/kESoK3NmRp9Cwkg5GlI9DQ)、《motain服务端分析》\n\n# thrift\n由于我司框架是通过thrift改造，发现这个框架没有按java套路出牌，可能这是跨语言类RPC的套路，有必要了解一下\n\n> thrift最初由facebook开发用做系统内各语言之间的RPC通信 。2007年由facebook贡献到apache基金 ，08年5月进入apache孵化器,支持多种语言之间的RPC方式的通信：php语言client可以构造一个对象，调用相应的服务方法来调用java语言的服务 ，跨越语言的C/S RPC调用\n　　\n\n![thrift](http://p7c3y4vhx.bkt.clouddn.com/201809192020_382.png)\n\n## 示例\n\n### IDL文件\n```\n//HelloService.thrfit\nnamespace java com.jack.thrift\nservice HelloService{\n    string helloString(1:string what)\n}\n```\n\n### 生成代码\n```\n运行  thrift -gen HelloService.thrfit\n\n```\n会生成一个HelloService类\n\n### 实现服务端与客服端\n\n让服务端打印出客户端传入的参数\n\n#### 服务端\n\n```\npublic class ThriftServer {\n\n    /**\n     * 启动thrift服务器\n     * @param args\n     */\n    public static void main(String[] args) throws Exception {\n        try {\n            System.out.println(\"服务端开启....\");\n            TProcessor tprocessor = new HelloService.Processor<HelloService.Iface>(new HelloServiceImpl());\n            // 简单的单线程服务模型\n            TServerSocket serverTransport = new TServerSocket(9898);\n            TServer.Args tArgs = new TServer.Args(serverTransport);\n            tArgs.processor(tprocessor);\n            tArgs.protocolFactory(new TBinaryProtocol.Factory());\n            TServer server = new TSimpleServer(tArgs);\n            server.serve();\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n#### 客户端\n\n```\npublic class ThriftClient {\n\n    public static void main(String[] args) {\n        System.out.println(\"客户端启动....\");\n        TTransport transport = null;\n        try {\n            transport = new TSocket(\"localhost\", 9898, 30000);\n            // 协议要和服务端一致\n            TProtocol protocol = new TBinaryProtocol(transport);\n            HelloService.Client client = new HelloService.Client(protocol);\n            transport.open();\n            String result = client.helloString(\"哈哈\");\n            System.out.println(result);\n        } catch (TTransportException e) {\n            e.printStackTrace();\n        } catch (TException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != transport) {\n                transport.close();\n            }\n        }\n    }\n}\n```\n\n## 解析\n可以看出server,client代码相对很简单，主要看看生成的HelloService类，这个类就是stub代码\n\n来看一下，这个类是如何封装，把method和args传输到远程的\n\n### client\n```\nHelloService.Client client = new HelloService.Client(protocol);\nString result = client.helloString(\"哈哈\");\n```\n\n关键点在HelloService.Client.helloString()方法\n```\npublic String helloString(String what) throws org.apache.thrift.TException\n    {\n      send_helloString(what);\n      return recv_helloString();\n    }\n```\n\n#### 发送消息\n```\npublic void send_helloString(String what) throws org.apache.thrift.TException\n    {\n      helloString_args args = new helloString_args();\n      args.setWhat(what);\n      sendBase(\"helloString\", args);\n    }\n```\n1. 把args抽象成了一个类\n2. 属性赋值\n3. 发送\n\n主要看下sendBase()方法\n```\n private void sendBase(String methodName, TBase<?,?> args, byte type) throws TException {\n    oprot_.writeMessageBegin(new TMessage(methodName, type, ++seqid_));\n    args.write(oprot_);\n    oprot_.writeMessageEnd();\n    oprot_.getTransport().flush();\n  }\n```\n- 1.oprot_.writeMessageBegin  根据Protocol写数据，比如这儿使用的TBinaryProtocol，以二进制写数据\n```\npublic void writeMessageBegin(TMessage message) throws TException {\n    if (strictWrite_) {\n      int version = VERSION_1 | message.type;\n      writeI32(version);\n      writeString(message.name);\n      writeI32(message.seqid);\n    } else {\n      writeString(message.name);\n      writeByte(message.type);\n      writeI32(message.seqid);\n    }\n  }\n```\n再深入看看怎么写二进制数据的\n\nint类型\n```\npublic void writeI32(int i32) throws TException {\n    inoutTemp[0] = (byte)(0xff & (i32 >> 24));\n    inoutTemp[1] = (byte)(0xff & (i32 >> 16));\n    inoutTemp[2] = (byte)(0xff & (i32 >> 8));\n    inoutTemp[3] = (byte)(0xff & (i32));\n    trans_.write(inoutTemp, 0, 4);\n  }\n```\n\nstring类型，先写长度，再写bytes\n```\npublic void writeString(String str) throws TException {\n    try {\n      byte[] dat = str.getBytes(\"UTF-8\");\n      writeI32(dat.length);\n      trans_.write(dat, 0, dat.length);\n    } catch (UnsupportedEncodingException uex) {\n      throw new TException(\"JVM DOES NOT SUPPORT UTF-8\");\n    }\n  }\n```\n这儿写最终还是使用Transport.write,比如这儿使用的TSocket\n```\npublic void write(byte[] buf, int off, int len) throws TTransportException {\n    if (outputStream_ == null) {\n      throw new TTransportException(TTransportException.NOT_OPEN, \"Cannot write to null outputStream\");\n    }\n    try {\n      outputStream_.write(buf, off, len);\n    } catch (IOException iox) {\n      throw new TTransportException(TTransportException.UNKNOWN, iox);\n    }\n  }\n```\n就是写到\n```\noutputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);\n```\n\n- 2.args.write(oprot_);\n```\npublic void write(org.apache.thrift.protocol.TProtocol oprot, helloString_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.what != null) {\n          oprot.writeFieldBegin(WHAT_FIELD_DESC);\n          oprot.writeString(struct.what);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n```\n这就是写field,也就是向输出流里写参数内容\n\n- 3.oprot_.writeMessageEnd();\n这表示消息写完成了，各个协议处理不同，比如二进制就是空实现，但如json就需要写个\"}\"，以完成json格式\n\n- 4.oprot_.getTransport().flush();  直接flush\n```\n/**\n   * Flushes the underlying output stream if not null.\n   */\n  public void flush() throws TTransportException {\n    if (outputStream_ == null) {\n      throw new TTransportException(TTransportException.NOT_OPEN, \"Cannot flush null outputStream\");\n    }\n    try {\n      outputStream_.flush();\n    } catch (IOException iox) {\n      throw new TTransportException(TTransportException.UNKNOWN, iox);\n    }\n  }\n```\n\n#### client总结\n整个发送消息就结束了，虽然没有按套路使用动态代理，而是通过生成的stub代码，把methodName,args给封装好了\n\n### server\n服务端也没有通过反射的方式\n\n\n主要逻辑在生成的HelloService$Processor类中\n```\npublic static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {\n    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());\n    public Processor(I iface) {\n      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));\n    }\n\n    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {\n      super(iface, getProcessMap(processMap));\n    }\n\n    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {\n      processMap.put(\"helloString\", new helloString());\n      return processMap;\n    }\n\n    public static class helloString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, helloString_args> {\n      public helloString() {\n        super(\"helloString\");\n      }\n\n      public helloString_args getEmptyArgsInstance() {\n        return new helloString_args();\n      }\n\n      protected boolean isOneway() {\n        return false;\n      }\n\n      @Override\n      protected boolean handleRuntimeExceptions() {\n        return false;\n      }\n\n      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException {\n        helloString_result result = new helloString_result();\n        result.success = iface.helloString(args.what);\n        return result;\n      }\n    }\n\n  }\n```\n\n- 1.先看构造函数\n```\nprotected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {\n      super(iface, getProcessMap(processMap));\n    }\n\n    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {\n      processMap.put(\"helloString\", new helloString());\n      return processMap;\n    }\n```\n这段把methodName与对应的处理类映射，那后面的事就简单了，当接受到消息，取得methodName,通过map获取对就的处理类回调就可以\n\n```\npublic static class helloString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, helloString_args> {\n      public helloString() {\n        super(\"helloString\");\n      }\n\n      public helloString_args getEmptyArgsInstance() {\n        return new helloString_args();\n      }\n\n      protected boolean isOneway() {\n        return false;\n      }\n\n      @Override\n      protected boolean handleRuntimeExceptions() {\n        return false;\n      }\n\n      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException {\n        helloString_result result = new helloString_result();\n        result.success = iface.helloString(args.what);\n        return result;\n      }\n    }\n```\n处理类，继承ProcessFunction类，实现getResult(),这个方法就是调用了对应service.helloString()\n\n可以再深入看一下,在socket监听消息时\n```\nclient = serverTransport_.accept();\n        if (client != null) {\n          processor = processorFactory_.getProcessor(client);\n          inputTransport = inputTransportFactory_.getTransport(client);\n          outputTransport = outputTransportFactory_.getTransport(client);\n          inputProtocol = inputProtocolFactory_.getProtocol(inputTransport);\n          outputProtocol = outputProtocolFactory_.getProtocol(outputTransport);\n          if (eventHandler_ != null) {\n            connectionContext = eventHandler_.createContext(inputProtocol, outputProtocol);\n          }\n          while (true) {\n            if (eventHandler_ != null) {\n              eventHandler_.processContext(connectionContext, inputTransport, outputTransport);\n            }\n            if(!processor.process(inputProtocol, outputProtocol)) {\n              break;\n            }\n          }\n```\n关键行：processor.process(inputProtocol, outputProtocol)\n\n```\npublic boolean process(TProtocol in, TProtocol out) throws TException {\n    TMessage msg = in.readMessageBegin();\n    ProcessFunction fn = processMap.get(msg.name);\n    if (fn == null) {\n      TProtocolUtil.skip(in, TType.STRUCT);\n      in.readMessageEnd();\n      TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, \"Invalid method name: '\"+msg.name+\"'\");\n      out.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));\n      x.write(out);\n      out.writeMessageEnd();\n      out.getTransport().flush();\n      return true;\n    }\n    fn.process(msg.seqid, in, out, iface);\n    return true;\n  }\n```\n这就很明显了，通过methodName从map中取得ProccessFunction，再执行process方法，调用相应service的方法\n\n# 总结\n虽然thrift没有按以往java套路出牌，但最根本的把method发送到远程执行是一致的。可能对于多语言来讲，便于所以语言一致性，的确需要通过生成的stub代码手法来实现RPC\n\n当然thrift并不简单，还有很多的内容需要深挖学习，但至少这个简单示例可以了解跨语言型的RPC，相关IDL,Stub的知识，有清晰认知，而不局限于概念","source":"_posts/再识RPC-thrift.md","raw":"---\ntitle: 再识RPC-thrift\nauthor: 朱兴生\ntranslate_title: recognition-of-rpc-thrift\ntags:\n  - rpc\n  - thrift\ncategories:\n  - 源码解读\ndate: 2018-09-22 09:46:00\n---\n# RPC\n\n## 原理\n\n![image](https://www.cs.rutgers.edu/~pxk/417/notes/images/rpc-flow.png)\n\n什么是Stub？\n\nStub是一段代码，用来转换RPC过程中传递的参数。处理内容包括不同OS之间的大小端问题。另外，Client端一般叫Stub，Server端一般叫Skeleton。\n\n生产方式：\n1. 手动生成，比较麻烦；\n2. 自动生成，使用IDL（InterfaceDescriptionLanguate），定义C/S的接口\n\n\n## RPC的套路：\n\n自古深情留不住 唯有套路留人心\n\nRPC最本质的就是通过socket把方法信息传输到远程服务器并执行相应method\n\n在java界的rpc框架的实现手法：\n\n- 服务端：socket + 反射\n- 客户端：动态代理 + socket\n\n之前也解析过motain框架，[《motain客服端分析》](https://mp.weixin.qq.com/s/kESoK3NmRp9Cwkg5GlI9DQ)、《motain服务端分析》\n\n# thrift\n由于我司框架是通过thrift改造，发现这个框架没有按java套路出牌，可能这是跨语言类RPC的套路，有必要了解一下\n\n> thrift最初由facebook开发用做系统内各语言之间的RPC通信 。2007年由facebook贡献到apache基金 ，08年5月进入apache孵化器,支持多种语言之间的RPC方式的通信：php语言client可以构造一个对象，调用相应的服务方法来调用java语言的服务 ，跨越语言的C/S RPC调用\n　　\n\n![thrift](http://p7c3y4vhx.bkt.clouddn.com/201809192020_382.png)\n\n## 示例\n\n### IDL文件\n```\n//HelloService.thrfit\nnamespace java com.jack.thrift\nservice HelloService{\n    string helloString(1:string what)\n}\n```\n\n### 生成代码\n```\n运行  thrift -gen HelloService.thrfit\n\n```\n会生成一个HelloService类\n\n### 实现服务端与客服端\n\n让服务端打印出客户端传入的参数\n\n#### 服务端\n\n```\npublic class ThriftServer {\n\n    /**\n     * 启动thrift服务器\n     * @param args\n     */\n    public static void main(String[] args) throws Exception {\n        try {\n            System.out.println(\"服务端开启....\");\n            TProcessor tprocessor = new HelloService.Processor<HelloService.Iface>(new HelloServiceImpl());\n            // 简单的单线程服务模型\n            TServerSocket serverTransport = new TServerSocket(9898);\n            TServer.Args tArgs = new TServer.Args(serverTransport);\n            tArgs.processor(tprocessor);\n            tArgs.protocolFactory(new TBinaryProtocol.Factory());\n            TServer server = new TSimpleServer(tArgs);\n            server.serve();\n        }catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n}\n```\n\n#### 客户端\n\n```\npublic class ThriftClient {\n\n    public static void main(String[] args) {\n        System.out.println(\"客户端启动....\");\n        TTransport transport = null;\n        try {\n            transport = new TSocket(\"localhost\", 9898, 30000);\n            // 协议要和服务端一致\n            TProtocol protocol = new TBinaryProtocol(transport);\n            HelloService.Client client = new HelloService.Client(protocol);\n            transport.open();\n            String result = client.helloString(\"哈哈\");\n            System.out.println(result);\n        } catch (TTransportException e) {\n            e.printStackTrace();\n        } catch (TException e) {\n            e.printStackTrace();\n        } finally {\n            if (null != transport) {\n                transport.close();\n            }\n        }\n    }\n}\n```\n\n## 解析\n可以看出server,client代码相对很简单，主要看看生成的HelloService类，这个类就是stub代码\n\n来看一下，这个类是如何封装，把method和args传输到远程的\n\n### client\n```\nHelloService.Client client = new HelloService.Client(protocol);\nString result = client.helloString(\"哈哈\");\n```\n\n关键点在HelloService.Client.helloString()方法\n```\npublic String helloString(String what) throws org.apache.thrift.TException\n    {\n      send_helloString(what);\n      return recv_helloString();\n    }\n```\n\n#### 发送消息\n```\npublic void send_helloString(String what) throws org.apache.thrift.TException\n    {\n      helloString_args args = new helloString_args();\n      args.setWhat(what);\n      sendBase(\"helloString\", args);\n    }\n```\n1. 把args抽象成了一个类\n2. 属性赋值\n3. 发送\n\n主要看下sendBase()方法\n```\n private void sendBase(String methodName, TBase<?,?> args, byte type) throws TException {\n    oprot_.writeMessageBegin(new TMessage(methodName, type, ++seqid_));\n    args.write(oprot_);\n    oprot_.writeMessageEnd();\n    oprot_.getTransport().flush();\n  }\n```\n- 1.oprot_.writeMessageBegin  根据Protocol写数据，比如这儿使用的TBinaryProtocol，以二进制写数据\n```\npublic void writeMessageBegin(TMessage message) throws TException {\n    if (strictWrite_) {\n      int version = VERSION_1 | message.type;\n      writeI32(version);\n      writeString(message.name);\n      writeI32(message.seqid);\n    } else {\n      writeString(message.name);\n      writeByte(message.type);\n      writeI32(message.seqid);\n    }\n  }\n```\n再深入看看怎么写二进制数据的\n\nint类型\n```\npublic void writeI32(int i32) throws TException {\n    inoutTemp[0] = (byte)(0xff & (i32 >> 24));\n    inoutTemp[1] = (byte)(0xff & (i32 >> 16));\n    inoutTemp[2] = (byte)(0xff & (i32 >> 8));\n    inoutTemp[3] = (byte)(0xff & (i32));\n    trans_.write(inoutTemp, 0, 4);\n  }\n```\n\nstring类型，先写长度，再写bytes\n```\npublic void writeString(String str) throws TException {\n    try {\n      byte[] dat = str.getBytes(\"UTF-8\");\n      writeI32(dat.length);\n      trans_.write(dat, 0, dat.length);\n    } catch (UnsupportedEncodingException uex) {\n      throw new TException(\"JVM DOES NOT SUPPORT UTF-8\");\n    }\n  }\n```\n这儿写最终还是使用Transport.write,比如这儿使用的TSocket\n```\npublic void write(byte[] buf, int off, int len) throws TTransportException {\n    if (outputStream_ == null) {\n      throw new TTransportException(TTransportException.NOT_OPEN, \"Cannot write to null outputStream\");\n    }\n    try {\n      outputStream_.write(buf, off, len);\n    } catch (IOException iox) {\n      throw new TTransportException(TTransportException.UNKNOWN, iox);\n    }\n  }\n```\n就是写到\n```\noutputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);\n```\n\n- 2.args.write(oprot_);\n```\npublic void write(org.apache.thrift.protocol.TProtocol oprot, helloString_args struct) throws org.apache.thrift.TException {\n        struct.validate();\n\n        oprot.writeStructBegin(STRUCT_DESC);\n        if (struct.what != null) {\n          oprot.writeFieldBegin(WHAT_FIELD_DESC);\n          oprot.writeString(struct.what);\n          oprot.writeFieldEnd();\n        }\n        oprot.writeFieldStop();\n        oprot.writeStructEnd();\n      }\n```\n这就是写field,也就是向输出流里写参数内容\n\n- 3.oprot_.writeMessageEnd();\n这表示消息写完成了，各个协议处理不同，比如二进制就是空实现，但如json就需要写个\"}\"，以完成json格式\n\n- 4.oprot_.getTransport().flush();  直接flush\n```\n/**\n   * Flushes the underlying output stream if not null.\n   */\n  public void flush() throws TTransportException {\n    if (outputStream_ == null) {\n      throw new TTransportException(TTransportException.NOT_OPEN, \"Cannot flush null outputStream\");\n    }\n    try {\n      outputStream_.flush();\n    } catch (IOException iox) {\n      throw new TTransportException(TTransportException.UNKNOWN, iox);\n    }\n  }\n```\n\n#### client总结\n整个发送消息就结束了，虽然没有按套路使用动态代理，而是通过生成的stub代码，把methodName,args给封装好了\n\n### server\n服务端也没有通过反射的方式\n\n\n主要逻辑在生成的HelloService$Processor类中\n```\npublic static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {\n    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());\n    public Processor(I iface) {\n      super(iface, getProcessMap(new java.util.HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));\n    }\n\n    protected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {\n      super(iface, getProcessMap(processMap));\n    }\n\n    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {\n      processMap.put(\"helloString\", new helloString());\n      return processMap;\n    }\n\n    public static class helloString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, helloString_args> {\n      public helloString() {\n        super(\"helloString\");\n      }\n\n      public helloString_args getEmptyArgsInstance() {\n        return new helloString_args();\n      }\n\n      protected boolean isOneway() {\n        return false;\n      }\n\n      @Override\n      protected boolean handleRuntimeExceptions() {\n        return false;\n      }\n\n      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException {\n        helloString_result result = new helloString_result();\n        result.success = iface.helloString(args.what);\n        return result;\n      }\n    }\n\n  }\n```\n\n- 1.先看构造函数\n```\nprotected Processor(I iface, java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {\n      super(iface, getProcessMap(processMap));\n    }\n\n    private static <I extends Iface> java.util.Map<String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {\n      processMap.put(\"helloString\", new helloString());\n      return processMap;\n    }\n```\n这段把methodName与对应的处理类映射，那后面的事就简单了，当接受到消息，取得methodName,通过map获取对就的处理类回调就可以\n\n```\npublic static class helloString<I extends Iface> extends org.apache.thrift.ProcessFunction<I, helloString_args> {\n      public helloString() {\n        super(\"helloString\");\n      }\n\n      public helloString_args getEmptyArgsInstance() {\n        return new helloString_args();\n      }\n\n      protected boolean isOneway() {\n        return false;\n      }\n\n      @Override\n      protected boolean handleRuntimeExceptions() {\n        return false;\n      }\n\n      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException {\n        helloString_result result = new helloString_result();\n        result.success = iface.helloString(args.what);\n        return result;\n      }\n    }\n```\n处理类，继承ProcessFunction类，实现getResult(),这个方法就是调用了对应service.helloString()\n\n可以再深入看一下,在socket监听消息时\n```\nclient = serverTransport_.accept();\n        if (client != null) {\n          processor = processorFactory_.getProcessor(client);\n          inputTransport = inputTransportFactory_.getTransport(client);\n          outputTransport = outputTransportFactory_.getTransport(client);\n          inputProtocol = inputProtocolFactory_.getProtocol(inputTransport);\n          outputProtocol = outputProtocolFactory_.getProtocol(outputTransport);\n          if (eventHandler_ != null) {\n            connectionContext = eventHandler_.createContext(inputProtocol, outputProtocol);\n          }\n          while (true) {\n            if (eventHandler_ != null) {\n              eventHandler_.processContext(connectionContext, inputTransport, outputTransport);\n            }\n            if(!processor.process(inputProtocol, outputProtocol)) {\n              break;\n            }\n          }\n```\n关键行：processor.process(inputProtocol, outputProtocol)\n\n```\npublic boolean process(TProtocol in, TProtocol out) throws TException {\n    TMessage msg = in.readMessageBegin();\n    ProcessFunction fn = processMap.get(msg.name);\n    if (fn == null) {\n      TProtocolUtil.skip(in, TType.STRUCT);\n      in.readMessageEnd();\n      TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, \"Invalid method name: '\"+msg.name+\"'\");\n      out.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));\n      x.write(out);\n      out.writeMessageEnd();\n      out.getTransport().flush();\n      return true;\n    }\n    fn.process(msg.seqid, in, out, iface);\n    return true;\n  }\n```\n这就很明显了，通过methodName从map中取得ProccessFunction，再执行process方法，调用相应service的方法\n\n# 总结\n虽然thrift没有按以往java套路出牌，但最根本的把method发送到远程执行是一致的。可能对于多语言来讲，便于所以语言一致性，的确需要通过生成的stub代码手法来实现RPC\n\n当然thrift并不简单，还有很多的内容需要深挖学习，但至少这个简单示例可以了解跨语言型的RPC，相关IDL,Stub的知识，有清晰认知，而不局限于概念","slug":"再识RPC-thrift","published":1,"updated":"2018-09-22T06:27:20.285Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn35m50i0000kkjoy1bq8d4z","content":"<h1 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><img src=\"https://www.cs.rutgers.edu/~pxk/417/notes/images/rpc-flow.png\" alt=\"image\"></p>\n<p>什么是Stub？</p>\n<p>Stub是一段代码，用来转换RPC过程中传递的参数。处理内容包括不同OS之间的大小端问题。另外，Client端一般叫Stub，Server端一般叫Skeleton。</p>\n<p>生产方式：</p>\n<ol>\n<li>手动生成，比较麻烦；</li>\n<li>自动生成，使用IDL（InterfaceDescriptionLanguate），定义C/S的接口</li>\n</ol>\n<h2 id=\"RPC的套路：\"><a href=\"#RPC的套路：\" class=\"headerlink\" title=\"RPC的套路：\"></a>RPC的套路：</h2><p>自古深情留不住 唯有套路留人心</p>\n<p>RPC最本质的就是通过socket把方法信息传输到远程服务器并执行相应method</p>\n<p>在java界的rpc框架的实现手法：</p>\n<ul>\n<li>服务端：socket + 反射</li>\n<li>客户端：动态代理 + socket</li>\n</ul>\n<p>之前也解析过motain框架，<a href=\"https://mp.weixin.qq.com/s/kESoK3NmRp9Cwkg5GlI9DQ\" target=\"_blank\" rel=\"noopener\">《motain客服端分析》</a>、《motain服务端分析》</p>\n<h1 id=\"thrift\"><a href=\"#thrift\" class=\"headerlink\" title=\"thrift\"></a>thrift</h1><p>由于我司框架是通过thrift改造，发现这个框架没有按java套路出牌，可能这是跨语言类RPC的套路，有必要了解一下</p>\n<blockquote>\n<p>thrift最初由facebook开发用做系统内各语言之间的RPC通信 。2007年由facebook贡献到apache基金 ，08年5月进入apache孵化器,支持多种语言之间的RPC方式的通信：php语言client可以构造一个对象，调用相应的服务方法来调用java语言的服务 ，跨越语言的C/S RPC调用\n　　</p>\n</blockquote>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809192020_382.png\" alt=\"thrift\"></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"IDL文件\"><a href=\"#IDL文件\" class=\"headerlink\" title=\"IDL文件\"></a>IDL文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//HelloService.thrfit</span><br><span class=\"line\">namespace java com.jack.thrift</span><br><span class=\"line\">service HelloService&#123;</span><br><span class=\"line\">    string helloString(1:string what)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成代码\"><a href=\"#生成代码\" class=\"headerlink\" title=\"生成代码\"></a>生成代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行  thrift -gen HelloService.thrfit</span><br></pre></td></tr></table></figure>\n<p>会生成一个HelloService类</p>\n<h3 id=\"实现服务端与客服端\"><a href=\"#实现服务端与客服端\" class=\"headerlink\" title=\"实现服务端与客服端\"></a>实现服务端与客服端</h3><p>让服务端打印出客户端传入的参数</p>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThriftServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动thrift服务器</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;服务端开启....&quot;);</span><br><span class=\"line\">            TProcessor tprocessor = new HelloService.Processor&lt;HelloService.Iface&gt;(new HelloServiceImpl());</span><br><span class=\"line\">            // 简单的单线程服务模型</span><br><span class=\"line\">            TServerSocket serverTransport = new TServerSocket(9898);</span><br><span class=\"line\">            TServer.Args tArgs = new TServer.Args(serverTransport);</span><br><span class=\"line\">            tArgs.processor(tprocessor);</span><br><span class=\"line\">            tArgs.protocolFactory(new TBinaryProtocol.Factory());</span><br><span class=\"line\">            TServer server = new TSimpleServer(tArgs);</span><br><span class=\"line\">            server.serve();</span><br><span class=\"line\">        &#125;catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThriftClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;客户端启动....&quot;);</span><br><span class=\"line\">        TTransport transport = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            transport = new TSocket(&quot;localhost&quot;, 9898, 30000);</span><br><span class=\"line\">            // 协议要和服务端一致</span><br><span class=\"line\">            TProtocol protocol = new TBinaryProtocol(transport);</span><br><span class=\"line\">            HelloService.Client client = new HelloService.Client(protocol);</span><br><span class=\"line\">            transport.open();</span><br><span class=\"line\">            String result = client.helloString(&quot;哈哈&quot;);</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">        &#125; catch (TTransportException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (TException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (null != transport) &#123;</span><br><span class=\"line\">                transport.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>可以看出server,client代码相对很简单，主要看看生成的HelloService类，这个类就是stub代码</p>\n<p>来看一下，这个类是如何封装，把method和args传输到远程的</p>\n<h3 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloService.Client client = new HelloService.Client(protocol);</span><br><span class=\"line\">String result = client.helloString(&quot;哈哈&quot;);</span><br></pre></td></tr></table></figure>\n<p>关键点在HelloService.Client.helloString()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String helloString(String what) throws org.apache.thrift.TException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      send_helloString(what);</span><br><span class=\"line\">      return recv_helloString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void send_helloString(String what) throws org.apache.thrift.TException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      helloString_args args = new helloString_args();</span><br><span class=\"line\">      args.setWhat(what);</span><br><span class=\"line\">      sendBase(&quot;helloString&quot;, args);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>把args抽象成了一个类</li>\n<li>属性赋值</li>\n<li>发送</li>\n</ol>\n<p>主要看下sendBase()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void sendBase(String methodName, TBase&lt;?,?&gt; args, byte type) throws TException &#123;</span><br><span class=\"line\">   oprot_.writeMessageBegin(new TMessage(methodName, type, ++seqid_));</span><br><span class=\"line\">   args.write(oprot_);</span><br><span class=\"line\">   oprot_.writeMessageEnd();</span><br><span class=\"line\">   oprot_.getTransport().flush();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>1.oprot_.writeMessageBegin  根据Protocol写数据，比如这儿使用的TBinaryProtocol，以二进制写数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void writeMessageBegin(TMessage message) throws TException &#123;</span><br><span class=\"line\">    if (strictWrite_) &#123;</span><br><span class=\"line\">      int version = VERSION_1 | message.type;</span><br><span class=\"line\">      writeI32(version);</span><br><span class=\"line\">      writeString(message.name);</span><br><span class=\"line\">      writeI32(message.seqid);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      writeString(message.name);</span><br><span class=\"line\">      writeByte(message.type);</span><br><span class=\"line\">      writeI32(message.seqid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>再深入看看怎么写二进制数据的</p>\n<p>int类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void writeI32(int i32) throws TException &#123;</span><br><span class=\"line\">    inoutTemp[0] = (byte)(0xff &amp; (i32 &gt;&gt; 24));</span><br><span class=\"line\">    inoutTemp[1] = (byte)(0xff &amp; (i32 &gt;&gt; 16));</span><br><span class=\"line\">    inoutTemp[2] = (byte)(0xff &amp; (i32 &gt;&gt; 8));</span><br><span class=\"line\">    inoutTemp[3] = (byte)(0xff &amp; (i32));</span><br><span class=\"line\">    trans_.write(inoutTemp, 0, 4);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>string类型，先写长度，再写bytes<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void writeString(String str) throws TException &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      byte[] dat = str.getBytes(&quot;UTF-8&quot;);</span><br><span class=\"line\">      writeI32(dat.length);</span><br><span class=\"line\">      trans_.write(dat, 0, dat.length);</span><br><span class=\"line\">    &#125; catch (UnsupportedEncodingException uex) &#123;</span><br><span class=\"line\">      throw new TException(&quot;JVM DOES NOT SUPPORT UTF-8&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这儿写最终还是使用Transport.write,比如这儿使用的TSocket<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void write(byte[] buf, int off, int len) throws TTransportException &#123;</span><br><span class=\"line\">    if (outputStream_ == null) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.NOT_OPEN, &quot;Cannot write to null outputStream&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      outputStream_.write(buf, off, len);</span><br><span class=\"line\">    &#125; catch (IOException iox) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.UNKNOWN, iox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>就是写到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>2.args.write(oprot_);<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void write(org.apache.thrift.protocol.TProtocol oprot, helloString_args struct) throws org.apache.thrift.TException &#123;</span><br><span class=\"line\">        struct.validate();</span><br><span class=\"line\"></span><br><span class=\"line\">        oprot.writeStructBegin(STRUCT_DESC);</span><br><span class=\"line\">        if (struct.what != null) &#123;</span><br><span class=\"line\">          oprot.writeFieldBegin(WHAT_FIELD_DESC);</span><br><span class=\"line\">          oprot.writeString(struct.what);</span><br><span class=\"line\">          oprot.writeFieldEnd();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        oprot.writeFieldStop();</span><br><span class=\"line\">        oprot.writeStructEnd();</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这就是写field,也就是向输出流里写参数内容</p>\n<ul>\n<li><p>3.oprot_.writeMessageEnd();<br>这表示消息写完成了，各个协议处理不同，比如二进制就是空实现，但如json就需要写个”}”，以完成json格式</p>\n</li>\n<li><p>4.oprot_.getTransport().flush();  直接flush</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * Flushes the underlying output stream if not null.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void flush() throws TTransportException &#123;</span><br><span class=\"line\">    if (outputStream_ == null) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.NOT_OPEN, &quot;Cannot flush null outputStream&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      outputStream_.flush();</span><br><span class=\"line\">    &#125; catch (IOException iox) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.UNKNOWN, iox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"client总结\"><a href=\"#client总结\" class=\"headerlink\" title=\"client总结\"></a>client总结</h4><p>整个发送消息就结束了，虽然没有按套路使用动态代理，而是通过生成的stub代码，把methodName,args给封装好了</p>\n<h3 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h3><p>服务端也没有通过反射的方式</p>\n<p>主要逻辑在生成的HelloService$Processor类中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Processor&lt;I extends Iface&gt; extends org.apache.thrift.TBaseProcessor&lt;I&gt; implements org.apache.thrift.TProcessor &#123;</span><br><span class=\"line\">    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());</span><br><span class=\"line\">    public Processor(I iface) &#123;</span><br><span class=\"line\">      super(iface, getProcessMap(new java.util.HashMap&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt;()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected Processor(I iface, java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      super(iface, getProcessMap(processMap));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static &lt;I extends Iface&gt; java.util.Map&lt;String,  org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; getProcessMap(java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends  org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      processMap.put(&quot;helloString&quot;, new helloString());</span><br><span class=\"line\">      return processMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class helloString&lt;I extends Iface&gt; extends org.apache.thrift.ProcessFunction&lt;I, helloString_args&gt; &#123;</span><br><span class=\"line\">      public helloString() &#123;</span><br><span class=\"line\">        super(&quot;helloString&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_args getEmptyArgsInstance() &#123;</span><br><span class=\"line\">        return new helloString_args();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected boolean isOneway() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      protected boolean handleRuntimeExceptions() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException &#123;</span><br><span class=\"line\">        helloString_result result = new helloString_result();</span><br><span class=\"line\">        result.success = iface.helloString(args.what);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>1.先看构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected Processor(I iface, java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      super(iface, getProcessMap(processMap));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static &lt;I extends Iface&gt; java.util.Map&lt;String,  org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; getProcessMap(java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends  org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      processMap.put(&quot;helloString&quot;, new helloString());</span><br><span class=\"line\">      return processMap;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这段把methodName与对应的处理类映射，那后面的事就简单了，当接受到消息，取得methodName,通过map获取对就的处理类回调就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class helloString&lt;I extends Iface&gt; extends org.apache.thrift.ProcessFunction&lt;I, helloString_args&gt; &#123;</span><br><span class=\"line\">      public helloString() &#123;</span><br><span class=\"line\">        super(&quot;helloString&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_args getEmptyArgsInstance() &#123;</span><br><span class=\"line\">        return new helloString_args();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected boolean isOneway() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      protected boolean handleRuntimeExceptions() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException &#123;</span><br><span class=\"line\">        helloString_result result = new helloString_result();</span><br><span class=\"line\">        result.success = iface.helloString(args.what);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>处理类，继承ProcessFunction类，实现getResult(),这个方法就是调用了对应service.helloString()</p>\n<p>可以再深入看一下,在socket监听消息时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client = serverTransport_.accept();</span><br><span class=\"line\">        if (client != null) &#123;</span><br><span class=\"line\">          processor = processorFactory_.getProcessor(client);</span><br><span class=\"line\">          inputTransport = inputTransportFactory_.getTransport(client);</span><br><span class=\"line\">          outputTransport = outputTransportFactory_.getTransport(client);</span><br><span class=\"line\">          inputProtocol = inputProtocolFactory_.getProtocol(inputTransport);</span><br><span class=\"line\">          outputProtocol = outputProtocolFactory_.getProtocol(outputTransport);</span><br><span class=\"line\">          if (eventHandler_ != null) &#123;</span><br><span class=\"line\">            connectionContext = eventHandler_.createContext(inputProtocol, outputProtocol);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          while (true) &#123;</span><br><span class=\"line\">            if (eventHandler_ != null) &#123;</span><br><span class=\"line\">              eventHandler_.processContext(connectionContext, inputTransport, outputTransport);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(!processor.process(inputProtocol, outputProtocol)) &#123;</span><br><span class=\"line\">              break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure></p>\n<p>关键行：processor.process(inputProtocol, outputProtocol)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean process(TProtocol in, TProtocol out) throws TException &#123;</span><br><span class=\"line\">    TMessage msg = in.readMessageBegin();</span><br><span class=\"line\">    ProcessFunction fn = processMap.get(msg.name);</span><br><span class=\"line\">    if (fn == null) &#123;</span><br><span class=\"line\">      TProtocolUtil.skip(in, TType.STRUCT);</span><br><span class=\"line\">      in.readMessageEnd();</span><br><span class=\"line\">      TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, &quot;Invalid method name: &apos;&quot;+msg.name+&quot;&apos;&quot;);</span><br><span class=\"line\">      out.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));</span><br><span class=\"line\">      x.write(out);</span><br><span class=\"line\">      out.writeMessageEnd();</span><br><span class=\"line\">      out.getTransport().flush();</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn.process(msg.seqid, in, out, iface);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这就很明显了，通过methodName从map中取得ProccessFunction，再执行process方法，调用相应service的方法</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>虽然thrift没有按以往java套路出牌，但最根本的把method发送到远程执行是一致的。可能对于多语言来讲，便于所以语言一致性，的确需要通过生成的stub代码手法来实现RPC</p>\n<p>当然thrift并不简单，还有很多的内容需要深挖学习，但至少这个简单示例可以了解跨语言型的RPC，相关IDL,Stub的知识，有清晰认知，而不局限于概念</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"RPC\"><a href=\"#RPC\" class=\"headerlink\" title=\"RPC\"></a>RPC</h1><h2 id=\"原理\"><a href=\"#原理\" class=\"headerlink\" title=\"原理\"></a>原理</h2><p><img src=\"https://www.cs.rutgers.edu/~pxk/417/notes/images/rpc-flow.png\" alt=\"image\"></p>\n<p>什么是Stub？</p>\n<p>Stub是一段代码，用来转换RPC过程中传递的参数。处理内容包括不同OS之间的大小端问题。另外，Client端一般叫Stub，Server端一般叫Skeleton。</p>\n<p>生产方式：</p>\n<ol>\n<li>手动生成，比较麻烦；</li>\n<li>自动生成，使用IDL（InterfaceDescriptionLanguate），定义C/S的接口</li>\n</ol>\n<h2 id=\"RPC的套路：\"><a href=\"#RPC的套路：\" class=\"headerlink\" title=\"RPC的套路：\"></a>RPC的套路：</h2><p>自古深情留不住 唯有套路留人心</p>\n<p>RPC最本质的就是通过socket把方法信息传输到远程服务器并执行相应method</p>\n<p>在java界的rpc框架的实现手法：</p>\n<ul>\n<li>服务端：socket + 反射</li>\n<li>客户端：动态代理 + socket</li>\n</ul>\n<p>之前也解析过motain框架，<a href=\"https://mp.weixin.qq.com/s/kESoK3NmRp9Cwkg5GlI9DQ\" target=\"_blank\" rel=\"noopener\">《motain客服端分析》</a>、《motain服务端分析》</p>\n<h1 id=\"thrift\"><a href=\"#thrift\" class=\"headerlink\" title=\"thrift\"></a>thrift</h1><p>由于我司框架是通过thrift改造，发现这个框架没有按java套路出牌，可能这是跨语言类RPC的套路，有必要了解一下</p>\n<blockquote>\n<p>thrift最初由facebook开发用做系统内各语言之间的RPC通信 。2007年由facebook贡献到apache基金 ，08年5月进入apache孵化器,支持多种语言之间的RPC方式的通信：php语言client可以构造一个对象，调用相应的服务方法来调用java语言的服务 ，跨越语言的C/S RPC调用\n　　</p>\n</blockquote>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809192020_382.png\" alt=\"thrift\"></p>\n<h2 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h2><h3 id=\"IDL文件\"><a href=\"#IDL文件\" class=\"headerlink\" title=\"IDL文件\"></a>IDL文件</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//HelloService.thrfit</span><br><span class=\"line\">namespace java com.jack.thrift</span><br><span class=\"line\">service HelloService&#123;</span><br><span class=\"line\">    string helloString(1:string what)</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"生成代码\"><a href=\"#生成代码\" class=\"headerlink\" title=\"生成代码\"></a>生成代码</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">运行  thrift -gen HelloService.thrfit</span><br></pre></td></tr></table></figure>\n<p>会生成一个HelloService类</p>\n<h3 id=\"实现服务端与客服端\"><a href=\"#实现服务端与客服端\" class=\"headerlink\" title=\"实现服务端与客服端\"></a>实现服务端与客服端</h3><p>让服务端打印出客户端传入的参数</p>\n<h4 id=\"服务端\"><a href=\"#服务端\" class=\"headerlink\" title=\"服务端\"></a>服务端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThriftServer &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    /**</span><br><span class=\"line\">     * 启动thrift服务器</span><br><span class=\"line\">     * @param args</span><br><span class=\"line\">     */</span><br><span class=\"line\">    public static void main(String[] args) throws Exception &#123;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            System.out.println(&quot;服务端开启....&quot;);</span><br><span class=\"line\">            TProcessor tprocessor = new HelloService.Processor&lt;HelloService.Iface&gt;(new HelloServiceImpl());</span><br><span class=\"line\">            // 简单的单线程服务模型</span><br><span class=\"line\">            TServerSocket serverTransport = new TServerSocket(9898);</span><br><span class=\"line\">            TServer.Args tArgs = new TServer.Args(serverTransport);</span><br><span class=\"line\">            tArgs.processor(tprocessor);</span><br><span class=\"line\">            tArgs.protocolFactory(new TBinaryProtocol.Factory());</span><br><span class=\"line\">            TServer server = new TSimpleServer(tArgs);</span><br><span class=\"line\">            server.serve();</span><br><span class=\"line\">        &#125;catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"客户端\"><a href=\"#客户端\" class=\"headerlink\" title=\"客户端\"></a>客户端</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ThriftClient &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        System.out.println(&quot;客户端启动....&quot;);</span><br><span class=\"line\">        TTransport transport = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            transport = new TSocket(&quot;localhost&quot;, 9898, 30000);</span><br><span class=\"line\">            // 协议要和服务端一致</span><br><span class=\"line\">            TProtocol protocol = new TBinaryProtocol(transport);</span><br><span class=\"line\">            HelloService.Client client = new HelloService.Client(protocol);</span><br><span class=\"line\">            transport.open();</span><br><span class=\"line\">            String result = client.helloString(&quot;哈哈&quot;);</span><br><span class=\"line\">            System.out.println(result);</span><br><span class=\"line\">        &#125; catch (TTransportException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; catch (TException e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125; finally &#123;</span><br><span class=\"line\">            if (null != transport) &#123;</span><br><span class=\"line\">                transport.close();</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"解析\"><a href=\"#解析\" class=\"headerlink\" title=\"解析\"></a>解析</h2><p>可以看出server,client代码相对很简单，主要看看生成的HelloService类，这个类就是stub代码</p>\n<p>来看一下，这个类是如何封装，把method和args传输到远程的</p>\n<h3 id=\"client\"><a href=\"#client\" class=\"headerlink\" title=\"client\"></a>client</h3><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">HelloService.Client client = new HelloService.Client(protocol);</span><br><span class=\"line\">String result = client.helloString(&quot;哈哈&quot;);</span><br></pre></td></tr></table></figure>\n<p>关键点在HelloService.Client.helloString()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public String helloString(String what) throws org.apache.thrift.TException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      send_helloString(what);</span><br><span class=\"line\">      return recv_helloString();</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"发送消息\"><a href=\"#发送消息\" class=\"headerlink\" title=\"发送消息\"></a>发送消息</h4><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void send_helloString(String what) throws org.apache.thrift.TException</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">      helloString_args args = new helloString_args();</span><br><span class=\"line\">      args.setWhat(what);</span><br><span class=\"line\">      sendBase(&quot;helloString&quot;, args);</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<ol>\n<li>把args抽象成了一个类</li>\n<li>属性赋值</li>\n<li>发送</li>\n</ol>\n<p>主要看下sendBase()方法<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private void sendBase(String methodName, TBase&lt;?,?&gt; args, byte type) throws TException &#123;</span><br><span class=\"line\">   oprot_.writeMessageBegin(new TMessage(methodName, type, ++seqid_));</span><br><span class=\"line\">   args.write(oprot_);</span><br><span class=\"line\">   oprot_.writeMessageEnd();</span><br><span class=\"line\">   oprot_.getTransport().flush();</span><br><span class=\"line\"> &#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>1.oprot_.writeMessageBegin  根据Protocol写数据，比如这儿使用的TBinaryProtocol，以二进制写数据<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void writeMessageBegin(TMessage message) throws TException &#123;</span><br><span class=\"line\">    if (strictWrite_) &#123;</span><br><span class=\"line\">      int version = VERSION_1 | message.type;</span><br><span class=\"line\">      writeI32(version);</span><br><span class=\"line\">      writeString(message.name);</span><br><span class=\"line\">      writeI32(message.seqid);</span><br><span class=\"line\">    &#125; else &#123;</span><br><span class=\"line\">      writeString(message.name);</span><br><span class=\"line\">      writeByte(message.type);</span><br><span class=\"line\">      writeI32(message.seqid);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>再深入看看怎么写二进制数据的</p>\n<p>int类型<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void writeI32(int i32) throws TException &#123;</span><br><span class=\"line\">    inoutTemp[0] = (byte)(0xff &amp; (i32 &gt;&gt; 24));</span><br><span class=\"line\">    inoutTemp[1] = (byte)(0xff &amp; (i32 &gt;&gt; 16));</span><br><span class=\"line\">    inoutTemp[2] = (byte)(0xff &amp; (i32 &gt;&gt; 8));</span><br><span class=\"line\">    inoutTemp[3] = (byte)(0xff &amp; (i32));</span><br><span class=\"line\">    trans_.write(inoutTemp, 0, 4);</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>string类型，先写长度，再写bytes<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void writeString(String str) throws TException &#123;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      byte[] dat = str.getBytes(&quot;UTF-8&quot;);</span><br><span class=\"line\">      writeI32(dat.length);</span><br><span class=\"line\">      trans_.write(dat, 0, dat.length);</span><br><span class=\"line\">    &#125; catch (UnsupportedEncodingException uex) &#123;</span><br><span class=\"line\">      throw new TException(&quot;JVM DOES NOT SUPPORT UTF-8&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>这儿写最终还是使用Transport.write,比如这儿使用的TSocket<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void write(byte[] buf, int off, int len) throws TTransportException &#123;</span><br><span class=\"line\">    if (outputStream_ == null) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.NOT_OPEN, &quot;Cannot write to null outputStream&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      outputStream_.write(buf, off, len);</span><br><span class=\"line\">    &#125; catch (IOException iox) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.UNKNOWN, iox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<p>就是写到<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">outputStream_ = new BufferedOutputStream(socket_.getOutputStream(), 1024);</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>2.args.write(oprot_);<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public void write(org.apache.thrift.protocol.TProtocol oprot, helloString_args struct) throws org.apache.thrift.TException &#123;</span><br><span class=\"line\">        struct.validate();</span><br><span class=\"line\"></span><br><span class=\"line\">        oprot.writeStructBegin(STRUCT_DESC);</span><br><span class=\"line\">        if (struct.what != null) &#123;</span><br><span class=\"line\">          oprot.writeFieldBegin(WHAT_FIELD_DESC);</span><br><span class=\"line\">          oprot.writeString(struct.what);</span><br><span class=\"line\">          oprot.writeFieldEnd();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        oprot.writeFieldStop();</span><br><span class=\"line\">        oprot.writeStructEnd();</span><br><span class=\"line\">      &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这就是写field,也就是向输出流里写参数内容</p>\n<ul>\n<li><p>3.oprot_.writeMessageEnd();<br>这表示消息写完成了，各个协议处理不同，比如二进制就是空实现，但如json就需要写个”}”，以完成json格式</p>\n</li>\n<li><p>4.oprot_.getTransport().flush();  直接flush</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\">   * Flushes the underlying output stream if not null.</span><br><span class=\"line\">   */</span><br><span class=\"line\">  public void flush() throws TTransportException &#123;</span><br><span class=\"line\">    if (outputStream_ == null) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.NOT_OPEN, &quot;Cannot flush null outputStream&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    try &#123;</span><br><span class=\"line\">      outputStream_.flush();</span><br><span class=\"line\">    &#125; catch (IOException iox) &#123;</span><br><span class=\"line\">      throw new TTransportException(TTransportException.UNKNOWN, iox);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h4 id=\"client总结\"><a href=\"#client总结\" class=\"headerlink\" title=\"client总结\"></a>client总结</h4><p>整个发送消息就结束了，虽然没有按套路使用动态代理，而是通过生成的stub代码，把methodName,args给封装好了</p>\n<h3 id=\"server\"><a href=\"#server\" class=\"headerlink\" title=\"server\"></a>server</h3><p>服务端也没有通过反射的方式</p>\n<p>主要逻辑在生成的HelloService$Processor类中<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class Processor&lt;I extends Iface&gt; extends org.apache.thrift.TBaseProcessor&lt;I&gt; implements org.apache.thrift.TProcessor &#123;</span><br><span class=\"line\">    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());</span><br><span class=\"line\">    public Processor(I iface) &#123;</span><br><span class=\"line\">      super(iface, getProcessMap(new java.util.HashMap&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt;()));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected Processor(I iface, java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      super(iface, getProcessMap(processMap));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static &lt;I extends Iface&gt; java.util.Map&lt;String,  org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; getProcessMap(java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends  org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      processMap.put(&quot;helloString&quot;, new helloString());</span><br><span class=\"line\">      return processMap;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static class helloString&lt;I extends Iface&gt; extends org.apache.thrift.ProcessFunction&lt;I, helloString_args&gt; &#123;</span><br><span class=\"line\">      public helloString() &#123;</span><br><span class=\"line\">        super(&quot;helloString&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_args getEmptyArgsInstance() &#123;</span><br><span class=\"line\">        return new helloString_args();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected boolean isOneway() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      protected boolean handleRuntimeExceptions() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException &#123;</span><br><span class=\"line\">        helloString_result result = new helloString_result();</span><br><span class=\"line\">        result.success = iface.helloString(args.what);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>1.先看构造函数<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected Processor(I iface, java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      super(iface, getProcessMap(processMap));</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static &lt;I extends Iface&gt; java.util.Map&lt;String,  org.apache.thrift.ProcessFunction&lt;I, ? extends org.apache.thrift.TBase&gt;&gt; getProcessMap(java.util.Map&lt;String, org.apache.thrift.ProcessFunction&lt;I, ? extends  org.apache.thrift.TBase&gt;&gt; processMap) &#123;</span><br><span class=\"line\">      processMap.put(&quot;helloString&quot;, new helloString());</span><br><span class=\"line\">      return processMap;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这段把methodName与对应的处理类映射，那后面的事就简单了，当接受到消息，取得methodName,通过map获取对就的处理类回调就可以</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static class helloString&lt;I extends Iface&gt; extends org.apache.thrift.ProcessFunction&lt;I, helloString_args&gt; &#123;</span><br><span class=\"line\">      public helloString() &#123;</span><br><span class=\"line\">        super(&quot;helloString&quot;);</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_args getEmptyArgsInstance() &#123;</span><br><span class=\"line\">        return new helloString_args();</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      protected boolean isOneway() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      @Override</span><br><span class=\"line\">      protected boolean handleRuntimeExceptions() &#123;</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">      public helloString_result getResult(I iface, helloString_args args) throws org.apache.thrift.TException &#123;</span><br><span class=\"line\">        helloString_result result = new helloString_result();</span><br><span class=\"line\">        result.success = iface.helloString(args.what);</span><br><span class=\"line\">        return result;</span><br><span class=\"line\">      &#125;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>处理类，继承ProcessFunction类，实现getResult(),这个方法就是调用了对应service.helloString()</p>\n<p>可以再深入看一下,在socket监听消息时<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">client = serverTransport_.accept();</span><br><span class=\"line\">        if (client != null) &#123;</span><br><span class=\"line\">          processor = processorFactory_.getProcessor(client);</span><br><span class=\"line\">          inputTransport = inputTransportFactory_.getTransport(client);</span><br><span class=\"line\">          outputTransport = outputTransportFactory_.getTransport(client);</span><br><span class=\"line\">          inputProtocol = inputProtocolFactory_.getProtocol(inputTransport);</span><br><span class=\"line\">          outputProtocol = outputProtocolFactory_.getProtocol(outputTransport);</span><br><span class=\"line\">          if (eventHandler_ != null) &#123;</span><br><span class=\"line\">            connectionContext = eventHandler_.createContext(inputProtocol, outputProtocol);</span><br><span class=\"line\">          &#125;</span><br><span class=\"line\">          while (true) &#123;</span><br><span class=\"line\">            if (eventHandler_ != null) &#123;</span><br><span class=\"line\">              eventHandler_.processContext(connectionContext, inputTransport, outputTransport);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            if(!processor.process(inputProtocol, outputProtocol)) &#123;</span><br><span class=\"line\">              break;</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">          &#125;</span><br></pre></td></tr></table></figure></p>\n<p>关键行：processor.process(inputProtocol, outputProtocol)</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public boolean process(TProtocol in, TProtocol out) throws TException &#123;</span><br><span class=\"line\">    TMessage msg = in.readMessageBegin();</span><br><span class=\"line\">    ProcessFunction fn = processMap.get(msg.name);</span><br><span class=\"line\">    if (fn == null) &#123;</span><br><span class=\"line\">      TProtocolUtil.skip(in, TType.STRUCT);</span><br><span class=\"line\">      in.readMessageEnd();</span><br><span class=\"line\">      TApplicationException x = new TApplicationException(TApplicationException.UNKNOWN_METHOD, &quot;Invalid method name: &apos;&quot;+msg.name+&quot;&apos;&quot;);</span><br><span class=\"line\">      out.writeMessageBegin(new TMessage(msg.name, TMessageType.EXCEPTION, msg.seqid));</span><br><span class=\"line\">      x.write(out);</span><br><span class=\"line\">      out.writeMessageEnd();</span><br><span class=\"line\">      out.getTransport().flush();</span><br><span class=\"line\">      return true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    fn.process(msg.seqid, in, out, iface);</span><br><span class=\"line\">    return true;</span><br><span class=\"line\">  &#125;</span><br></pre></td></tr></table></figure>\n<p>这就很明显了，通过methodName从map中取得ProccessFunction，再执行process方法，调用相应service的方法</p>\n<h1 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h1><p>虽然thrift没有按以往java套路出牌，但最根本的把method发送到远程执行是一致的。可能对于多语言来讲，便于所以语言一致性，的确需要通过生成的stub代码手法来实现RPC</p>\n<p>当然thrift并不简单，还有很多的内容需要深挖学习，但至少这个简单示例可以了解跨语言型的RPC，相关IDL,Stub的知识，有清晰认知，而不局限于概念</p>\n"},{"title":"游戏灰度发布","translate_title":"game-gray-release","date":"2018-01-26T15:17:16.000Z","_content":"# 背景\n快速可以说是互联网的最大特点了，唯快不破，快速响应，快速发布，快速部署，快速上线\n\n但上线，毕竟还是有风险的，怎么能又快速响应，又能降低风险范围呢\n\n前人，现人，后人们都在寻找着银弹\n\n部署方式就进化了有很多次，蓝绿部署、滚动部署、灰度发布、金丝雀发布。。。\n\n这些都是为了应对互联网的快速响应需求\n\n\n游戏的发布现在还是比较粗暴的，对开发，运维也比较简单。\n\n制定一个版本计划，开发，与运营沟通，确定版本内容，到了时间，所有游戏区全部关闭入口，停止服务器，发布，部署，重启，开放入口，一气呵成，快哉！\n\n等等，理想很丰满，现实很骨感\n\n在版本发布最后一天，开发人员在凌晨1、 2点时，还在开发，修复bug，好不容易打包，回家睡觉\n\n第二天运维在8点开始停机发布新版本；\n\nduang,怎么游戏服起不来了，开发请起床，查问题\n\n迷迷糊糊的开发在梦境中惊醒，终于搞定，打包，发版本，启动服务(有时可能要一上午查问题，通知运营方，延长维护时间)\n\nduang,玩家反馈，新功能有问题...\n\n此时，回滚？还是。。。；好汉不回头，哪来的回滚\n\n紧急停机，再寻找问题，修复，上线...\n\n...\n\n\n整个游戏的链条上，似乎大家都已经习惯，开发习惯，玩家也习惯\n\n习惯麻痹了一切，没有提出更好的策略，大家都这么玩啊，无所谓啦~\n\n# 方案\n**细思极恐，我们应该，也需要做得更好**\n\n## 灰度发布／金丝雀发布\n\n灰度发布是在原有版本可用的情况下，同时部署一个新版本应用作为“金丝雀”（金丝雀对瓦斯极敏感，矿井工人携带金丝雀，以便及时发发现危险），测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。\n\n![灰度发布](http://oirwmbp4e.bkt.clouddn.com/network/gray-deploy.png)\n\n灰度发布／金丝雀发布由以下几个步骤组成：\n\n1. 准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。\n2. 从负载均衡列表中移除掉“金丝雀”服务器。\n3. 升级“金丝雀”应用（排掉原有流量并进行部署）。\n4. 对应用进行自动化测试。\n5. 将“金丝雀”服务器重新添加到负载均衡列表中（连通性和健康检查）。\n6. 如果“金丝雀”在线使用测试成功，升级剩余的其他服务器。（否则就回滚）\n\n\n## 游戏架构\n\n![image](http://oirwmbp4e.bkt.clouddn.com/game/game-server.png)\n\n这个架构图比现实丰满不少，真实情况组件可能是单点的，数据层也就是单个mysql，一切都是那么脆弱。\n\n### 流程图\n![流程图](http://oirwmbp4e.bkt.clouddn.com/game/game-data-stream.png)\n\n玩家首先登陆游戏运营平台，鉴权完毕，选择区服，通过网关服务器获取到真实game-server信息，通过TCP，玩家与game-server建立起长连接。\n\n\n通过这个流程，就知道玩家与game-server直接牵手，强依赖的，如果gameserver重启，tcp连接是一定会断的，虽然前端可能尝试重新连接，但对玩家是有感的，不可能对玩家透明。\n\n\n### 改进\n\n怎么才能对玩家无感，切换版本呢？\n\n![image](http://oirwmbp4e.bkt.clouddn.com/game/game-server-gray.png)\n\n在之前的架构图中，稍作修改，在玩家与Gameserver之间增加一层ha-proxy，这样就有了灰度发布的基础\n\n玩家不再直接与game-server直连，而是与ha-proxy\n\n#### 透明性\n对玩家来说，发版本就是透明的，发版本时，不再需要停机，入口也不需要关闭，7*24玩耍\n\n#### 流量灵活切换\n灰度百分比，可以灵活控制，这里面又涉及到路由规则，复杂了，可以先百分百切换\n\n#### 快速迭代\n玩家无感，出现bug，可以快速修复，快速上线\n\n#### 快速回滚\n一旦新版本有问题，可以马上切回老版本，版本之间无逢切换\n\n### 难点\n加了ha-proxy，多了更多的灵活性\n\nha-proxy的难点，高可用，高可靠，高性能\n\n#### 高可用\n最重要的一点，不能单点；\n\n如果ha-proxy挂了，怎么办？就算game-server正常运行，也不能再提供服务，自己坑了自己\n\n所以ha-proxy不能单点，哪是集群，还是主从？\n\n每台物理机上都部署，还是集中几台部署？\n\n#### 高可靠\n\n在新旧版本同时在线时，流量是否平滑过渡？ 玩家操作是否保持完整性？\n\n一个玩家操作横跨新旧版本时，数据一致性如何保障？\n\n#### 高性能\n\n游戏服都是尽量压榨单台服务的能力，现在多了一层通讯，IO会不会影响性能？\n\n# 结论\n对于以上方案，不论是哪一种实现方式，仁者见仁，条条大路通罗马。\n\n也可能你觉得这种想法本身就是个多余。\n\n能卖1块钱的豆腐，为什么要卖5毛？\n","source":"_posts/游戏灰度发布.md","raw":"---\ntitle: 游戏灰度发布\ntranslate_title: game-gray-release\ndate: 2018-01-26 23:17:16\ntags:\n---\n# 背景\n快速可以说是互联网的最大特点了，唯快不破，快速响应，快速发布，快速部署，快速上线\n\n但上线，毕竟还是有风险的，怎么能又快速响应，又能降低风险范围呢\n\n前人，现人，后人们都在寻找着银弹\n\n部署方式就进化了有很多次，蓝绿部署、滚动部署、灰度发布、金丝雀发布。。。\n\n这些都是为了应对互联网的快速响应需求\n\n\n游戏的发布现在还是比较粗暴的，对开发，运维也比较简单。\n\n制定一个版本计划，开发，与运营沟通，确定版本内容，到了时间，所有游戏区全部关闭入口，停止服务器，发布，部署，重启，开放入口，一气呵成，快哉！\n\n等等，理想很丰满，现实很骨感\n\n在版本发布最后一天，开发人员在凌晨1、 2点时，还在开发，修复bug，好不容易打包，回家睡觉\n\n第二天运维在8点开始停机发布新版本；\n\nduang,怎么游戏服起不来了，开发请起床，查问题\n\n迷迷糊糊的开发在梦境中惊醒，终于搞定，打包，发版本，启动服务(有时可能要一上午查问题，通知运营方，延长维护时间)\n\nduang,玩家反馈，新功能有问题...\n\n此时，回滚？还是。。。；好汉不回头，哪来的回滚\n\n紧急停机，再寻找问题，修复，上线...\n\n...\n\n\n整个游戏的链条上，似乎大家都已经习惯，开发习惯，玩家也习惯\n\n习惯麻痹了一切，没有提出更好的策略，大家都这么玩啊，无所谓啦~\n\n# 方案\n**细思极恐，我们应该，也需要做得更好**\n\n## 灰度发布／金丝雀发布\n\n灰度发布是在原有版本可用的情况下，同时部署一个新版本应用作为“金丝雀”（金丝雀对瓦斯极敏感，矿井工人携带金丝雀，以便及时发发现危险），测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。\n\n![灰度发布](http://oirwmbp4e.bkt.clouddn.com/network/gray-deploy.png)\n\n灰度发布／金丝雀发布由以下几个步骤组成：\n\n1. 准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。\n2. 从负载均衡列表中移除掉“金丝雀”服务器。\n3. 升级“金丝雀”应用（排掉原有流量并进行部署）。\n4. 对应用进行自动化测试。\n5. 将“金丝雀”服务器重新添加到负载均衡列表中（连通性和健康检查）。\n6. 如果“金丝雀”在线使用测试成功，升级剩余的其他服务器。（否则就回滚）\n\n\n## 游戏架构\n\n![image](http://oirwmbp4e.bkt.clouddn.com/game/game-server.png)\n\n这个架构图比现实丰满不少，真实情况组件可能是单点的，数据层也就是单个mysql，一切都是那么脆弱。\n\n### 流程图\n![流程图](http://oirwmbp4e.bkt.clouddn.com/game/game-data-stream.png)\n\n玩家首先登陆游戏运营平台，鉴权完毕，选择区服，通过网关服务器获取到真实game-server信息，通过TCP，玩家与game-server建立起长连接。\n\n\n通过这个流程，就知道玩家与game-server直接牵手，强依赖的，如果gameserver重启，tcp连接是一定会断的，虽然前端可能尝试重新连接，但对玩家是有感的，不可能对玩家透明。\n\n\n### 改进\n\n怎么才能对玩家无感，切换版本呢？\n\n![image](http://oirwmbp4e.bkt.clouddn.com/game/game-server-gray.png)\n\n在之前的架构图中，稍作修改，在玩家与Gameserver之间增加一层ha-proxy，这样就有了灰度发布的基础\n\n玩家不再直接与game-server直连，而是与ha-proxy\n\n#### 透明性\n对玩家来说，发版本就是透明的，发版本时，不再需要停机，入口也不需要关闭，7*24玩耍\n\n#### 流量灵活切换\n灰度百分比，可以灵活控制，这里面又涉及到路由规则，复杂了，可以先百分百切换\n\n#### 快速迭代\n玩家无感，出现bug，可以快速修复，快速上线\n\n#### 快速回滚\n一旦新版本有问题，可以马上切回老版本，版本之间无逢切换\n\n### 难点\n加了ha-proxy，多了更多的灵活性\n\nha-proxy的难点，高可用，高可靠，高性能\n\n#### 高可用\n最重要的一点，不能单点；\n\n如果ha-proxy挂了，怎么办？就算game-server正常运行，也不能再提供服务，自己坑了自己\n\n所以ha-proxy不能单点，哪是集群，还是主从？\n\n每台物理机上都部署，还是集中几台部署？\n\n#### 高可靠\n\n在新旧版本同时在线时，流量是否平滑过渡？ 玩家操作是否保持完整性？\n\n一个玩家操作横跨新旧版本时，数据一致性如何保障？\n\n#### 高性能\n\n游戏服都是尽量压榨单台服务的能力，现在多了一层通讯，IO会不会影响性能？\n\n# 结论\n对于以上方案，不论是哪一种实现方式，仁者见仁，条条大路通罗马。\n\n也可能你觉得这种想法本身就是个多余。\n\n能卖1块钱的豆腐，为什么要卖5毛？\n","slug":"游戏灰度发布","published":1,"updated":"2018-09-22T06:42:25.468Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn35m50i0002kkjokps9bb8x","content":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>快速可以说是互联网的最大特点了，唯快不破，快速响应，快速发布，快速部署，快速上线</p>\n<p>但上线，毕竟还是有风险的，怎么能又快速响应，又能降低风险范围呢</p>\n<p>前人，现人，后人们都在寻找着银弹</p>\n<p>部署方式就进化了有很多次，蓝绿部署、滚动部署、灰度发布、金丝雀发布。。。</p>\n<p>这些都是为了应对互联网的快速响应需求</p>\n<p>游戏的发布现在还是比较粗暴的，对开发，运维也比较简单。</p>\n<p>制定一个版本计划，开发，与运营沟通，确定版本内容，到了时间，所有游戏区全部关闭入口，停止服务器，发布，部署，重启，开放入口，一气呵成，快哉！</p>\n<p>等等，理想很丰满，现实很骨感</p>\n<p>在版本发布最后一天，开发人员在凌晨1、 2点时，还在开发，修复bug，好不容易打包，回家睡觉</p>\n<p>第二天运维在8点开始停机发布新版本；</p>\n<p>duang,怎么游戏服起不来了，开发请起床，查问题</p>\n<p>迷迷糊糊的开发在梦境中惊醒，终于搞定，打包，发版本，启动服务(有时可能要一上午查问题，通知运营方，延长维护时间)</p>\n<p>duang,玩家反馈，新功能有问题…</p>\n<p>此时，回滚？还是。。。；好汉不回头，哪来的回滚</p>\n<p>紧急停机，再寻找问题，修复，上线…</p>\n<p>…</p>\n<p>整个游戏的链条上，似乎大家都已经习惯，开发习惯，玩家也习惯</p>\n<p>习惯麻痹了一切，没有提出更好的策略，大家都这么玩啊，无所谓啦~</p>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><p><strong>细思极恐，我们应该，也需要做得更好</strong></p>\n<h2 id=\"灰度发布／金丝雀发布\"><a href=\"#灰度发布／金丝雀发布\" class=\"headerlink\" title=\"灰度发布／金丝雀发布\"></a>灰度发布／金丝雀发布</h2><p>灰度发布是在原有版本可用的情况下，同时部署一个新版本应用作为“金丝雀”（金丝雀对瓦斯极敏感，矿井工人携带金丝雀，以便及时发发现危险），测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。</p>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/network/gray-deploy.png\" alt=\"灰度发布\"></p>\n<p>灰度发布／金丝雀发布由以下几个步骤组成：</p>\n<ol>\n<li>准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。</li>\n<li>从负载均衡列表中移除掉“金丝雀”服务器。</li>\n<li>升级“金丝雀”应用（排掉原有流量并进行部署）。</li>\n<li>对应用进行自动化测试。</li>\n<li>将“金丝雀”服务器重新添加到负载均衡列表中（连通性和健康检查）。</li>\n<li>如果“金丝雀”在线使用测试成功，升级剩余的其他服务器。（否则就回滚）</li>\n</ol>\n<h2 id=\"游戏架构\"><a href=\"#游戏架构\" class=\"headerlink\" title=\"游戏架构\"></a>游戏架构</h2><p><img src=\"http://oirwmbp4e.bkt.clouddn.com/game/game-server.png\" alt=\"image\"></p>\n<p>这个架构图比现实丰满不少，真实情况组件可能是单点的，数据层也就是单个mysql，一切都是那么脆弱。</p>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"http://oirwmbp4e.bkt.clouddn.com/game/game-data-stream.png\" alt=\"流程图\"></p>\n<p>玩家首先登陆游戏运营平台，鉴权完毕，选择区服，通过网关服务器获取到真实game-server信息，通过TCP，玩家与game-server建立起长连接。</p>\n<p>通过这个流程，就知道玩家与game-server直接牵手，强依赖的，如果gameserver重启，tcp连接是一定会断的，虽然前端可能尝试重新连接，但对玩家是有感的，不可能对玩家透明。</p>\n<h3 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h3><p>怎么才能对玩家无感，切换版本呢？</p>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/game/game-server-gray.png\" alt=\"image\"></p>\n<p>在之前的架构图中，稍作修改，在玩家与Gameserver之间增加一层ha-proxy，这样就有了灰度发布的基础</p>\n<p>玩家不再直接与game-server直连，而是与ha-proxy</p>\n<h4 id=\"透明性\"><a href=\"#透明性\" class=\"headerlink\" title=\"透明性\"></a>透明性</h4><p>对玩家来说，发版本就是透明的，发版本时，不再需要停机，入口也不需要关闭，7*24玩耍</p>\n<h4 id=\"流量灵活切换\"><a href=\"#流量灵活切换\" class=\"headerlink\" title=\"流量灵活切换\"></a>流量灵活切换</h4><p>灰度百分比，可以灵活控制，这里面又涉及到路由规则，复杂了，可以先百分百切换</p>\n<h4 id=\"快速迭代\"><a href=\"#快速迭代\" class=\"headerlink\" title=\"快速迭代\"></a>快速迭代</h4><p>玩家无感，出现bug，可以快速修复，快速上线</p>\n<h4 id=\"快速回滚\"><a href=\"#快速回滚\" class=\"headerlink\" title=\"快速回滚\"></a>快速回滚</h4><p>一旦新版本有问题，可以马上切回老版本，版本之间无逢切换</p>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p>加了ha-proxy，多了更多的灵活性</p>\n<p>ha-proxy的难点，高可用，高可靠，高性能</p>\n<h4 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h4><p>最重要的一点，不能单点；</p>\n<p>如果ha-proxy挂了，怎么办？就算game-server正常运行，也不能再提供服务，自己坑了自己</p>\n<p>所以ha-proxy不能单点，哪是集群，还是主从？</p>\n<p>每台物理机上都部署，还是集中几台部署？</p>\n<h4 id=\"高可靠\"><a href=\"#高可靠\" class=\"headerlink\" title=\"高可靠\"></a>高可靠</h4><p>在新旧版本同时在线时，流量是否平滑过渡？ 玩家操作是否保持完整性？</p>\n<p>一个玩家操作横跨新旧版本时，数据一致性如何保障？</p>\n<h4 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h4><p>游戏服都是尽量压榨单台服务的能力，现在多了一层通讯，IO会不会影响性能？</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>对于以上方案，不论是哪一种实现方式，仁者见仁，条条大路通罗马。</p>\n<p>也可能你觉得这种想法本身就是个多余。</p>\n<p>能卖1块钱的豆腐，为什么要卖5毛？</p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"背景\"><a href=\"#背景\" class=\"headerlink\" title=\"背景\"></a>背景</h1><p>快速可以说是互联网的最大特点了，唯快不破，快速响应，快速发布，快速部署，快速上线</p>\n<p>但上线，毕竟还是有风险的，怎么能又快速响应，又能降低风险范围呢</p>\n<p>前人，现人，后人们都在寻找着银弹</p>\n<p>部署方式就进化了有很多次，蓝绿部署、滚动部署、灰度发布、金丝雀发布。。。</p>\n<p>这些都是为了应对互联网的快速响应需求</p>\n<p>游戏的发布现在还是比较粗暴的，对开发，运维也比较简单。</p>\n<p>制定一个版本计划，开发，与运营沟通，确定版本内容，到了时间，所有游戏区全部关闭入口，停止服务器，发布，部署，重启，开放入口，一气呵成，快哉！</p>\n<p>等等，理想很丰满，现实很骨感</p>\n<p>在版本发布最后一天，开发人员在凌晨1、 2点时，还在开发，修复bug，好不容易打包，回家睡觉</p>\n<p>第二天运维在8点开始停机发布新版本；</p>\n<p>duang,怎么游戏服起不来了，开发请起床，查问题</p>\n<p>迷迷糊糊的开发在梦境中惊醒，终于搞定，打包，发版本，启动服务(有时可能要一上午查问题，通知运营方，延长维护时间)</p>\n<p>duang,玩家反馈，新功能有问题…</p>\n<p>此时，回滚？还是。。。；好汉不回头，哪来的回滚</p>\n<p>紧急停机，再寻找问题，修复，上线…</p>\n<p>…</p>\n<p>整个游戏的链条上，似乎大家都已经习惯，开发习惯，玩家也习惯</p>\n<p>习惯麻痹了一切，没有提出更好的策略，大家都这么玩啊，无所谓啦~</p>\n<h1 id=\"方案\"><a href=\"#方案\" class=\"headerlink\" title=\"方案\"></a>方案</h1><p><strong>细思极恐，我们应该，也需要做得更好</strong></p>\n<h2 id=\"灰度发布／金丝雀发布\"><a href=\"#灰度发布／金丝雀发布\" class=\"headerlink\" title=\"灰度发布／金丝雀发布\"></a>灰度发布／金丝雀发布</h2><p>灰度发布是在原有版本可用的情况下，同时部署一个新版本应用作为“金丝雀”（金丝雀对瓦斯极敏感，矿井工人携带金丝雀，以便及时发发现危险），测试新版本的性能和表现，以保障整体系统稳定的情况下，尽早发现、调整问题。</p>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/network/gray-deploy.png\" alt=\"灰度发布\"></p>\n<p>灰度发布／金丝雀发布由以下几个步骤组成：</p>\n<ol>\n<li>准备好部署各个阶段的工件，包括：构建工件，测试脚本，配置文件和部署清单文件。</li>\n<li>从负载均衡列表中移除掉“金丝雀”服务器。</li>\n<li>升级“金丝雀”应用（排掉原有流量并进行部署）。</li>\n<li>对应用进行自动化测试。</li>\n<li>将“金丝雀”服务器重新添加到负载均衡列表中（连通性和健康检查）。</li>\n<li>如果“金丝雀”在线使用测试成功，升级剩余的其他服务器。（否则就回滚）</li>\n</ol>\n<h2 id=\"游戏架构\"><a href=\"#游戏架构\" class=\"headerlink\" title=\"游戏架构\"></a>游戏架构</h2><p><img src=\"http://oirwmbp4e.bkt.clouddn.com/game/game-server.png\" alt=\"image\"></p>\n<p>这个架构图比现实丰满不少，真实情况组件可能是单点的，数据层也就是单个mysql，一切都是那么脆弱。</p>\n<h3 id=\"流程图\"><a href=\"#流程图\" class=\"headerlink\" title=\"流程图\"></a>流程图</h3><p><img src=\"http://oirwmbp4e.bkt.clouddn.com/game/game-data-stream.png\" alt=\"流程图\"></p>\n<p>玩家首先登陆游戏运营平台，鉴权完毕，选择区服，通过网关服务器获取到真实game-server信息，通过TCP，玩家与game-server建立起长连接。</p>\n<p>通过这个流程，就知道玩家与game-server直接牵手，强依赖的，如果gameserver重启，tcp连接是一定会断的，虽然前端可能尝试重新连接，但对玩家是有感的，不可能对玩家透明。</p>\n<h3 id=\"改进\"><a href=\"#改进\" class=\"headerlink\" title=\"改进\"></a>改进</h3><p>怎么才能对玩家无感，切换版本呢？</p>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/game/game-server-gray.png\" alt=\"image\"></p>\n<p>在之前的架构图中，稍作修改，在玩家与Gameserver之间增加一层ha-proxy，这样就有了灰度发布的基础</p>\n<p>玩家不再直接与game-server直连，而是与ha-proxy</p>\n<h4 id=\"透明性\"><a href=\"#透明性\" class=\"headerlink\" title=\"透明性\"></a>透明性</h4><p>对玩家来说，发版本就是透明的，发版本时，不再需要停机，入口也不需要关闭，7*24玩耍</p>\n<h4 id=\"流量灵活切换\"><a href=\"#流量灵活切换\" class=\"headerlink\" title=\"流量灵活切换\"></a>流量灵活切换</h4><p>灰度百分比，可以灵活控制，这里面又涉及到路由规则，复杂了，可以先百分百切换</p>\n<h4 id=\"快速迭代\"><a href=\"#快速迭代\" class=\"headerlink\" title=\"快速迭代\"></a>快速迭代</h4><p>玩家无感，出现bug，可以快速修复，快速上线</p>\n<h4 id=\"快速回滚\"><a href=\"#快速回滚\" class=\"headerlink\" title=\"快速回滚\"></a>快速回滚</h4><p>一旦新版本有问题，可以马上切回老版本，版本之间无逢切换</p>\n<h3 id=\"难点\"><a href=\"#难点\" class=\"headerlink\" title=\"难点\"></a>难点</h3><p>加了ha-proxy，多了更多的灵活性</p>\n<p>ha-proxy的难点，高可用，高可靠，高性能</p>\n<h4 id=\"高可用\"><a href=\"#高可用\" class=\"headerlink\" title=\"高可用\"></a>高可用</h4><p>最重要的一点，不能单点；</p>\n<p>如果ha-proxy挂了，怎么办？就算game-server正常运行，也不能再提供服务，自己坑了自己</p>\n<p>所以ha-proxy不能单点，哪是集群，还是主从？</p>\n<p>每台物理机上都部署，还是集中几台部署？</p>\n<h4 id=\"高可靠\"><a href=\"#高可靠\" class=\"headerlink\" title=\"高可靠\"></a>高可靠</h4><p>在新旧版本同时在线时，流量是否平滑过渡？ 玩家操作是否保持完整性？</p>\n<p>一个玩家操作横跨新旧版本时，数据一致性如何保障？</p>\n<h4 id=\"高性能\"><a href=\"#高性能\" class=\"headerlink\" title=\"高性能\"></a>高性能</h4><p>游戏服都是尽量压榨单台服务的能力，现在多了一层通讯，IO会不会影响性能？</p>\n<h1 id=\"结论\"><a href=\"#结论\" class=\"headerlink\" title=\"结论\"></a>结论</h1><p>对于以上方案，不论是哪一种实现方式，仁者见仁，条条大路通罗马。</p>\n<p>也可能你觉得这种想法本身就是个多余。</p>\n<p>能卖1块钱的豆腐，为什么要卖5毛？</p>\n"},{"title":"类加载器","author":"朱兴生","translate_title":"classloader","date":"2018-10-10T12:57:00.000Z","_content":"# java执行过程\n先回顾一下要执行java程序，需要经过哪些步骤\n\n![执行java程序](http://oirwmbp4e.bkt.clouddn.com/jit/compile.png)\n\n1. 编写java代码\n2. 通过javac把源代码编译成class\n3. 把class载入JVM\n\n1、2两步是需要开发人员参与的，而第3步是JVM的行为，对开发人员透明\n\n## JVM类加载\n详细看下第三点，class载入JVM过程\n\n从内存空间视角,会分配到各个空间：\n\n![内存结构](http://p7c3y4vhx.bkt.clouddn.com/201809261932_365.png)\n\n每个内存空间详情可参考：《GC及JVM参数》\n\n从类生命周期角度，分阶段：\n\n![类生命周期](http://p7c3y4vhx.bkt.clouddn.com/201809261921_783.png)\n\n其中类加载的过程包括了**加载**、**验证**、**准备**、**解析**、**初始化**五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。\n\n### 1.加载\n\n类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口\n\n在加载阶段，虚拟机需要完成以下3件事情：\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口\n\n**加载.class文件的方式**\n- 从本地系统中直接加载\n- 通过网络下载.class文件\n- 从zip，jar等归档文件中加载.class文件\n- 从专有数据库中提取.class文件\n- 将Java源文件动态编译为.class文件\n\n*相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载*\n\n加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，\n而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据\n\n#### 加载时机\n- 当应用程序启动的时候，所有的类不会被一次性加载，因为如果一次性加载，内存资源有限，可能会影响应用程序的正常运行。例如，A a=new A()，\n一个类真正被加载的时机是在创建对象的时候，才会去执行以上过程，加载类。当我们测试的时候，最先加载拥有main方法的主线程所在类\n\n- Java虚拟机有预加载功能。类加载器并不需要等到某个类被\"首次主动使用\"时再加载它,JVM规范规定JVM可以预测加载某一个类，如果这个类出错，但是应用程序没有调用这个类， JVM也不会报错；如果调用这个类的话，JVM才会报错，（LinkAgeError错误)\n\n\n#### 加载方式\n\n##### 隐式加载\n1. 创建类对象\n2. 使用类的静态域\n3. 创建子类对象\n4. 使用子类的静态域\n5. 在JVM启动时，BootStrapLoader会加载一些JVM自身运行所需的class\n6. 在JVM启动时，ExtClassLoader会加载指定目录下一些特殊的class\n7. 在JVM启动时，AppClassLoader会加载classpath路径下的class，以及main函数所在的类的class文件\n\n##### 显式加载\n1. ClassLoader.loadClass(className)，不会进行初始化\n2. Class.forName(String name, boolean initialize,ClassLoader loader);  借助当前调用者的class的ClassLoader完成class的加载,加载class的同时根据initialize是否初始化\n\n\n### 2.连接\n\n#### 2.1.验证：确保被加载的类的正确性\n\n验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：\n\n**文件格式验证**：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。\n\n**元数据验证**：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。\n\n**字节码验证**：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n\n**符号引用验证**：确保解析动作能正确执行。\n\n验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用**-Xverify:none**参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间\n\n#### 2.2. 准备：为类的静态变量分配内存，并将其初始化为默认值\n\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：\n- 2.2.1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。\n- 2.2.2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n假设一个类变量的定义为：public static int value = 3；\n   那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行\n- 2.2.3、如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。\n\n   假设上面的类变量value被定义为： public static final int value = 3；\n\n   编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3\n   \n#### 2.3. 解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄\n\n##### 常量池\n1. 字面量：比较接近Java语言层面，如String字符串,声明final的常量等\n2. 符号引用：属于编译原理方面的概念:1、包括类和接口的全限定名 2、字段的名称和描述符3.方法的名称和描述符\n\n######  常量项结构\n![常量项结构](http://p7c3y4vhx.bkt.clouddn.com/201809281128_30.png)\n\n这些内容，需要再去分析class文件详细结构，后续再学习了\n\n### 3.初始化，为类的静态变量赋予正确的初始值\n类加载的最后一个阶段，除了加载阶段我们可以通过自定义类加载器参与之外，其余完全又JVM主导。到了初始化阶段，才真正开始执行程序，也就是由java转换成的class\n\nJVM负责对类进行初始化，主要对类变量进行初始化。\n\n在Java中对类变量进行初始值设定有两种方式：\n\n1. 声明类变量是指定初始值\n\n2. 使用静态代码块为类变量指定初始值\n\n#### JVM初始化规则\n\n类初始化时机：只有当对类的主动使用的时候才会导致类的初始化\n\nJava程序对类的使用方式可以分为两种： \n1. 主动使用：会执行加载、连接、初始化静态域\n2. 被动使用：只执行加载、连接，不执行类的初始化静态域\n\n##### 类的主动使用包括以下六种：\n\n- 创建类的实例，如（1）new （2）反射newInstance （3）序列化生成obj;遇到new、getstatic、putstatic、invokestatic这四条字节码指令\n- 访问某个类或接口的静态变量，或者对该静态变量赋值 （注意static 与static final的区别）\n- 调用类的静态方法\n- 反射（如Class.forName(“Test”)）\n- 初始化某个类的子类，则其父类也会被初始化；接口初始化不会导致父接口的初始化(这其实也是static final的原因)；对于静态字段，\n    - 只有直接定义这个字段的类才会被初始化，因此，通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化\n- Java虚拟机启动时被标明为启动类的类（Java Test），直接使用java.exe命令来运行某个主类\n\n##### 被动使用，不在主动使用的六种以内都是被动的\n- 1.如通过子类引用父类的静态字段，为子类的被动使用，不会导致子类初始化\n- 2.通过数组定义类引用类，为类的被动使用，不会触发此类的初始化\n    - 2.1 原因：其实数组已经不是E类型了，E的数组jvm在运行期，会动态生成一个新的类型，新类型为：\n                如果是一维数组，则为：[L+元素的类全名；二维数组，则为[[L+元素的类全名\n                如果是基础类型（int/float等），则为[I（int类型）、[F（float类型）等\n- 3.常量在编译阶段会存入调用方法所在的类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化\n\n\n```\n/**\n * 主动 被动使用问题测试\n * Created by Jack on 2018/9/28.\n */\npublic class ClassInitTest3 {\n    public static void main(String[] args) {\n        String x = F.s;\n    }\n}\n\nclass F {\n    //因为UUID.randomUUID().toString()这个方法，是运行期确认的，所以，这不是被动使用\n    static final String s = UUID.randomUUID().toString();\n\n    static {\n        //这儿会被输出\n        System.out.println(\"Initialize class F\");\n    }\n}\n```\n\n#### clinit 与 init\n在编译生成class文件时，编译器会产生两个方法加于class文件中，一个是类的初始化方法clinit, 另一个是实例的初始化方法init\n\n##### clinit：\nclinit指的是类构造器，这个构造器是jvm自动合并生成的，在jvm**第一次加载**class文件时调用，包括静态变量初始化语句和静态块的执行\n\n它合并static变量的赋值操作\n1. 注意是赋值操作，**(仅声明，或者final static)**不会触发<clinit>，毕竟前面准备阶段已经默认赋过值为0了\n2. static{}语句块生成，且虚拟机保证<clinit>执行前，父类的<clinit>已经执行完毕，所以说父类如果定义static块的话，一定比子类先执行\n3. 如果一个类或接口中没有static变量的赋值操作和static{}语句块，那么<clinit>不会被JVM生成\n4. static变量的赋值操作和static{}语句块合并的顺序是由语句在源文件中出现的顺序所决定的。\n\n\n##### init:\n在实例创建出来的时候调用，也就是构造函数，包括:\n1. new操作符\n2. 普通代码块\n3. 调用Class或java.lang.reflect.Constructor对象的newInstance()方法；\n4. 调用任何现有对象的clone()方法；\n5. 通过java.io.ObjectInputStream类的getObject()方法反序列化。\n\n```\n/**\n * <clinit> 与 <init> 区别\n */\npublic class ClassInitTest2 {\n    static {\n        System.out.println(\"cinit\");\n\n        i = 3;//可以赋值\n        //System.out.println(i);//但不能使用，语法错误\n    }\n\n    private static int i = 1;\n\n    {\n        System.out.println(\"init\");//实例化构造器，\n    }\n\n    public static void main(String [] args)\t{\n        new ClassInitTest2();\n        new ClassInitTest2();\n        String str = \"str\";\n        System.out.println(str);\n    }\n}\n\n// 输出\ncinit\ninit\ninit\nstr\n```\n\nstatic 与 static final 对初始化的区别\n```\n/**\n * static 与 static final 对初始化的区别\n */\npublic class ClassInitFinalTest {\n    public static  int age = 20;\n\n    static {\n        //如果age定义为static final，这儿就不会执行\n        System.out.println(\"静态初始化！\");\n    }\n\n    public static void main(String args[]){\n        System.out.println(ClassInitFinalTest.age);\n    }\n}\n\n```\n\n#### 不会执行类初始化的几种情况\n\n- 通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。\n- 定义对象数组，不会触发该类的初始化\n- 类A引用类B的static final常量不会导致类B初始化 (看上面的ClassInitFinalTest)\n- 通过类名获取Class对象，不会触发类的初始化。如\n- System.out.println(Person.class);\n- 通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。\n- 通过ClassLoader默认的loadClass方法，也不会触发初始化动作\n\n\n### 结束生命周期\n\n在如下几种情况下，Java虚拟机将结束生命周期\n\n- 执行了System.exit()方法\n- 程序正常执行结束\n- 程序在执行过程中遇到了异常或错误而异常终止\n- 由于操作系统出现错误而导致Java虚拟机进程终止\n\n## 类加载测试\n看到一段代码，很有意思\n```\n/**\n * 测试类加载及初始化顺序问题\n * Created by jack01.zhu on 2018/9/28.\n */\npublic class ClassInit {\n        private static ClassInit singleton = new ClassInit();\n        public static int counter1;\n        public static int counter2 = 0;\n        private ClassInit() {\n            counter1++;\n            counter2++;\n        }\n        public static ClassInit getSingleton() {\n            return singleton;\n        }\n}\n\n/**\n * 通过输出结果，推测类加载过程\n * Created by jack01.zhu on 2018/9/28.\n */\npublic class ClassInitTestMain {\n\n    public static void main(String []args) {\n        ClassInit classInitTest = ClassInit.getSingleton();\n        System.out.println(\"counter1=\"+classInitTest.counter1);\n        System.out.println(\"counter2=\"+classInitTest.counter2);\n    }\n}\n```\n这段代码输出的结果是什么？\n```\ncounter1=1\ncounter2=0\n```\n\n1. 入口肯定是ClassInitTestMain.main()，从这儿开始加载，初始化\n2. ClassInit.getSingleton()，首次使用化，所以从加载部分开始执行，执行到**准备阶段**所有static变量都被设置为初始值。此时\n```\npublic static int counter1 = 0;\npublic static int counter2 = 0;\nprivate static ClassInit singleton = null;\n```\n3. ClassInit执行到初始化阶段，生成类构造器<clinit>，类构造器会合并 static变量的赋值操作和 static语句块。合并后执行\n```\npublic static int counter1 ; // 由于 counter1没被赋值，所以不会被合并进去\n\npublic void clinit() {// 伪代码：<clinit>方法体内容\n  ClassInit singleton = new ClassInit();//（1）\n  int counter2 = 0;// （2）\n}\n```\n4. 初始化阶段 执行clinit内代码，执行到（1）处，此时counter1和counter2都变为1。\n5. 初始化阶段 执行clinit内代码，执行到（2）处，counter2又被设置为0。\n6. 初始化结束 ，回到Main方法的ClassInit.getSingleton();继续执行main方法，最后输出结束。\n\n---\n以上，就是一个类的生命周期，这篇重点就是加载部分，如上面所说，加载阶段相对别的阶段，对开发人员而言有更强的可控性;下面学习一下类加载器相关知识\n\n\n# 类加载器\n![类加载器](http://p7c3y4vhx.bkt.clouddn.com/201809281552_12.png)\n\n> 1. BootstrapClassLoader:加载路径: System.getProperty(\"java.class.path\") 或直接通过 -Xbootclasspath 指定\n>     \n>   特性: 用C语言写的\n>      \n>   手动获取加载路径: sun.misc.Launcher.getBootstrapClassPath().getURLs()\n>\n> 2. ExtClassLoader:加载路径: System.getProperty(\"java.ext.dirs\") 或直接通过 -Djava.ext.dirs 指定\n>     \n>   特性: 继承 URLClassLoader\n>\n>   手动获取加载路径:((URLClassLoader)App.class.getClassLoader().getParent()).getURLs()\n>\n> 3. AppClassLoader:加载路径: System.getProperty(\"sun.boot.class.path\") 或直接通过 -cp, -classpath 指定\n>     \n>   特性: 继承 URLClassLoader\n>\n>   手动获取加载路径: ((URLClassLoader)App.class.getClassLoader()).getURLs()\n>   通过 ClassLoader.getSystemClassLoader() 就可以获取 AppClassLoader, 自己写的程序中写的 ClassLoader(继承 URLClassLoader), 若不指定 parent, 默认的parent就是 AppClassLoader\n\n## 同一个class\n在JVM中，如何确定一个类型实例:\n\n同一个Class = 相同的 ClassName + PackageName + ClassLoader\n\n在JVM中，类型被定义在一个叫SystemDictionary 的数据结构中，该数据结构接受类加载器和全类名作为参数，返回类型实例。\n\nSystemDictionary 如图所示：\n\n![SystemDictionary](http://p7c3y4vhx.bkt.clouddn.com/201809251755_835.png)\n\n## 加载机制\n\n1. **全盘负责**，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入\n2. **双亲委托**，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类\n3. **缓存机制**，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效\n\n### 双亲委托模型\n双亲委托的工作过程：如果一个类加载器收到了一个类加载请求，它首先不会自己去加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成加载请求(它管理的范围之中没有这个类)时，子加载器才会尝试着自己去加载\n\n![](http://p7c3y4vhx.bkt.clouddn.com/201809260947_799.png)\n\n1. 当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。\n\n2. 当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。\n\n3. 如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；\n\n4. 若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。\n\n```\njavac –verbose查看运行类是加载了jar文件 \n```\n\n```\nprotected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException{\n\n\t// 首先检查，jvm中是否已经加载了对应名称的类，findLoadedClass(String )方法实际上是findLoadedClass0方法的wrapped方法，做了检查类名的工\n       //作，而findLoadedClass0则是一个native方法，通过底层来查看jvm中的对象。\n\tClass c = findLoadedClass(name);\n\tif (c == null) {//类还未加载\n\t    try {\n\t\tif (parent != null) {\n            //在类还未加载的情况下，我们首先应该将加载工作交由父classloader来处理。\n\t\t    c = parent.loadClass(name, false);\n\t\t} else {\n                    //返回一个由bootstrap class loader加载的类，如果不存在就返回null\n\t\t    c = findBootstrapClassOrNull(name);\n\t\t}\n\t    } catch (ClassNotFoundException e) {\n                // ClassNotFoundException thrown if class not found\n\n                // from the non-null parent class loader\n            }\n\n            if (c == null) {\n\t        // If still not found, then invoke findClass in order\n\t        // to find the class.\n\t        c = findClass(name);//这里是我们的入手点，也就是指定我们自己的类加载实现\n\t    }\n\t}\n\tif (resolve) {\n\t    resolveClass(c);//用来做类链接操作\n\t}\n\treturn c;\n    }\n```\n从上面的方法也看出我们在实现自己的加载器的时候，不要覆盖locaClass方法，而是**重写findClass()**，这样能保证双亲委派模型，同时也实现了自己的方法\n\n\n### 为什么要使用双亲委托这种模型呢？\n1. 节约系统资源： 因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次\n2. 保证Java核心库的类型安全: 我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n## 自定义加载器\n既然JVM已经提供了默认的类加载器，为什么还要定义自已的类加载器呢？\n\n因为Java中提供的默认ClassLoader，只加载指定目录下的jar和class，如果我们想加载其它位置的类或jar时，比如：我要加载网络上的一个class文件，通过动态加载到内存之后，要调用这个类中的方法实现业务逻辑。在这样的情况下，默认的ClassLoader就不能满足我们的需求了，所以需要定义自己的ClassLoader\n\n### 定义自已的类加载器分为两步：\n\n1. 继承java.lang.ClassLoader\n2. 重写父类的findClass方法\n\n### 示例\n\n很简单的两个类，方法中打印出各自的类加载器\n```\npublic class LoaderClass {\n\n    public void loader(){\n        System.out.println(\"LoaderClass:\"+this.getClass().getClassLoader());\n        LoaderClass1 class1 = new LoaderClass1();\n        class1.loader();\n    }\n}\n\npublic class LoaderClass1 {\n\n    public void loader() {\n        System.out.println(this.getClass().getName() + \" loader:\"+this.getClass().getClassLoader());\n\n    }\n}\n```\n\n自定义加载器\n1. 重写findClass方法，从class文件加载\n2. 通过defineClass从bytes构建class\n\n```\npublic class MyClassLoader extends ClassLoader {\n\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n\n        String root = \"d:/\";\n\n        byte[] bytes = null;\n        try {\n            //路径改到根目录下\n            String file = root + name.substring(name.lastIndexOf(\".\")+1) + \".class\";\n            InputStream ins = new FileInputStream(file);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int bufferSize = 1024;\n            byte[] buffer = new byte[bufferSize];\n            int length = 0;\n            while ((length = ins.read(buffer)) != -1) {\n                baos.write(buffer, 0, length);\n            }\n            bytes = baos.toByteArray();\n\n            ins.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return defineClass(name, bytes, 0, bytes.length);\n    }\n}\n```\n\n测试类\n```\npublic class ClassLoaderTest {\n\n    public static void main(String[]args) throws Exception {\n        ClassLoaderTest test = new ClassLoaderTest();\n\n        System.out.println(test.getClass().getClassLoader());//输出sun.misc.Launcher$AppClassLoader\n\n        System.out.println(test.getClass().getClassLoader().getParent());//输出sun.misc.Launcher$ExtClassLoader\n\n        System.out.println(test.getClass().getClassLoader().getParent().getParent());//输出null\n\n        //=====测试重复加载，类路径中LoaderClass.class存在=================\n        //======虽然指定了classloader，但依然输出的是LoaderClass:sun.misc.Launcher$AppClassLoader\n        //==删除类路径下的LoaderClass.class,才会输出LoaderClass:com.jack.classloader.MyClassLoader\n        //并且loaderclass中创建的对象类加载器也是MyClassLoader\n        MyClassLoader classLoader = new MyClassLoader();\n        Class<?> loadClass = Class.forName(\"com.jack.classloader.LoaderClass\", true, classLoader);\n        Method startMethod = loadClass.getMethod(\"loader\");\n        startMethod.invoke(loadClass.newInstance());\n\n        //===当类加载器不一样时，两个class不相等\n        MyClassLoader classLoader1 = new MyClassLoader();\n        Class<?> loadClass1 = Class.forName(\"com.jack.classloader.LoaderClass\", true, classLoader1);\n        System.out.println(loadClass.equals(loadClass1));//输出false\n    }\n}\n```\n\n# 参考资料\n[class加载时机及两种显示加载的区别](https://blog.csdn.net/jiyiqinlovexx/article/details/51090751)\n\n[JVM类加载机制---类加载的过程](https://www.cnblogs.com/hunterCecil/p/6379197.html)\n\n[<init>和<cinit>](https://blog.csdn.net/w425006762/article/details/50452469)\n\n[类加载原理分析&动态加载Jar/Dex](https://www.jianshu.com/p/0b1dba1a1e95)\n\n[java类的主动使用/被动使用](https://blog.csdn.net/mweibiao/article/details/79516708)","source":"_posts/类加载器.md","raw":"title: 类加载器\nauthor: 朱兴生\ntags:\n  - classloader\ncategories:\n  - java\ntranslate_title: classloader\ndate: 2018-10-10 20:57:00\n---\n# java执行过程\n先回顾一下要执行java程序，需要经过哪些步骤\n\n![执行java程序](http://oirwmbp4e.bkt.clouddn.com/jit/compile.png)\n\n1. 编写java代码\n2. 通过javac把源代码编译成class\n3. 把class载入JVM\n\n1、2两步是需要开发人员参与的，而第3步是JVM的行为，对开发人员透明\n\n## JVM类加载\n详细看下第三点，class载入JVM过程\n\n从内存空间视角,会分配到各个空间：\n\n![内存结构](http://p7c3y4vhx.bkt.clouddn.com/201809261932_365.png)\n\n每个内存空间详情可参考：《GC及JVM参数》\n\n从类生命周期角度，分阶段：\n\n![类生命周期](http://p7c3y4vhx.bkt.clouddn.com/201809261921_783.png)\n\n其中类加载的过程包括了**加载**、**验证**、**准备**、**解析**、**初始化**五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。\n\n### 1.加载\n\n类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口\n\n在加载阶段，虚拟机需要完成以下3件事情：\n\n1. 通过一个类的全限定名来获取定义此类的二进制字节流\n2. 将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。\n3. 在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口\n\n**加载.class文件的方式**\n- 从本地系统中直接加载\n- 通过网络下载.class文件\n- 从zip，jar等归档文件中加载.class文件\n- 从专有数据库中提取.class文件\n- 将Java源文件动态编译为.class文件\n\n*相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载*\n\n加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，\n而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据\n\n#### 加载时机\n- 当应用程序启动的时候，所有的类不会被一次性加载，因为如果一次性加载，内存资源有限，可能会影响应用程序的正常运行。例如，A a=new A()，\n一个类真正被加载的时机是在创建对象的时候，才会去执行以上过程，加载类。当我们测试的时候，最先加载拥有main方法的主线程所在类\n\n- Java虚拟机有预加载功能。类加载器并不需要等到某个类被\"首次主动使用\"时再加载它,JVM规范规定JVM可以预测加载某一个类，如果这个类出错，但是应用程序没有调用这个类， JVM也不会报错；如果调用这个类的话，JVM才会报错，（LinkAgeError错误)\n\n\n#### 加载方式\n\n##### 隐式加载\n1. 创建类对象\n2. 使用类的静态域\n3. 创建子类对象\n4. 使用子类的静态域\n5. 在JVM启动时，BootStrapLoader会加载一些JVM自身运行所需的class\n6. 在JVM启动时，ExtClassLoader会加载指定目录下一些特殊的class\n7. 在JVM启动时，AppClassLoader会加载classpath路径下的class，以及main函数所在的类的class文件\n\n##### 显式加载\n1. ClassLoader.loadClass(className)，不会进行初始化\n2. Class.forName(String name, boolean initialize,ClassLoader loader);  借助当前调用者的class的ClassLoader完成class的加载,加载class的同时根据initialize是否初始化\n\n\n### 2.连接\n\n#### 2.1.验证：确保被加载的类的正确性\n\n验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：\n\n**文件格式验证**：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。\n\n**元数据验证**：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。\n\n**字节码验证**：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。\n\n**符号引用验证**：确保解析动作能正确执行。\n\n验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用**-Xverify:none**参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间\n\n#### 2.2. 准备：为类的静态变量分配内存，并将其初始化为默认值\n\n准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：\n- 2.2.1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。\n- 2.2.2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。\n假设一个类变量的定义为：public static int value = 3；\n   那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行\n- 2.2.3、如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。\n\n   假设上面的类变量value被定义为： public static final int value = 3；\n\n   编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3\n   \n#### 2.3. 解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\n\n解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄\n\n##### 常量池\n1. 字面量：比较接近Java语言层面，如String字符串,声明final的常量等\n2. 符号引用：属于编译原理方面的概念:1、包括类和接口的全限定名 2、字段的名称和描述符3.方法的名称和描述符\n\n######  常量项结构\n![常量项结构](http://p7c3y4vhx.bkt.clouddn.com/201809281128_30.png)\n\n这些内容，需要再去分析class文件详细结构，后续再学习了\n\n### 3.初始化，为类的静态变量赋予正确的初始值\n类加载的最后一个阶段，除了加载阶段我们可以通过自定义类加载器参与之外，其余完全又JVM主导。到了初始化阶段，才真正开始执行程序，也就是由java转换成的class\n\nJVM负责对类进行初始化，主要对类变量进行初始化。\n\n在Java中对类变量进行初始值设定有两种方式：\n\n1. 声明类变量是指定初始值\n\n2. 使用静态代码块为类变量指定初始值\n\n#### JVM初始化规则\n\n类初始化时机：只有当对类的主动使用的时候才会导致类的初始化\n\nJava程序对类的使用方式可以分为两种： \n1. 主动使用：会执行加载、连接、初始化静态域\n2. 被动使用：只执行加载、连接，不执行类的初始化静态域\n\n##### 类的主动使用包括以下六种：\n\n- 创建类的实例，如（1）new （2）反射newInstance （3）序列化生成obj;遇到new、getstatic、putstatic、invokestatic这四条字节码指令\n- 访问某个类或接口的静态变量，或者对该静态变量赋值 （注意static 与static final的区别）\n- 调用类的静态方法\n- 反射（如Class.forName(“Test”)）\n- 初始化某个类的子类，则其父类也会被初始化；接口初始化不会导致父接口的初始化(这其实也是static final的原因)；对于静态字段，\n    - 只有直接定义这个字段的类才会被初始化，因此，通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化\n- Java虚拟机启动时被标明为启动类的类（Java Test），直接使用java.exe命令来运行某个主类\n\n##### 被动使用，不在主动使用的六种以内都是被动的\n- 1.如通过子类引用父类的静态字段，为子类的被动使用，不会导致子类初始化\n- 2.通过数组定义类引用类，为类的被动使用，不会触发此类的初始化\n    - 2.1 原因：其实数组已经不是E类型了，E的数组jvm在运行期，会动态生成一个新的类型，新类型为：\n                如果是一维数组，则为：[L+元素的类全名；二维数组，则为[[L+元素的类全名\n                如果是基础类型（int/float等），则为[I（int类型）、[F（float类型）等\n- 3.常量在编译阶段会存入调用方法所在的类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化\n\n\n```\n/**\n * 主动 被动使用问题测试\n * Created by Jack on 2018/9/28.\n */\npublic class ClassInitTest3 {\n    public static void main(String[] args) {\n        String x = F.s;\n    }\n}\n\nclass F {\n    //因为UUID.randomUUID().toString()这个方法，是运行期确认的，所以，这不是被动使用\n    static final String s = UUID.randomUUID().toString();\n\n    static {\n        //这儿会被输出\n        System.out.println(\"Initialize class F\");\n    }\n}\n```\n\n#### clinit 与 init\n在编译生成class文件时，编译器会产生两个方法加于class文件中，一个是类的初始化方法clinit, 另一个是实例的初始化方法init\n\n##### clinit：\nclinit指的是类构造器，这个构造器是jvm自动合并生成的，在jvm**第一次加载**class文件时调用，包括静态变量初始化语句和静态块的执行\n\n它合并static变量的赋值操作\n1. 注意是赋值操作，**(仅声明，或者final static)**不会触发<clinit>，毕竟前面准备阶段已经默认赋过值为0了\n2. static{}语句块生成，且虚拟机保证<clinit>执行前，父类的<clinit>已经执行完毕，所以说父类如果定义static块的话，一定比子类先执行\n3. 如果一个类或接口中没有static变量的赋值操作和static{}语句块，那么<clinit>不会被JVM生成\n4. static变量的赋值操作和static{}语句块合并的顺序是由语句在源文件中出现的顺序所决定的。\n\n\n##### init:\n在实例创建出来的时候调用，也就是构造函数，包括:\n1. new操作符\n2. 普通代码块\n3. 调用Class或java.lang.reflect.Constructor对象的newInstance()方法；\n4. 调用任何现有对象的clone()方法；\n5. 通过java.io.ObjectInputStream类的getObject()方法反序列化。\n\n```\n/**\n * <clinit> 与 <init> 区别\n */\npublic class ClassInitTest2 {\n    static {\n        System.out.println(\"cinit\");\n\n        i = 3;//可以赋值\n        //System.out.println(i);//但不能使用，语法错误\n    }\n\n    private static int i = 1;\n\n    {\n        System.out.println(\"init\");//实例化构造器，\n    }\n\n    public static void main(String [] args)\t{\n        new ClassInitTest2();\n        new ClassInitTest2();\n        String str = \"str\";\n        System.out.println(str);\n    }\n}\n\n// 输出\ncinit\ninit\ninit\nstr\n```\n\nstatic 与 static final 对初始化的区别\n```\n/**\n * static 与 static final 对初始化的区别\n */\npublic class ClassInitFinalTest {\n    public static  int age = 20;\n\n    static {\n        //如果age定义为static final，这儿就不会执行\n        System.out.println(\"静态初始化！\");\n    }\n\n    public static void main(String args[]){\n        System.out.println(ClassInitFinalTest.age);\n    }\n}\n\n```\n\n#### 不会执行类初始化的几种情况\n\n- 通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。\n- 定义对象数组，不会触发该类的初始化\n- 类A引用类B的static final常量不会导致类B初始化 (看上面的ClassInitFinalTest)\n- 通过类名获取Class对象，不会触发类的初始化。如\n- System.out.println(Person.class);\n- 通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。\n- 通过ClassLoader默认的loadClass方法，也不会触发初始化动作\n\n\n### 结束生命周期\n\n在如下几种情况下，Java虚拟机将结束生命周期\n\n- 执行了System.exit()方法\n- 程序正常执行结束\n- 程序在执行过程中遇到了异常或错误而异常终止\n- 由于操作系统出现错误而导致Java虚拟机进程终止\n\n## 类加载测试\n看到一段代码，很有意思\n```\n/**\n * 测试类加载及初始化顺序问题\n * Created by jack01.zhu on 2018/9/28.\n */\npublic class ClassInit {\n        private static ClassInit singleton = new ClassInit();\n        public static int counter1;\n        public static int counter2 = 0;\n        private ClassInit() {\n            counter1++;\n            counter2++;\n        }\n        public static ClassInit getSingleton() {\n            return singleton;\n        }\n}\n\n/**\n * 通过输出结果，推测类加载过程\n * Created by jack01.zhu on 2018/9/28.\n */\npublic class ClassInitTestMain {\n\n    public static void main(String []args) {\n        ClassInit classInitTest = ClassInit.getSingleton();\n        System.out.println(\"counter1=\"+classInitTest.counter1);\n        System.out.println(\"counter2=\"+classInitTest.counter2);\n    }\n}\n```\n这段代码输出的结果是什么？\n```\ncounter1=1\ncounter2=0\n```\n\n1. 入口肯定是ClassInitTestMain.main()，从这儿开始加载，初始化\n2. ClassInit.getSingleton()，首次使用化，所以从加载部分开始执行，执行到**准备阶段**所有static变量都被设置为初始值。此时\n```\npublic static int counter1 = 0;\npublic static int counter2 = 0;\nprivate static ClassInit singleton = null;\n```\n3. ClassInit执行到初始化阶段，生成类构造器<clinit>，类构造器会合并 static变量的赋值操作和 static语句块。合并后执行\n```\npublic static int counter1 ; // 由于 counter1没被赋值，所以不会被合并进去\n\npublic void clinit() {// 伪代码：<clinit>方法体内容\n  ClassInit singleton = new ClassInit();//（1）\n  int counter2 = 0;// （2）\n}\n```\n4. 初始化阶段 执行clinit内代码，执行到（1）处，此时counter1和counter2都变为1。\n5. 初始化阶段 执行clinit内代码，执行到（2）处，counter2又被设置为0。\n6. 初始化结束 ，回到Main方法的ClassInit.getSingleton();继续执行main方法，最后输出结束。\n\n---\n以上，就是一个类的生命周期，这篇重点就是加载部分，如上面所说，加载阶段相对别的阶段，对开发人员而言有更强的可控性;下面学习一下类加载器相关知识\n\n\n# 类加载器\n![类加载器](http://p7c3y4vhx.bkt.clouddn.com/201809281552_12.png)\n\n> 1. BootstrapClassLoader:加载路径: System.getProperty(\"java.class.path\") 或直接通过 -Xbootclasspath 指定\n>     \n>   特性: 用C语言写的\n>      \n>   手动获取加载路径: sun.misc.Launcher.getBootstrapClassPath().getURLs()\n>\n> 2. ExtClassLoader:加载路径: System.getProperty(\"java.ext.dirs\") 或直接通过 -Djava.ext.dirs 指定\n>     \n>   特性: 继承 URLClassLoader\n>\n>   手动获取加载路径:((URLClassLoader)App.class.getClassLoader().getParent()).getURLs()\n>\n> 3. AppClassLoader:加载路径: System.getProperty(\"sun.boot.class.path\") 或直接通过 -cp, -classpath 指定\n>     \n>   特性: 继承 URLClassLoader\n>\n>   手动获取加载路径: ((URLClassLoader)App.class.getClassLoader()).getURLs()\n>   通过 ClassLoader.getSystemClassLoader() 就可以获取 AppClassLoader, 自己写的程序中写的 ClassLoader(继承 URLClassLoader), 若不指定 parent, 默认的parent就是 AppClassLoader\n\n## 同一个class\n在JVM中，如何确定一个类型实例:\n\n同一个Class = 相同的 ClassName + PackageName + ClassLoader\n\n在JVM中，类型被定义在一个叫SystemDictionary 的数据结构中，该数据结构接受类加载器和全类名作为参数，返回类型实例。\n\nSystemDictionary 如图所示：\n\n![SystemDictionary](http://p7c3y4vhx.bkt.clouddn.com/201809251755_835.png)\n\n## 加载机制\n\n1. **全盘负责**，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入\n2. **双亲委托**，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类\n3. **缓存机制**，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效\n\n### 双亲委托模型\n双亲委托的工作过程：如果一个类加载器收到了一个类加载请求，它首先不会自己去加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成加载请求(它管理的范围之中没有这个类)时，子加载器才会尝试着自己去加载\n\n![](http://p7c3y4vhx.bkt.clouddn.com/201809260947_799.png)\n\n1. 当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。\n\n2. 当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。\n\n3. 如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；\n\n4. 若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。\n\n```\njavac –verbose查看运行类是加载了jar文件 \n```\n\n```\nprotected synchronized Class<?> loadClass(String name, boolean resolve) throws ClassNotFoundException{\n\n\t// 首先检查，jvm中是否已经加载了对应名称的类，findLoadedClass(String )方法实际上是findLoadedClass0方法的wrapped方法，做了检查类名的工\n       //作，而findLoadedClass0则是一个native方法，通过底层来查看jvm中的对象。\n\tClass c = findLoadedClass(name);\n\tif (c == null) {//类还未加载\n\t    try {\n\t\tif (parent != null) {\n            //在类还未加载的情况下，我们首先应该将加载工作交由父classloader来处理。\n\t\t    c = parent.loadClass(name, false);\n\t\t} else {\n                    //返回一个由bootstrap class loader加载的类，如果不存在就返回null\n\t\t    c = findBootstrapClassOrNull(name);\n\t\t}\n\t    } catch (ClassNotFoundException e) {\n                // ClassNotFoundException thrown if class not found\n\n                // from the non-null parent class loader\n            }\n\n            if (c == null) {\n\t        // If still not found, then invoke findClass in order\n\t        // to find the class.\n\t        c = findClass(name);//这里是我们的入手点，也就是指定我们自己的类加载实现\n\t    }\n\t}\n\tif (resolve) {\n\t    resolveClass(c);//用来做类链接操作\n\t}\n\treturn c;\n    }\n```\n从上面的方法也看出我们在实现自己的加载器的时候，不要覆盖locaClass方法，而是**重写findClass()**，这样能保证双亲委派模型，同时也实现了自己的方法\n\n\n### 为什么要使用双亲委托这种模型呢？\n1. 节约系统资源： 因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次\n2. 保证Java核心库的类型安全: 我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。\n\n## 自定义加载器\n既然JVM已经提供了默认的类加载器，为什么还要定义自已的类加载器呢？\n\n因为Java中提供的默认ClassLoader，只加载指定目录下的jar和class，如果我们想加载其它位置的类或jar时，比如：我要加载网络上的一个class文件，通过动态加载到内存之后，要调用这个类中的方法实现业务逻辑。在这样的情况下，默认的ClassLoader就不能满足我们的需求了，所以需要定义自己的ClassLoader\n\n### 定义自已的类加载器分为两步：\n\n1. 继承java.lang.ClassLoader\n2. 重写父类的findClass方法\n\n### 示例\n\n很简单的两个类，方法中打印出各自的类加载器\n```\npublic class LoaderClass {\n\n    public void loader(){\n        System.out.println(\"LoaderClass:\"+this.getClass().getClassLoader());\n        LoaderClass1 class1 = new LoaderClass1();\n        class1.loader();\n    }\n}\n\npublic class LoaderClass1 {\n\n    public void loader() {\n        System.out.println(this.getClass().getName() + \" loader:\"+this.getClass().getClassLoader());\n\n    }\n}\n```\n\n自定义加载器\n1. 重写findClass方法，从class文件加载\n2. 通过defineClass从bytes构建class\n\n```\npublic class MyClassLoader extends ClassLoader {\n\n    protected Class<?> findClass(String name) throws ClassNotFoundException {\n\n        String root = \"d:/\";\n\n        byte[] bytes = null;\n        try {\n            //路径改到根目录下\n            String file = root + name.substring(name.lastIndexOf(\".\")+1) + \".class\";\n            InputStream ins = new FileInputStream(file);\n            ByteArrayOutputStream baos = new ByteArrayOutputStream();\n            int bufferSize = 1024;\n            byte[] buffer = new byte[bufferSize];\n            int length = 0;\n            while ((length = ins.read(buffer)) != -1) {\n                baos.write(buffer, 0, length);\n            }\n            bytes = baos.toByteArray();\n\n            ins.close();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n        return defineClass(name, bytes, 0, bytes.length);\n    }\n}\n```\n\n测试类\n```\npublic class ClassLoaderTest {\n\n    public static void main(String[]args) throws Exception {\n        ClassLoaderTest test = new ClassLoaderTest();\n\n        System.out.println(test.getClass().getClassLoader());//输出sun.misc.Launcher$AppClassLoader\n\n        System.out.println(test.getClass().getClassLoader().getParent());//输出sun.misc.Launcher$ExtClassLoader\n\n        System.out.println(test.getClass().getClassLoader().getParent().getParent());//输出null\n\n        //=====测试重复加载，类路径中LoaderClass.class存在=================\n        //======虽然指定了classloader，但依然输出的是LoaderClass:sun.misc.Launcher$AppClassLoader\n        //==删除类路径下的LoaderClass.class,才会输出LoaderClass:com.jack.classloader.MyClassLoader\n        //并且loaderclass中创建的对象类加载器也是MyClassLoader\n        MyClassLoader classLoader = new MyClassLoader();\n        Class<?> loadClass = Class.forName(\"com.jack.classloader.LoaderClass\", true, classLoader);\n        Method startMethod = loadClass.getMethod(\"loader\");\n        startMethod.invoke(loadClass.newInstance());\n\n        //===当类加载器不一样时，两个class不相等\n        MyClassLoader classLoader1 = new MyClassLoader();\n        Class<?> loadClass1 = Class.forName(\"com.jack.classloader.LoaderClass\", true, classLoader1);\n        System.out.println(loadClass.equals(loadClass1));//输出false\n    }\n}\n```\n\n# 参考资料\n[class加载时机及两种显示加载的区别](https://blog.csdn.net/jiyiqinlovexx/article/details/51090751)\n\n[JVM类加载机制---类加载的过程](https://www.cnblogs.com/hunterCecil/p/6379197.html)\n\n[<init>和<cinit>](https://blog.csdn.net/w425006762/article/details/50452469)\n\n[类加载原理分析&动态加载Jar/Dex](https://www.jianshu.com/p/0b1dba1a1e95)\n\n[java类的主动使用/被动使用](https://blog.csdn.net/mweibiao/article/details/79516708)","slug":"类加载器","published":1,"updated":"2018-10-10T13:29:57.485Z","_id":"cjn369p7k00009wjoeok9n47t","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"java执行过程\"><a href=\"#java执行过程\" class=\"headerlink\" title=\"java执行过程\"></a>java执行过程</h1><p>先回顾一下要执行java程序，需要经过哪些步骤</p>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/jit/compile.png\" alt=\"执行java程序\"></p>\n<ol>\n<li>编写java代码</li>\n<li>通过javac把源代码编译成class</li>\n<li>把class载入JVM</li>\n</ol>\n<p>1、2两步是需要开发人员参与的，而第3步是JVM的行为，对开发人员透明</p>\n<h2 id=\"JVM类加载\"><a href=\"#JVM类加载\" class=\"headerlink\" title=\"JVM类加载\"></a>JVM类加载</h2><p>详细看下第三点，class载入JVM过程</p>\n<p>从内存空间视角,会分配到各个空间：</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809261932_365.png\" alt=\"内存结构\"></p>\n<p>每个内存空间详情可参考：《GC及JVM参数》</p>\n<p>从类生命周期角度，分阶段：</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809261921_783.png\" alt=\"类生命周期\"></p>\n<p>其中类加载的过程包括了<strong>加载</strong>、<strong>验证</strong>、<strong>准备</strong>、<strong>解析</strong>、<strong>初始化</strong>五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p>\n<h3 id=\"1-加载\"><a href=\"#1-加载\" class=\"headerlink\" title=\"1.加载\"></a>1.加载</h3><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口</p>\n<p>在加载阶段，虚拟机需要完成以下3件事情：</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>\n</ol>\n<p><strong>加载.class文件的方式</strong></p>\n<ul>\n<li>从本地系统中直接加载</li>\n<li>通过网络下载.class文件</li>\n<li>从zip，jar等归档文件中加载.class文件</li>\n<li>从专有数据库中提取.class文件</li>\n<li>将Java源文件动态编译为.class文件</li>\n</ul>\n<p><em>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载</em></p>\n<p>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，<br>而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据</p>\n<h4 id=\"加载时机\"><a href=\"#加载时机\" class=\"headerlink\" title=\"加载时机\"></a>加载时机</h4><ul>\n<li><p>当应用程序启动的时候，所有的类不会被一次性加载，因为如果一次性加载，内存资源有限，可能会影响应用程序的正常运行。例如，A a=new A()，<br>一个类真正被加载的时机是在创建对象的时候，才会去执行以上过程，加载类。当我们测试的时候，最先加载拥有main方法的主线程所在类</p>\n</li>\n<li><p>Java虚拟机有预加载功能。类加载器并不需要等到某个类被”首次主动使用”时再加载它,JVM规范规定JVM可以预测加载某一个类，如果这个类出错，但是应用程序没有调用这个类， JVM也不会报错；如果调用这个类的话，JVM才会报错，（LinkAgeError错误)</p>\n</li>\n</ul>\n<h4 id=\"加载方式\"><a href=\"#加载方式\" class=\"headerlink\" title=\"加载方式\"></a>加载方式</h4><h5 id=\"隐式加载\"><a href=\"#隐式加载\" class=\"headerlink\" title=\"隐式加载\"></a>隐式加载</h5><ol>\n<li>创建类对象</li>\n<li>使用类的静态域</li>\n<li>创建子类对象</li>\n<li>使用子类的静态域</li>\n<li>在JVM启动时，BootStrapLoader会加载一些JVM自身运行所需的class</li>\n<li>在JVM启动时，ExtClassLoader会加载指定目录下一些特殊的class</li>\n<li>在JVM启动时，AppClassLoader会加载classpath路径下的class，以及main函数所在的类的class文件</li>\n</ol>\n<h5 id=\"显式加载\"><a href=\"#显式加载\" class=\"headerlink\" title=\"显式加载\"></a>显式加载</h5><ol>\n<li>ClassLoader.loadClass(className)，不会进行初始化</li>\n<li>Class.forName(String name, boolean initialize,ClassLoader loader);  借助当前调用者的class的ClassLoader完成class的加载,加载class的同时根据initialize是否初始化</li>\n</ol>\n<h3 id=\"2-连接\"><a href=\"#2-连接\" class=\"headerlink\" title=\"2.连接\"></a>2.连接</h3><h4 id=\"2-1-验证：确保被加载的类的正确性\"><a href=\"#2-1-验证：确保被加载的类的正确性\" class=\"headerlink\" title=\"2.1.验证：确保被加载的类的正确性\"></a>2.1.验证：确保被加载的类的正确性</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：</p>\n<p><strong>文件格式验证</strong>：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</p>\n<p><strong>元数据验证</strong>：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。</p>\n<p><strong>字节码验证</strong>：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</p>\n<p><strong>符号引用验证</strong>：确保解析动作能正确执行。</p>\n<p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用<strong>-Xverify:none</strong>参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间</p>\n<h4 id=\"2-2-准备：为类的静态变量分配内存，并将其初始化为默认值\"><a href=\"#2-2-准备：为类的静态变量分配内存，并将其初始化为默认值\" class=\"headerlink\" title=\"2.2. 准备：为类的静态变量分配内存，并将其初始化为默认值\"></a>2.2. 准备：为类的静态变量分配内存，并将其初始化为默认值</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p>\n<ul>\n<li>2.2.1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</li>\n<li>2.2.2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。<br>假设一个类变量的定义为：public static int value = 3；<br> 那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行</li>\n<li><p>2.2.3、如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。</p>\n<p> 假设上面的类变量value被定义为： public static final int value = 3；</p>\n<p> 编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3</p>\n</li>\n</ul>\n<h4 id=\"2-3-解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\"><a href=\"#2-3-解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\" class=\"headerlink\" title=\"2.3. 解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\"></a>2.3. 解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</p>\n<h5 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h5><ol>\n<li>字面量：比较接近Java语言层面，如String字符串,声明final的常量等</li>\n<li>符号引用：属于编译原理方面的概念:1、包括类和接口的全限定名 2、字段的名称和描述符3.方法的名称和描述符</li>\n</ol>\n<h6 id=\"常量项结构\"><a href=\"#常量项结构\" class=\"headerlink\" title=\"常量项结构\"></a>常量项结构</h6><p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809281128_30.png\" alt=\"常量项结构\"></p>\n<p>这些内容，需要再去分析class文件详细结构，后续再学习了</p>\n<h3 id=\"3-初始化，为类的静态变量赋予正确的初始值\"><a href=\"#3-初始化，为类的静态变量赋予正确的初始值\" class=\"headerlink\" title=\"3.初始化，为类的静态变量赋予正确的初始值\"></a>3.初始化，为类的静态变量赋予正确的初始值</h3><p>类加载的最后一个阶段，除了加载阶段我们可以通过自定义类加载器参与之外，其余完全又JVM主导。到了初始化阶段，才真正开始执行程序，也就是由java转换成的class</p>\n<p>JVM负责对类进行初始化，主要对类变量进行初始化。</p>\n<p>在Java中对类变量进行初始值设定有两种方式：</p>\n<ol>\n<li><p>声明类变量是指定初始值</p>\n</li>\n<li><p>使用静态代码块为类变量指定初始值</p>\n</li>\n</ol>\n<h4 id=\"JVM初始化规则\"><a href=\"#JVM初始化规则\" class=\"headerlink\" title=\"JVM初始化规则\"></a>JVM初始化规则</h4><p>类初始化时机：只有当对类的主动使用的时候才会导致类的初始化</p>\n<p>Java程序对类的使用方式可以分为两种： </p>\n<ol>\n<li>主动使用：会执行加载、连接、初始化静态域</li>\n<li>被动使用：只执行加载、连接，不执行类的初始化静态域</li>\n</ol>\n<h5 id=\"类的主动使用包括以下六种：\"><a href=\"#类的主动使用包括以下六种：\" class=\"headerlink\" title=\"类的主动使用包括以下六种：\"></a>类的主动使用包括以下六种：</h5><ul>\n<li>创建类的实例，如（1）new （2）反射newInstance （3）序列化生成obj;遇到new、getstatic、putstatic、invokestatic这四条字节码指令</li>\n<li>访问某个类或接口的静态变量，或者对该静态变量赋值 （注意static 与static final的区别）</li>\n<li>调用类的静态方法</li>\n<li>反射（如Class.forName(“Test”)）</li>\n<li>初始化某个类的子类，则其父类也会被初始化；接口初始化不会导致父接口的初始化(这其实也是static final的原因)；对于静态字段，<ul>\n<li>只有直接定义这个字段的类才会被初始化，因此，通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化</li>\n</ul>\n</li>\n<li>Java虚拟机启动时被标明为启动类的类（Java Test），直接使用java.exe命令来运行某个主类</li>\n</ul>\n<h5 id=\"被动使用，不在主动使用的六种以内都是被动的\"><a href=\"#被动使用，不在主动使用的六种以内都是被动的\" class=\"headerlink\" title=\"被动使用，不在主动使用的六种以内都是被动的\"></a>被动使用，不在主动使用的六种以内都是被动的</h5><ul>\n<li>1.如通过子类引用父类的静态字段，为子类的被动使用，不会导致子类初始化</li>\n<li>2.通过数组定义类引用类，为类的被动使用，不会触发此类的初始化<ul>\n<li>2.1 原因：其实数组已经不是E类型了，E的数组jvm在运行期，会动态生成一个新的类型，新类型为：<pre><code>如果是一维数组，则为：[L+元素的类全名；二维数组，则为[[L+元素的类全名\n如果是基础类型（int/float等），则为[I（int类型）、[F（float类型）等\n</code></pre></li>\n</ul>\n</li>\n<li>3.常量在编译阶段会存入调用方法所在的类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 主动 被动使用问题测试</span><br><span class=\"line\"> * Created by Jack on 2018/9/28.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitTest3 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String x = F.s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class F &#123;</span><br><span class=\"line\">    //因为UUID.randomUUID().toString()这个方法，是运行期确认的，所以，这不是被动使用</span><br><span class=\"line\">    static final String s = UUID.randomUUID().toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        //这儿会被输出</span><br><span class=\"line\">        System.out.println(&quot;Initialize class F&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clinit-与-init\"><a href=\"#clinit-与-init\" class=\"headerlink\" title=\"clinit 与 init\"></a>clinit 与 init</h4><p>在编译生成class文件时，编译器会产生两个方法加于class文件中，一个是类的初始化方法clinit, 另一个是实例的初始化方法init</p>\n<h5 id=\"clinit：\"><a href=\"#clinit：\" class=\"headerlink\" title=\"clinit：\"></a>clinit：</h5><p>clinit指的是类构造器，这个构造器是jvm自动合并生成的，在jvm<strong>第一次加载</strong>class文件时调用，包括静态变量初始化语句和静态块的执行</p>\n<p>它合并static变量的赋值操作</p>\n<ol>\n<li>注意是赋值操作，<strong>(仅声明，或者final static)</strong>不会触发<clinit>，毕竟前面准备阶段已经默认赋过值为0了</clinit></li>\n<li>static{}语句块生成，且虚拟机保证<clinit>执行前，父类的<clinit>已经执行完毕，所以说父类如果定义static块的话，一定比子类先执行</clinit></clinit></li>\n<li>如果一个类或接口中没有static变量的赋值操作和static{}语句块，那么<clinit>不会被JVM生成</clinit></li>\n<li>static变量的赋值操作和static{}语句块合并的顺序是由语句在源文件中出现的顺序所决定的。</li>\n</ol>\n<h5 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init:\"></a>init:</h5><p>在实例创建出来的时候调用，也就是构造函数，包括:</p>\n<ol>\n<li>new操作符</li>\n<li>普通代码块</li>\n<li>调用Class或java.lang.reflect.Constructor对象的newInstance()方法；</li>\n<li>调用任何现有对象的clone()方法；</li>\n<li>通过java.io.ObjectInputStream类的getObject()方法反序列化。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * &lt;clinit&gt; 与 &lt;init&gt; 区别</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitTest2 &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;cinit&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        i = 3;//可以赋值</span><br><span class=\"line\">        //System.out.println(i);//但不能使用，语法错误</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int i = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(&quot;init&quot;);//实例化构造器，</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String [] args)\t&#123;</span><br><span class=\"line\">        new ClassInitTest2();</span><br><span class=\"line\">        new ClassInitTest2();</span><br><span class=\"line\">        String str = &quot;str&quot;;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">cinit</span><br><span class=\"line\">init</span><br><span class=\"line\">init</span><br><span class=\"line\">str</span><br></pre></td></tr></table></figure>\n<p>static 与 static final 对初始化的区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * static 与 static final 对初始化的区别</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitFinalTest &#123;</span><br><span class=\"line\">    public static  int age = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        //如果age定义为static final，这儿就不会执行</span><br><span class=\"line\">        System.out.println(&quot;静态初始化！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">        System.out.println(ClassInitFinalTest.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"不会执行类初始化的几种情况\"><a href=\"#不会执行类初始化的几种情况\" class=\"headerlink\" title=\"不会执行类初始化的几种情况\"></a>不会执行类初始化的几种情况</h4><ul>\n<li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li>\n<li>定义对象数组，不会触发该类的初始化</li>\n<li>类A引用类B的static final常量不会导致类B初始化 (看上面的ClassInitFinalTest)</li>\n<li>通过类名获取Class对象，不会触发类的初始化。如</li>\n<li>System.out.println(Person.class);</li>\n<li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li>\n<li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作</li>\n</ul>\n<h3 id=\"结束生命周期\"><a href=\"#结束生命周期\" class=\"headerlink\" title=\"结束生命周期\"></a>结束生命周期</h3><p>在如下几种情况下，Java虚拟机将结束生命周期</p>\n<ul>\n<li>执行了System.exit()方法</li>\n<li>程序正常执行结束</li>\n<li>程序在执行过程中遇到了异常或错误而异常终止</li>\n<li>由于操作系统出现错误而导致Java虚拟机进程终止</li>\n</ul>\n<h2 id=\"类加载测试\"><a href=\"#类加载测试\" class=\"headerlink\" title=\"类加载测试\"></a>类加载测试</h2><p>看到一段代码，很有意思<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 测试类加载及初始化顺序问题</span><br><span class=\"line\"> * Created by jack01.zhu on 2018/9/28.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInit &#123;</span><br><span class=\"line\">        private static ClassInit singleton = new ClassInit();</span><br><span class=\"line\">        public static int counter1;</span><br><span class=\"line\">        public static int counter2 = 0;</span><br><span class=\"line\">        private ClassInit() &#123;</span><br><span class=\"line\">            counter1++;</span><br><span class=\"line\">            counter2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public static ClassInit getSingleton() &#123;</span><br><span class=\"line\">            return singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 通过输出结果，推测类加载过程</span><br><span class=\"line\"> * Created by jack01.zhu on 2018/9/28.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitTestMain &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String []args) &#123;</span><br><span class=\"line\">        ClassInit classInitTest = ClassInit.getSingleton();</span><br><span class=\"line\">        System.out.println(&quot;counter1=&quot;+classInitTest.counter1);</span><br><span class=\"line\">        System.out.println(&quot;counter2=&quot;+classInitTest.counter2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码输出的结果是什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">counter1=1</span><br><span class=\"line\">counter2=0</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>入口肯定是ClassInitTestMain.main()，从这儿开始加载，初始化</li>\n<li><p>ClassInit.getSingleton()，首次使用化，所以从加载部分开始执行，执行到<strong>准备阶段</strong>所有static变量都被设置为初始值。此时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int counter1 = 0;</span><br><span class=\"line\">public static int counter2 = 0;</span><br><span class=\"line\">private static ClassInit singleton = null;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ClassInit执行到初始化阶段，生成类构造器<clinit>，类构造器会合并 static变量的赋值操作和 static语句块。合并后执行</clinit></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int counter1 ; // 由于 counter1没被赋值，所以不会被合并进去</span><br><span class=\"line\"></span><br><span class=\"line\">public void clinit() &#123;// 伪代码：&lt;clinit&gt;方法体内容</span><br><span class=\"line\">  ClassInit singleton = new ClassInit();//（1）</span><br><span class=\"line\">  int counter2 = 0;// （2）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化阶段 执行clinit内代码，执行到（1）处，此时counter1和counter2都变为1。</p>\n</li>\n<li>初始化阶段 执行clinit内代码，执行到（2）处，counter2又被设置为0。</li>\n<li>初始化结束 ，回到Main方法的ClassInit.getSingleton();继续执行main方法，最后输出结束。</li>\n</ol>\n<hr>\n<p>以上，就是一个类的生命周期，这篇重点就是加载部分，如上面所说，加载阶段相对别的阶段，对开发人员而言有更强的可控性;下面学习一下类加载器相关知识</p>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809281552_12.png\" alt=\"类加载器\"></p>\n<blockquote>\n<ol>\n<li><p>BootstrapClassLoader:加载路径: System.getProperty(“java.class.path”) 或直接通过 -Xbootclasspath 指定</p>\n<p>特性: 用C语言写的</p>\n<p>手动获取加载路径: sun.misc.Launcher.getBootstrapClassPath().getURLs()</p>\n</li>\n<li><p>ExtClassLoader:加载路径: System.getProperty(“java.ext.dirs”) 或直接通过 -Djava.ext.dirs 指定</p>\n<p>特性: 继承 URLClassLoader</p>\n<p>手动获取加载路径:((URLClassLoader)App.class.getClassLoader().getParent()).getURLs()</p>\n</li>\n<li><p>AppClassLoader:加载路径: System.getProperty(“sun.boot.class.path”) 或直接通过 -cp, -classpath 指定</p>\n<p>特性: 继承 URLClassLoader</p>\n<p>手动获取加载路径: ((URLClassLoader)App.class.getClassLoader()).getURLs()<br>通过 ClassLoader.getSystemClassLoader() 就可以获取 AppClassLoader, 自己写的程序中写的 ClassLoader(继承 URLClassLoader), 若不指定 parent, 默认的parent就是 AppClassLoader</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"同一个class\"><a href=\"#同一个class\" class=\"headerlink\" title=\"同一个class\"></a>同一个class</h2><p>在JVM中，如何确定一个类型实例:</p>\n<p>同一个Class = 相同的 ClassName + PackageName + ClassLoader</p>\n<p>在JVM中，类型被定义在一个叫SystemDictionary 的数据结构中，该数据结构接受类加载器和全类名作为参数，返回类型实例。</p>\n<p>SystemDictionary 如图所示：</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809251755_835.png\" alt=\"SystemDictionary\"></p>\n<h2 id=\"加载机制\"><a href=\"#加载机制\" class=\"headerlink\" title=\"加载机制\"></a>加载机制</h2><ol>\n<li><strong>全盘负责</strong>，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>\n<li><strong>双亲委托</strong>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>\n<li><strong>缓存机制</strong>，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效</li>\n</ol>\n<h3 id=\"双亲委托模型\"><a href=\"#双亲委托模型\" class=\"headerlink\" title=\"双亲委托模型\"></a>双亲委托模型</h3><p>双亲委托的工作过程：如果一个类加载器收到了一个类加载请求，它首先不会自己去加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成加载请求(它管理的范围之中没有这个类)时，子加载器才会尝试着自己去加载</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809260947_799.png\" alt=\"\"></p>\n<ol>\n<li><p>当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。</p>\n</li>\n<li><p>当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。</p>\n</li>\n<li><p>如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；</p>\n</li>\n<li><p>若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac –verbose查看运行类是加载了jar文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 首先检查，jvm中是否已经加载了对应名称的类，findLoadedClass(String )方法实际上是findLoadedClass0方法的wrapped方法，做了检查类名的工</span><br><span class=\"line\">       //作，而findLoadedClass0则是一个native方法，通过底层来查看jvm中的对象。</span><br><span class=\"line\">\tClass c = findLoadedClass(name);</span><br><span class=\"line\">\tif (c == null) &#123;//类还未加载</span><br><span class=\"line\">\t    try &#123;</span><br><span class=\"line\">\t\tif (parent != null) &#123;</span><br><span class=\"line\">            //在类还未加载的情况下，我们首先应该将加载工作交由父classloader来处理。</span><br><span class=\"line\">\t\t    c = parent.loadClass(name, false);</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">                    //返回一个由bootstrap class loader加载的类，如果不存在就返回null</span><br><span class=\"line\">\t\t    c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                // ClassNotFoundException thrown if class not found</span><br><span class=\"line\"></span><br><span class=\"line\">                // from the non-null parent class loader</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (c == null) &#123;</span><br><span class=\"line\">\t        // If still not found, then invoke findClass in order</span><br><span class=\"line\">\t        // to find the class.</span><br><span class=\"line\">\t        c = findClass(name);//这里是我们的入手点，也就是指定我们自己的类加载实现</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (resolve) &#123;</span><br><span class=\"line\">\t    resolveClass(c);//用来做类链接操作</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn c;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的方法也看出我们在实现自己的加载器的时候，不要覆盖locaClass方法，而是<strong>重写findClass()</strong>，这样能保证双亲委派模型，同时也实现了自己的方法</p>\n<h3 id=\"为什么要使用双亲委托这种模型呢？\"><a href=\"#为什么要使用双亲委托这种模型呢？\" class=\"headerlink\" title=\"为什么要使用双亲委托这种模型呢？\"></a>为什么要使用双亲委托这种模型呢？</h3><ol>\n<li>节约系统资源： 因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次</li>\n<li>保证Java核心库的类型安全: 我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。</li>\n</ol>\n<h2 id=\"自定义加载器\"><a href=\"#自定义加载器\" class=\"headerlink\" title=\"自定义加载器\"></a>自定义加载器</h2><p>既然JVM已经提供了默认的类加载器，为什么还要定义自已的类加载器呢？</p>\n<p>因为Java中提供的默认ClassLoader，只加载指定目录下的jar和class，如果我们想加载其它位置的类或jar时，比如：我要加载网络上的一个class文件，通过动态加载到内存之后，要调用这个类中的方法实现业务逻辑。在这样的情况下，默认的ClassLoader就不能满足我们的需求了，所以需要定义自己的ClassLoader</p>\n<h3 id=\"定义自已的类加载器分为两步：\"><a href=\"#定义自已的类加载器分为两步：\" class=\"headerlink\" title=\"定义自已的类加载器分为两步：\"></a>定义自已的类加载器分为两步：</h3><ol>\n<li>继承java.lang.ClassLoader</li>\n<li>重写父类的findClass方法</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>很简单的两个类，方法中打印出各自的类加载器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LoaderClass &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void loader()&#123;</span><br><span class=\"line\">        System.out.println(&quot;LoaderClass:&quot;+this.getClass().getClassLoader());</span><br><span class=\"line\">        LoaderClass1 class1 = new LoaderClass1();</span><br><span class=\"line\">        class1.loader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LoaderClass1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void loader() &#123;</span><br><span class=\"line\">        System.out.println(this.getClass().getName() + &quot; loader:&quot;+this.getClass().getClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>自定义加载器</p>\n<ol>\n<li>重写findClass方法，从class文件加载</li>\n<li>通过defineClass从bytes构建class</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyClassLoader extends ClassLoader &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String root = &quot;d:/&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        byte[] bytes = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //路径改到根目录下</span><br><span class=\"line\">            String file = root + name.substring(name.lastIndexOf(&quot;.&quot;)+1) + &quot;.class&quot;;</span><br><span class=\"line\">            InputStream ins = new FileInputStream(file);</span><br><span class=\"line\">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">            int bufferSize = 1024;</span><br><span class=\"line\">            byte[] buffer = new byte[bufferSize];</span><br><span class=\"line\">            int length = 0;</span><br><span class=\"line\">            while ((length = ins.read(buffer)) != -1) &#123;</span><br><span class=\"line\">                baos.write(buffer, 0, length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bytes = baos.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">            ins.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return defineClass(name, bytes, 0, bytes.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ClassLoaderTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[]args) throws Exception &#123;</span><br><span class=\"line\">        ClassLoaderTest test = new ClassLoaderTest();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.getClass().getClassLoader());//输出sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.getClass().getClassLoader().getParent());//输出sun.misc.Launcher$ExtClassLoader</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.getClass().getClassLoader().getParent().getParent());//输出null</span><br><span class=\"line\"></span><br><span class=\"line\">        //=====测试重复加载，类路径中LoaderClass.class存在=================</span><br><span class=\"line\">        //======虽然指定了classloader，但依然输出的是LoaderClass:sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\">        //==删除类路径下的LoaderClass.class,才会输出LoaderClass:com.jack.classloader.MyClassLoader</span><br><span class=\"line\">        //并且loaderclass中创建的对象类加载器也是MyClassLoader</span><br><span class=\"line\">        MyClassLoader classLoader = new MyClassLoader();</span><br><span class=\"line\">        Class&lt;?&gt; loadClass = Class.forName(&quot;com.jack.classloader.LoaderClass&quot;, true, classLoader);</span><br><span class=\"line\">        Method startMethod = loadClass.getMethod(&quot;loader&quot;);</span><br><span class=\"line\">        startMethod.invoke(loadClass.newInstance());</span><br><span class=\"line\"></span><br><span class=\"line\">        //===当类加载器不一样时，两个class不相等</span><br><span class=\"line\">        MyClassLoader classLoader1 = new MyClassLoader();</span><br><span class=\"line\">        Class&lt;?&gt; loadClass1 = Class.forName(&quot;com.jack.classloader.LoaderClass&quot;, true, classLoader1);</span><br><span class=\"line\">        System.out.println(loadClass.equals(loadClass1));//输出false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://blog.csdn.net/jiyiqinlovexx/article/details/51090751\" target=\"_blank\" rel=\"noopener\">class加载时机及两种显示加载的区别</a></p>\n<p><a href=\"https://www.cnblogs.com/hunterCecil/p/6379197.html\" target=\"_blank\" rel=\"noopener\">JVM类加载机制—类加载的过程</a></p>\n<p><a href=\"https://blog.csdn.net/w425006762/article/details/50452469\" target=\"_blank\" rel=\"noopener\"><init>和<cinit></cinit></init></a></p>\n<p><a href=\"https://www.jianshu.com/p/0b1dba1a1e95\" target=\"_blank\" rel=\"noopener\">类加载原理分析&amp;动态加载Jar/Dex</a></p>\n<p><a href=\"https://blog.csdn.net/mweibiao/article/details/79516708\" target=\"_blank\" rel=\"noopener\">java类的主动使用/被动使用</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"java执行过程\"><a href=\"#java执行过程\" class=\"headerlink\" title=\"java执行过程\"></a>java执行过程</h1><p>先回顾一下要执行java程序，需要经过哪些步骤</p>\n<p><img src=\"http://oirwmbp4e.bkt.clouddn.com/jit/compile.png\" alt=\"执行java程序\"></p>\n<ol>\n<li>编写java代码</li>\n<li>通过javac把源代码编译成class</li>\n<li>把class载入JVM</li>\n</ol>\n<p>1、2两步是需要开发人员参与的，而第3步是JVM的行为，对开发人员透明</p>\n<h2 id=\"JVM类加载\"><a href=\"#JVM类加载\" class=\"headerlink\" title=\"JVM类加载\"></a>JVM类加载</h2><p>详细看下第三点，class载入JVM过程</p>\n<p>从内存空间视角,会分配到各个空间：</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809261932_365.png\" alt=\"内存结构\"></p>\n<p>每个内存空间详情可参考：《GC及JVM参数》</p>\n<p>从类生命周期角度，分阶段：</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809261921_783.png\" alt=\"类生命周期\"></p>\n<p>其中类加载的过程包括了<strong>加载</strong>、<strong>验证</strong>、<strong>准备</strong>、<strong>解析</strong>、<strong>初始化</strong>五个阶段。在这五个阶段中，加载、验证、准备和初始化这四个阶段发生的顺序是确定的，而解析阶段则不一定，它在某些情况下可以在初始化阶段之后开始，这是为了支持Java语言的运行时绑定（也成为动态绑定或晚期绑定）。另外注意这里的几个阶段是按顺序开始，而不是按顺序进行或完成，因为这些阶段通常都是互相交叉地混合进行的，通常在一个阶段执行的过程中调用或激活另一个阶段。</p>\n<h3 id=\"1-加载\"><a href=\"#1-加载\" class=\"headerlink\" title=\"1.加载\"></a>1.加载</h3><p>类的加载指的是将类的.class文件中的二进制数据读入到内存中，将其放在运行时数据区的方法区内，然后在堆区创建一个java.lang.Class对象，用来封装类在方法区内的数据结构。类的加载的最终产品是位于堆区中的Class对象，Class对象封装了类在方法区内的数据结构，并且向Java程序员提供了访问方法区内的数据结构的接口</p>\n<p>在加载阶段，虚拟机需要完成以下3件事情：</p>\n<ol>\n<li>通过一个类的全限定名来获取定义此类的二进制字节流</li>\n<li>将这个字节流所代表的静态存储结构转化为方法区的运行时数据结构。</li>\n<li>在内存中生成一个代表这个类的java.lang.Class对象，作为方法区这个类的各种数据的访问入口</li>\n</ol>\n<p><strong>加载.class文件的方式</strong></p>\n<ul>\n<li>从本地系统中直接加载</li>\n<li>通过网络下载.class文件</li>\n<li>从zip，jar等归档文件中加载.class文件</li>\n<li>从专有数据库中提取.class文件</li>\n<li>将Java源文件动态编译为.class文件</li>\n</ul>\n<p><em>相对于类加载的其他阶段而言，加载阶段（准确地说，是加载阶段获取类的二进制字节流的动作）是可控性最强的阶段，因为开发人员既可以使用系统提供的类加载器来完成加载，也可以自定义自己的类加载器来完成加载</em></p>\n<p>加载阶段完成后，虚拟机外部的 二进制字节流就按照虚拟机所需的格式存储在方法区之中，<br>而且在Java堆中也创建一个java.lang.Class类的对象，这样便可以通过该对象访问方法区中的这些数据</p>\n<h4 id=\"加载时机\"><a href=\"#加载时机\" class=\"headerlink\" title=\"加载时机\"></a>加载时机</h4><ul>\n<li><p>当应用程序启动的时候，所有的类不会被一次性加载，因为如果一次性加载，内存资源有限，可能会影响应用程序的正常运行。例如，A a=new A()，<br>一个类真正被加载的时机是在创建对象的时候，才会去执行以上过程，加载类。当我们测试的时候，最先加载拥有main方法的主线程所在类</p>\n</li>\n<li><p>Java虚拟机有预加载功能。类加载器并不需要等到某个类被”首次主动使用”时再加载它,JVM规范规定JVM可以预测加载某一个类，如果这个类出错，但是应用程序没有调用这个类， JVM也不会报错；如果调用这个类的话，JVM才会报错，（LinkAgeError错误)</p>\n</li>\n</ul>\n<h4 id=\"加载方式\"><a href=\"#加载方式\" class=\"headerlink\" title=\"加载方式\"></a>加载方式</h4><h5 id=\"隐式加载\"><a href=\"#隐式加载\" class=\"headerlink\" title=\"隐式加载\"></a>隐式加载</h5><ol>\n<li>创建类对象</li>\n<li>使用类的静态域</li>\n<li>创建子类对象</li>\n<li>使用子类的静态域</li>\n<li>在JVM启动时，BootStrapLoader会加载一些JVM自身运行所需的class</li>\n<li>在JVM启动时，ExtClassLoader会加载指定目录下一些特殊的class</li>\n<li>在JVM启动时，AppClassLoader会加载classpath路径下的class，以及main函数所在的类的class文件</li>\n</ol>\n<h5 id=\"显式加载\"><a href=\"#显式加载\" class=\"headerlink\" title=\"显式加载\"></a>显式加载</h5><ol>\n<li>ClassLoader.loadClass(className)，不会进行初始化</li>\n<li>Class.forName(String name, boolean initialize,ClassLoader loader);  借助当前调用者的class的ClassLoader完成class的加载,加载class的同时根据initialize是否初始化</li>\n</ol>\n<h3 id=\"2-连接\"><a href=\"#2-连接\" class=\"headerlink\" title=\"2.连接\"></a>2.连接</h3><h4 id=\"2-1-验证：确保被加载的类的正确性\"><a href=\"#2-1-验证：确保被加载的类的正确性\" class=\"headerlink\" title=\"2.1.验证：确保被加载的类的正确性\"></a>2.1.验证：确保被加载的类的正确性</h4><p>验证是连接阶段的第一步，这一阶段的目的是为了确保Class文件的字节流中包含的信息符合当前虚拟机的要求，并且不会危害虚拟机自身的安全。验证阶段大致会完成4个阶段的检验动作：</p>\n<p><strong>文件格式验证</strong>：验证字节流是否符合Class文件格式的规范；例如：是否以0xCAFEBABE开头、主次版本号是否在当前虚拟机的处理范围之内、常量池中的常量是否有不被支持的类型。</p>\n<p><strong>元数据验证</strong>：对字节码描述的信息进行语义分析（注意：对比javac编译阶段的语义分析），以保证其描述的信息符合Java语言规范的要求；例如：这个类是否有父类，除了java.lang.Object之外。</p>\n<p><strong>字节码验证</strong>：通过数据流和控制流分析，确定程序语义是合法的、符合逻辑的。</p>\n<p><strong>符号引用验证</strong>：确保解析动作能正确执行。</p>\n<p>验证阶段是非常重要的，但不是必须的，它对程序运行期没有影响，如果所引用的类经过反复验证，那么可以考虑采用<strong>-Xverify:none</strong>参数来关闭大部分的类验证措施，以缩短虚拟机类加载的时间</p>\n<h4 id=\"2-2-准备：为类的静态变量分配内存，并将其初始化为默认值\"><a href=\"#2-2-准备：为类的静态变量分配内存，并将其初始化为默认值\" class=\"headerlink\" title=\"2.2. 准备：为类的静态变量分配内存，并将其初始化为默认值\"></a>2.2. 准备：为类的静态变量分配内存，并将其初始化为默认值</h4><p>准备阶段是正式为类变量分配内存并设置类变量初始值的阶段，这些内存都将在方法区中分配。对于该阶段有以下几点需要注意：</p>\n<ul>\n<li>2.2.1、这时候进行内存分配的仅包括类变量（static），而不包括实例变量，实例变量会在对象实例化时随着对象一块分配在Java堆中。</li>\n<li>2.2.2、这里所设置的初始值通常情况下是数据类型默认的零值（如0、0L、null、false等），而不是被在Java代码中被显式地赋予的值。<br>假设一个类变量的定义为：public static int value = 3；<br> 那么变量value在准备阶段过后的初始值为0，而不是3，因为这时候尚未开始执行任何Java方法，而把value赋值为3的putstatic指令是在程序编译后，存放于类构造器方法之中的，所以把value赋值为3的动作将在初始化阶段才会执行</li>\n<li><p>2.2.3、如果类字段的字段属性表中存在ConstantValue属性，即同时被final和static修饰，那么在准备阶段变量value就会被初始化为ConstValue属性所指定的值。</p>\n<p> 假设上面的类变量value被定义为： public static final int value = 3；</p>\n<p> 编译时Javac将会为value生成ConstantValue属性，在准备阶段虚拟机就会根据ConstantValue的设置将value赋值为3</p>\n</li>\n</ul>\n<h4 id=\"2-3-解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\"><a href=\"#2-3-解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\" class=\"headerlink\" title=\"2.3. 解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程\"></a>2.3. 解析：虚拟机将常量池中的符号引用替换为直接引用（内存地址）的过程</h4><p>解析阶段是虚拟机将常量池内的符号引用替换为直接引用的过程，解析动作主要针对类或接口、字段、类方法、接口方法、方法类型、方法句柄和调用点限定符7类符号引用进行。符号引用就是一组符号来描述目标，可以是任何字面量。直接引用就是直接指向目标的指针、相对偏移量或一个间接定位到目标的句柄</p>\n<h5 id=\"常量池\"><a href=\"#常量池\" class=\"headerlink\" title=\"常量池\"></a>常量池</h5><ol>\n<li>字面量：比较接近Java语言层面，如String字符串,声明final的常量等</li>\n<li>符号引用：属于编译原理方面的概念:1、包括类和接口的全限定名 2、字段的名称和描述符3.方法的名称和描述符</li>\n</ol>\n<h6 id=\"常量项结构\"><a href=\"#常量项结构\" class=\"headerlink\" title=\"常量项结构\"></a>常量项结构</h6><p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809281128_30.png\" alt=\"常量项结构\"></p>\n<p>这些内容，需要再去分析class文件详细结构，后续再学习了</p>\n<h3 id=\"3-初始化，为类的静态变量赋予正确的初始值\"><a href=\"#3-初始化，为类的静态变量赋予正确的初始值\" class=\"headerlink\" title=\"3.初始化，为类的静态变量赋予正确的初始值\"></a>3.初始化，为类的静态变量赋予正确的初始值</h3><p>类加载的最后一个阶段，除了加载阶段我们可以通过自定义类加载器参与之外，其余完全又JVM主导。到了初始化阶段，才真正开始执行程序，也就是由java转换成的class</p>\n<p>JVM负责对类进行初始化，主要对类变量进行初始化。</p>\n<p>在Java中对类变量进行初始值设定有两种方式：</p>\n<ol>\n<li><p>声明类变量是指定初始值</p>\n</li>\n<li><p>使用静态代码块为类变量指定初始值</p>\n</li>\n</ol>\n<h4 id=\"JVM初始化规则\"><a href=\"#JVM初始化规则\" class=\"headerlink\" title=\"JVM初始化规则\"></a>JVM初始化规则</h4><p>类初始化时机：只有当对类的主动使用的时候才会导致类的初始化</p>\n<p>Java程序对类的使用方式可以分为两种： </p>\n<ol>\n<li>主动使用：会执行加载、连接、初始化静态域</li>\n<li>被动使用：只执行加载、连接，不执行类的初始化静态域</li>\n</ol>\n<h5 id=\"类的主动使用包括以下六种：\"><a href=\"#类的主动使用包括以下六种：\" class=\"headerlink\" title=\"类的主动使用包括以下六种：\"></a>类的主动使用包括以下六种：</h5><ul>\n<li>创建类的实例，如（1）new （2）反射newInstance （3）序列化生成obj;遇到new、getstatic、putstatic、invokestatic这四条字节码指令</li>\n<li>访问某个类或接口的静态变量，或者对该静态变量赋值 （注意static 与static final的区别）</li>\n<li>调用类的静态方法</li>\n<li>反射（如Class.forName(“Test”)）</li>\n<li>初始化某个类的子类，则其父类也会被初始化；接口初始化不会导致父接口的初始化(这其实也是static final的原因)；对于静态字段，<ul>\n<li>只有直接定义这个字段的类才会被初始化，因此，通过其子类来引用父类中定义的静态字段，只会触发父类的初始化而不会触发子类的初始化</li>\n</ul>\n</li>\n<li>Java虚拟机启动时被标明为启动类的类（Java Test），直接使用java.exe命令来运行某个主类</li>\n</ul>\n<h5 id=\"被动使用，不在主动使用的六种以内都是被动的\"><a href=\"#被动使用，不在主动使用的六种以内都是被动的\" class=\"headerlink\" title=\"被动使用，不在主动使用的六种以内都是被动的\"></a>被动使用，不在主动使用的六种以内都是被动的</h5><ul>\n<li>1.如通过子类引用父类的静态字段，为子类的被动使用，不会导致子类初始化</li>\n<li>2.通过数组定义类引用类，为类的被动使用，不会触发此类的初始化<ul>\n<li>2.1 原因：其实数组已经不是E类型了，E的数组jvm在运行期，会动态生成一个新的类型，新类型为：<pre><code>如果是一维数组，则为：[L+元素的类全名；二维数组，则为[[L+元素的类全名\n如果是基础类型（int/float等），则为[I（int类型）、[F（float类型）等\n</code></pre></li>\n</ul>\n</li>\n<li>3.常量在编译阶段会存入调用方法所在的类的常量池中，本质上没有直接引用到定义常量的类，因此不会触发定义常量的类的初始化</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 主动 被动使用问题测试</span><br><span class=\"line\"> * Created by Jack on 2018/9/28.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitTest3 &#123;</span><br><span class=\"line\">    public static void main(String[] args) &#123;</span><br><span class=\"line\">        String x = F.s;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">class F &#123;</span><br><span class=\"line\">    //因为UUID.randomUUID().toString()这个方法，是运行期确认的，所以，这不是被动使用</span><br><span class=\"line\">    static final String s = UUID.randomUUID().toString();</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        //这儿会被输出</span><br><span class=\"line\">        System.out.println(&quot;Initialize class F&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h4 id=\"clinit-与-init\"><a href=\"#clinit-与-init\" class=\"headerlink\" title=\"clinit 与 init\"></a>clinit 与 init</h4><p>在编译生成class文件时，编译器会产生两个方法加于class文件中，一个是类的初始化方法clinit, 另一个是实例的初始化方法init</p>\n<h5 id=\"clinit：\"><a href=\"#clinit：\" class=\"headerlink\" title=\"clinit：\"></a>clinit：</h5><p>clinit指的是类构造器，这个构造器是jvm自动合并生成的，在jvm<strong>第一次加载</strong>class文件时调用，包括静态变量初始化语句和静态块的执行</p>\n<p>它合并static变量的赋值操作</p>\n<ol>\n<li>注意是赋值操作，<strong>(仅声明，或者final static)</strong>不会触发<clinit>，毕竟前面准备阶段已经默认赋过值为0了</clinit></li>\n<li>static{}语句块生成，且虚拟机保证<clinit>执行前，父类的<clinit>已经执行完毕，所以说父类如果定义static块的话，一定比子类先执行</clinit></clinit></li>\n<li>如果一个类或接口中没有static变量的赋值操作和static{}语句块，那么<clinit>不会被JVM生成</clinit></li>\n<li>static变量的赋值操作和static{}语句块合并的顺序是由语句在源文件中出现的顺序所决定的。</li>\n</ol>\n<h5 id=\"init\"><a href=\"#init\" class=\"headerlink\" title=\"init:\"></a>init:</h5><p>在实例创建出来的时候调用，也就是构造函数，包括:</p>\n<ol>\n<li>new操作符</li>\n<li>普通代码块</li>\n<li>调用Class或java.lang.reflect.Constructor对象的newInstance()方法；</li>\n<li>调用任何现有对象的clone()方法；</li>\n<li>通过java.io.ObjectInputStream类的getObject()方法反序列化。</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * &lt;clinit&gt; 与 &lt;init&gt; 区别</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitTest2 &#123;</span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        System.out.println(&quot;cinit&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">        i = 3;//可以赋值</span><br><span class=\"line\">        //System.out.println(i);//但不能使用，语法错误</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    private static int i = 1;</span><br><span class=\"line\"></span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">        System.out.println(&quot;init&quot;);//实例化构造器，</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String [] args)\t&#123;</span><br><span class=\"line\">        new ClassInitTest2();</span><br><span class=\"line\">        new ClassInitTest2();</span><br><span class=\"line\">        String str = &quot;str&quot;;</span><br><span class=\"line\">        System.out.println(str);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">// 输出</span><br><span class=\"line\">cinit</span><br><span class=\"line\">init</span><br><span class=\"line\">init</span><br><span class=\"line\">str</span><br></pre></td></tr></table></figure>\n<p>static 与 static final 对初始化的区别<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * static 与 static final 对初始化的区别</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitFinalTest &#123;</span><br><span class=\"line\">    public static  int age = 20;</span><br><span class=\"line\"></span><br><span class=\"line\">    static &#123;</span><br><span class=\"line\">        //如果age定义为static final，这儿就不会执行</span><br><span class=\"line\">        System.out.println(&quot;静态初始化！&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String args[])&#123;</span><br><span class=\"line\">        System.out.println(ClassInitFinalTest.age);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h4 id=\"不会执行类初始化的几种情况\"><a href=\"#不会执行类初始化的几种情况\" class=\"headerlink\" title=\"不会执行类初始化的几种情况\"></a>不会执行类初始化的几种情况</h4><ul>\n<li>通过子类引用父类的静态字段，只会触发父类的初始化，而不会触发子类的初始化。</li>\n<li>定义对象数组，不会触发该类的初始化</li>\n<li>类A引用类B的static final常量不会导致类B初始化 (看上面的ClassInitFinalTest)</li>\n<li>通过类名获取Class对象，不会触发类的初始化。如</li>\n<li>System.out.println(Person.class);</li>\n<li>通过Class.forName加载指定类时，如果指定参数initialize为false时，也不会触发类初始化，其实这个参数是告诉虚拟机，是否要对类进行初始化。</li>\n<li>通过ClassLoader默认的loadClass方法，也不会触发初始化动作</li>\n</ul>\n<h3 id=\"结束生命周期\"><a href=\"#结束生命周期\" class=\"headerlink\" title=\"结束生命周期\"></a>结束生命周期</h3><p>在如下几种情况下，Java虚拟机将结束生命周期</p>\n<ul>\n<li>执行了System.exit()方法</li>\n<li>程序正常执行结束</li>\n<li>程序在执行过程中遇到了异常或错误而异常终止</li>\n<li>由于操作系统出现错误而导致Java虚拟机进程终止</li>\n</ul>\n<h2 id=\"类加载测试\"><a href=\"#类加载测试\" class=\"headerlink\" title=\"类加载测试\"></a>类加载测试</h2><p>看到一段代码，很有意思<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 测试类加载及初始化顺序问题</span><br><span class=\"line\"> * Created by jack01.zhu on 2018/9/28.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInit &#123;</span><br><span class=\"line\">        private static ClassInit singleton = new ClassInit();</span><br><span class=\"line\">        public static int counter1;</span><br><span class=\"line\">        public static int counter2 = 0;</span><br><span class=\"line\">        private ClassInit() &#123;</span><br><span class=\"line\">            counter1++;</span><br><span class=\"line\">            counter2++;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        public static ClassInit getSingleton() &#123;</span><br><span class=\"line\">            return singleton;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/**</span><br><span class=\"line\"> * 通过输出结果，推测类加载过程</span><br><span class=\"line\"> * Created by jack01.zhu on 2018/9/28.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassInitTestMain &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String []args) &#123;</span><br><span class=\"line\">        ClassInit classInitTest = ClassInit.getSingleton();</span><br><span class=\"line\">        System.out.println(&quot;counter1=&quot;+classInitTest.counter1);</span><br><span class=\"line\">        System.out.println(&quot;counter2=&quot;+classInitTest.counter2);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这段代码输出的结果是什么？<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">counter1=1</span><br><span class=\"line\">counter2=0</span><br></pre></td></tr></table></figure></p>\n<ol>\n<li>入口肯定是ClassInitTestMain.main()，从这儿开始加载，初始化</li>\n<li><p>ClassInit.getSingleton()，首次使用化，所以从加载部分开始执行，执行到<strong>准备阶段</strong>所有static变量都被设置为初始值。此时</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int counter1 = 0;</span><br><span class=\"line\">public static int counter2 = 0;</span><br><span class=\"line\">private static ClassInit singleton = null;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>ClassInit执行到初始化阶段，生成类构造器<clinit>，类构造器会合并 static变量的赋值操作和 static语句块。合并后执行</clinit></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static int counter1 ; // 由于 counter1没被赋值，所以不会被合并进去</span><br><span class=\"line\"></span><br><span class=\"line\">public void clinit() &#123;// 伪代码：&lt;clinit&gt;方法体内容</span><br><span class=\"line\">  ClassInit singleton = new ClassInit();//（1）</span><br><span class=\"line\">  int counter2 = 0;// （2）</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>初始化阶段 执行clinit内代码，执行到（1）处，此时counter1和counter2都变为1。</p>\n</li>\n<li>初始化阶段 执行clinit内代码，执行到（2）处，counter2又被设置为0。</li>\n<li>初始化结束 ，回到Main方法的ClassInit.getSingleton();继续执行main方法，最后输出结束。</li>\n</ol>\n<hr>\n<p>以上，就是一个类的生命周期，这篇重点就是加载部分，如上面所说，加载阶段相对别的阶段，对开发人员而言有更强的可控性;下面学习一下类加载器相关知识</p>\n<h1 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h1><p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809281552_12.png\" alt=\"类加载器\"></p>\n<blockquote>\n<ol>\n<li><p>BootstrapClassLoader:加载路径: System.getProperty(“java.class.path”) 或直接通过 -Xbootclasspath 指定</p>\n<p>特性: 用C语言写的</p>\n<p>手动获取加载路径: sun.misc.Launcher.getBootstrapClassPath().getURLs()</p>\n</li>\n<li><p>ExtClassLoader:加载路径: System.getProperty(“java.ext.dirs”) 或直接通过 -Djava.ext.dirs 指定</p>\n<p>特性: 继承 URLClassLoader</p>\n<p>手动获取加载路径:((URLClassLoader)App.class.getClassLoader().getParent()).getURLs()</p>\n</li>\n<li><p>AppClassLoader:加载路径: System.getProperty(“sun.boot.class.path”) 或直接通过 -cp, -classpath 指定</p>\n<p>特性: 继承 URLClassLoader</p>\n<p>手动获取加载路径: ((URLClassLoader)App.class.getClassLoader()).getURLs()<br>通过 ClassLoader.getSystemClassLoader() 就可以获取 AppClassLoader, 自己写的程序中写的 ClassLoader(继承 URLClassLoader), 若不指定 parent, 默认的parent就是 AppClassLoader</p>\n</li>\n</ol>\n</blockquote>\n<h2 id=\"同一个class\"><a href=\"#同一个class\" class=\"headerlink\" title=\"同一个class\"></a>同一个class</h2><p>在JVM中，如何确定一个类型实例:</p>\n<p>同一个Class = 相同的 ClassName + PackageName + ClassLoader</p>\n<p>在JVM中，类型被定义在一个叫SystemDictionary 的数据结构中，该数据结构接受类加载器和全类名作为参数，返回类型实例。</p>\n<p>SystemDictionary 如图所示：</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809251755_835.png\" alt=\"SystemDictionary\"></p>\n<h2 id=\"加载机制\"><a href=\"#加载机制\" class=\"headerlink\" title=\"加载机制\"></a>加载机制</h2><ol>\n<li><strong>全盘负责</strong>，当一个类加载器负责加载某个Class时，该Class所依赖的和引用的其他Class也将由该类加载器负责载入，除非显示使用另外一个类加载器来载入</li>\n<li><strong>双亲委托</strong>，先让父类加载器试图加载该类，只有在父类加载器无法加载该类时才尝试从自己的类路径中加载该类</li>\n<li><strong>缓存机制</strong>，缓存机制将会保证所有加载过的Class都会被缓存，当程序中需要使用某个Class时，类加载器先从缓存区寻找该Class，只有缓存区不存在，系统才会读取该类对应的二进制数据，并将其转换成Class对象，存入缓存区。这就是为什么修改了Class后，必须重启JVM，程序的修改才会生效</li>\n</ol>\n<h3 id=\"双亲委托模型\"><a href=\"#双亲委托模型\" class=\"headerlink\" title=\"双亲委托模型\"></a>双亲委托模型</h3><p>双亲委托的工作过程：如果一个类加载器收到了一个类加载请求，它首先不会自己去加载这个类，而是把这个请求委托给父类加载器去完成，每一个层次的类加载器都是如此，因此所有的加载请求最终都应该传送到顶层的启动类加载器中，只有当父类加载器反馈自己无法完成加载请求(它管理的范围之中没有这个类)时，子加载器才会尝试着自己去加载</p>\n<p><img src=\"http://p7c3y4vhx.bkt.clouddn.com/201809260947_799.png\" alt=\"\"></p>\n<ol>\n<li><p>当AppClassLoader加载一个class时，它首先不会自己去尝试加载这个类，而是把类加载请求委派给父类加载器ExtClassLoader去完成。</p>\n</li>\n<li><p>当ExtClassLoader加载一个class时，它首先也不会自己去尝试加载这个类，而是把类加载请求委派给BootStrapClassLoader去完成。</p>\n</li>\n<li><p>如果BootStrapClassLoader加载失败（例如在$JAVA_HOME/jre/lib里未查找到该class），会使用ExtClassLoader来尝试加载；</p>\n</li>\n<li><p>若ExtClassLoader也加载失败，则会使用AppClassLoader来加载，如果AppClassLoader也加载失败，则会报出异常ClassNotFoundException。</p>\n</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">javac –verbose查看运行类是加载了jar文件</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">protected synchronized Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\t// 首先检查，jvm中是否已经加载了对应名称的类，findLoadedClass(String )方法实际上是findLoadedClass0方法的wrapped方法，做了检查类名的工</span><br><span class=\"line\">       //作，而findLoadedClass0则是一个native方法，通过底层来查看jvm中的对象。</span><br><span class=\"line\">\tClass c = findLoadedClass(name);</span><br><span class=\"line\">\tif (c == null) &#123;//类还未加载</span><br><span class=\"line\">\t    try &#123;</span><br><span class=\"line\">\t\tif (parent != null) &#123;</span><br><span class=\"line\">            //在类还未加载的情况下，我们首先应该将加载工作交由父classloader来处理。</span><br><span class=\"line\">\t\t    c = parent.loadClass(name, false);</span><br><span class=\"line\">\t\t&#125; else &#123;</span><br><span class=\"line\">                    //返回一个由bootstrap class loader加载的类，如果不存在就返回null</span><br><span class=\"line\">\t\t    c = findBootstrapClassOrNull(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125; catch (ClassNotFoundException e) &#123;</span><br><span class=\"line\">                // ClassNotFoundException thrown if class not found</span><br><span class=\"line\"></span><br><span class=\"line\">                // from the non-null parent class loader</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">            if (c == null) &#123;</span><br><span class=\"line\">\t        // If still not found, then invoke findClass in order</span><br><span class=\"line\">\t        // to find the class.</span><br><span class=\"line\">\t        c = findClass(name);//这里是我们的入手点，也就是指定我们自己的类加载实现</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tif (resolve) &#123;</span><br><span class=\"line\">\t    resolveClass(c);//用来做类链接操作</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\treturn c;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n<p>从上面的方法也看出我们在实现自己的加载器的时候，不要覆盖locaClass方法，而是<strong>重写findClass()</strong>，这样能保证双亲委派模型，同时也实现了自己的方法</p>\n<h3 id=\"为什么要使用双亲委托这种模型呢？\"><a href=\"#为什么要使用双亲委托这种模型呢？\" class=\"headerlink\" title=\"为什么要使用双亲委托这种模型呢？\"></a>为什么要使用双亲委托这种模型呢？</h3><ol>\n<li>节约系统资源： 因为这样可以避免重复加载，当父亲已经加载了该类的时候，就没有必要子ClassLoader再加载一次</li>\n<li>保证Java核心库的类型安全: 我们试想一下，如果不使用这种委托模式，那我们就可以随时使用自定义的String来动态替代java核心api中定义的类型，这样会存在非常大的安全隐患，而双亲委托的方式，就可以避免这种情况，因为String已经在启动时就被引导类加载器（Bootstrcp ClassLoader）加载，所以用户自定义的ClassLoader永远也无法加载一个自己写的String，除非你改变JDK中ClassLoader搜索类的默认算法。</li>\n</ol>\n<h2 id=\"自定义加载器\"><a href=\"#自定义加载器\" class=\"headerlink\" title=\"自定义加载器\"></a>自定义加载器</h2><p>既然JVM已经提供了默认的类加载器，为什么还要定义自已的类加载器呢？</p>\n<p>因为Java中提供的默认ClassLoader，只加载指定目录下的jar和class，如果我们想加载其它位置的类或jar时，比如：我要加载网络上的一个class文件，通过动态加载到内存之后，要调用这个类中的方法实现业务逻辑。在这样的情况下，默认的ClassLoader就不能满足我们的需求了，所以需要定义自己的ClassLoader</p>\n<h3 id=\"定义自已的类加载器分为两步：\"><a href=\"#定义自已的类加载器分为两步：\" class=\"headerlink\" title=\"定义自已的类加载器分为两步：\"></a>定义自已的类加载器分为两步：</h3><ol>\n<li>继承java.lang.ClassLoader</li>\n<li>重写父类的findClass方法</li>\n</ol>\n<h3 id=\"示例\"><a href=\"#示例\" class=\"headerlink\" title=\"示例\"></a>示例</h3><p>很简单的两个类，方法中打印出各自的类加载器<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class LoaderClass &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void loader()&#123;</span><br><span class=\"line\">        System.out.println(&quot;LoaderClass:&quot;+this.getClass().getClassLoader());</span><br><span class=\"line\">        LoaderClass1 class1 = new LoaderClass1();</span><br><span class=\"line\">        class1.loader();</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">public class LoaderClass1 &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public void loader() &#123;</span><br><span class=\"line\">        System.out.println(this.getClass().getName() + &quot; loader:&quot;+this.getClass().getClassLoader());</span><br><span class=\"line\"></span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>自定义加载器</p>\n<ol>\n<li>重写findClass方法，从class文件加载</li>\n<li>通过defineClass从bytes构建class</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class MyClassLoader extends ClassLoader &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    protected Class&lt;?&gt; findClass(String name) throws ClassNotFoundException &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">        String root = &quot;d:/&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">        byte[] bytes = null;</span><br><span class=\"line\">        try &#123;</span><br><span class=\"line\">            //路径改到根目录下</span><br><span class=\"line\">            String file = root + name.substring(name.lastIndexOf(&quot;.&quot;)+1) + &quot;.class&quot;;</span><br><span class=\"line\">            InputStream ins = new FileInputStream(file);</span><br><span class=\"line\">            ByteArrayOutputStream baos = new ByteArrayOutputStream();</span><br><span class=\"line\">            int bufferSize = 1024;</span><br><span class=\"line\">            byte[] buffer = new byte[bufferSize];</span><br><span class=\"line\">            int length = 0;</span><br><span class=\"line\">            while ((length = ins.read(buffer)) != -1) &#123;</span><br><span class=\"line\">                baos.write(buffer, 0, length);</span><br><span class=\"line\">            &#125;</span><br><span class=\"line\">            bytes = baos.toByteArray();</span><br><span class=\"line\"></span><br><span class=\"line\">            ins.close();</span><br><span class=\"line\">        &#125; catch (Exception e) &#123;</span><br><span class=\"line\">            e.printStackTrace();</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        return defineClass(name, bytes, 0, bytes.length);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>测试类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class ClassLoaderTest &#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    public static void main(String[]args) throws Exception &#123;</span><br><span class=\"line\">        ClassLoaderTest test = new ClassLoaderTest();</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.getClass().getClassLoader());//输出sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.getClass().getClassLoader().getParent());//输出sun.misc.Launcher$ExtClassLoader</span><br><span class=\"line\"></span><br><span class=\"line\">        System.out.println(test.getClass().getClassLoader().getParent().getParent());//输出null</span><br><span class=\"line\"></span><br><span class=\"line\">        //=====测试重复加载，类路径中LoaderClass.class存在=================</span><br><span class=\"line\">        //======虽然指定了classloader，但依然输出的是LoaderClass:sun.misc.Launcher$AppClassLoader</span><br><span class=\"line\">        //==删除类路径下的LoaderClass.class,才会输出LoaderClass:com.jack.classloader.MyClassLoader</span><br><span class=\"line\">        //并且loaderclass中创建的对象类加载器也是MyClassLoader</span><br><span class=\"line\">        MyClassLoader classLoader = new MyClassLoader();</span><br><span class=\"line\">        Class&lt;?&gt; loadClass = Class.forName(&quot;com.jack.classloader.LoaderClass&quot;, true, classLoader);</span><br><span class=\"line\">        Method startMethod = loadClass.getMethod(&quot;loader&quot;);</span><br><span class=\"line\">        startMethod.invoke(loadClass.newInstance());</span><br><span class=\"line\"></span><br><span class=\"line\">        //===当类加载器不一样时，两个class不相等</span><br><span class=\"line\">        MyClassLoader classLoader1 = new MyClassLoader();</span><br><span class=\"line\">        Class&lt;?&gt; loadClass1 = Class.forName(&quot;com.jack.classloader.LoaderClass&quot;, true, classLoader1);</span><br><span class=\"line\">        System.out.println(loadClass.equals(loadClass1));//输出false</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"参考资料\"><a href=\"#参考资料\" class=\"headerlink\" title=\"参考资料\"></a>参考资料</h1><p><a href=\"https://blog.csdn.net/jiyiqinlovexx/article/details/51090751\" target=\"_blank\" rel=\"noopener\">class加载时机及两种显示加载的区别</a></p>\n<p><a href=\"https://www.cnblogs.com/hunterCecil/p/6379197.html\" target=\"_blank\" rel=\"noopener\">JVM类加载机制—类加载的过程</a></p>\n<p><a href=\"https://blog.csdn.net/w425006762/article/details/50452469\" target=\"_blank\" rel=\"noopener\"><init>和<cinit></cinit></init></a></p>\n<p><a href=\"https://www.jianshu.com/p/0b1dba1a1e95\" target=\"_blank\" rel=\"noopener\">类加载原理分析&amp;动态加载Jar/Dex</a></p>\n<p><a href=\"https://blog.csdn.net/mweibiao/article/details/79516708\" target=\"_blank\" rel=\"noopener\">java类的主动使用/被动使用</a></p>\n"},{"title":"自定义类加载器","author":"朱兴生","translate_title":"custom-class-loader","date":"2018-10-10T13:29:36.000Z","_content":"# 1、为什么需要自定义类加载器\n1. 在[《类加载器》](https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg)中讲的，默认类加载器只能加载固定路径下的class，如果有特定路径下的class，需要自定义\n2. 安全性：系统自身需要一些jar，class，如果业务类代码中也有相同的class，破坏系统，类似双亲委托安全性\n\n可以看看tomcat自定义类加载器的原因，别的就大同小异了\n```\na)、要保证部署在tomcat上的每个应用依赖的类库相互独立，不受影响。\nb)、由于tomcat是采用java语言编写的，它自身也有类库依赖，为了安全考虑，tomcat使用的类库要与部署的应用的类库相互独立。\nc)、有些类库tomcat与部署的应用可以共享，比如说servlet-api，使用maven编写web程序时，servlet-api的范围是provided，\n表示打包时不打包这个依赖，因为我们都知道服务器已经有这个依赖了。\nd)、部署的应用之间的类库可以共享。这听起来好像与第一点相互矛盾，但其实这很合理，类被类加载器加载到虚拟机后，\n会生成代表该类的class对象存放在永久代区域，这时候如果有大量的应用使用spring来管理，如果spring类库不能共享，\n那每个应用的spring类库都会被加载一次，将会是很大的资源浪费。\n\n```\n\n# 2、自定义加载器\n这儿主要说下我司的自定义类加载器；更复杂点的可以看看tomcat的类加载机制\n\n为什么需要自定义类加载器？这可以参考章节1的答案\n\n主要在于应用与基础平台的隔离，相对应用:可以有更大技术选型自由度,不用考虑基础平台的jar包版本、相对平台：更可靠安全，不被应用class影响\n\n## 类加载器结构\n虽然JAVA使用了类加载的委派机制，但并没严格要求开发者必须遵守该机制，我们可以打破这种\"双亲委派\"机制\n\n### 目录结构\n\n目录 | 说明\n---|---\n/servicesdir | 业务实现jar包\n/thirddir    | 业务依赖jar包\n/platformdir | 平台依赖jar包\n\n### 类加载器\n\n- 1.PlatformClassLoader平台加载器\n    - 1.1.加载/platformdir下的jar包\n    - 1.2.在加载时，采用了默认的“双亲委派”\n- 2.AppClassLoader应用加载器\n    - 2.1.加载/servicesdir,/thirddir下的jar\n    - 2.2.该类加载器一定程度上打破了默认的“双亲委派”\n        - 2.2.0.loadClass方法中，如果本加载器没有load到对应的类，则会检查该类是否处于平台类加载器白名单中：\n        - 2.2.1.如果处于白名单中，则委派PlatformClassLoader加载\n        - 2.2.2.否则，通过super.loadClass(String,boolean)走默认的双亲委派\n\n此处白名单类：平台核心类，不能被同名业务类干扰\n\n## 预加载\n[《类加载器》](https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg)中说过，程序启动后，并不会加载所有类，在运行中实现到时，才会去加载。这儿就有性能损耗。\n\n按类加载规则，一个类只加载一次\n\n可以测试一下，加载需要的损耗\n```\n/**\n * 类加载时间性能测试\n *\n * 看一下类加载需要消耗的时间\n * Created by Jack on 2018/10/8.\n */\npublic class ClassLoaderTest1 {\n    public static void main(String[] args) throws SQLException {\n        long s = System.nanoTime();\n\n        LoaderClass loaderClass = new LoaderClass();\n        long e = System.nanoTime();\n        //第一次时间\n        System.out.println(e - s);\n        e = System.nanoTime();\n        //第二次实例，但已经加载过，不再需要加载\n        LoaderClass loaderClass1 = new LoaderClass();\n        long e1 = System.nanoTime();\n        //第二次时间\n        System.out.println(e1 - e);\n    }\n}\n//输出\n2409737\n396\n```\n可以从输出看到性能损耗是不小的，这部分损耗可以通过预加载来消除\n\n随着程序运行时间越久，被触发的业务越多，那加载到的业务类越多。\n\n### 预加载类的逻辑\n\nClassWarmUp\n\n- 1.在classloader中loadClass时，把className加入到LinkedBlockingDeque中\n- 2.为了性能，异步把deque中的class写入到文件中，需要起一个后台线程\n    - 2.1 后台线程，从deque中取出class，写入到文件中\n- 3.下次从文件中预先加载class\n\n\n## 打包\n\n对于/servicesdir 与 /thirddir 都好处理，但对于platformdir是怎么打包的呢？毕竟在开发时，只是引入一个平台基础jar就行\n\n\n## 使用\n有了自定义类加载器，在应用主函数中，就不能直接new了，不然就会使用AppClassLoader\n\n所以需要使用反射机制\n\n```\nClass<?> loadClass = platformClassLoader.loadClass(\"com.jack.Start\");\nMethod startMethod = loadClass.getMethod(\"startUp\");\nstartMethod.invoke(loadClass);\n```\n这样，通过Start加载的类也会通过platformClassLoader去加载\n\n创建springcontext也一样,这儿还需使用到Thread.currentThread().getContextClassLoader()【下面有详解】\n```\nClassLoader currentThreadLoader = Thread.currentThread().getContextClassLoader();\nThread.currentThread().setContextClassLoader(appClassLoader);\n\nClass<?> contextClass = appClassLoader\n\t\t\t\t.loadClass(\"org.springframework.context.support.FileSystemXmlApplicationContext\");\nClass<?>[] parameterTypes = new Class[] { String[].class };\nConstructor<?> constructor = contextClass.getConstructor(parameterTypes);\nreturn constructor.newInstance(new Object[] { xmlPaths.toArray(new String[0]) });\n\n\n// switch back the thread context classloader\nThread.currentThread().setContextClassLoader(currentThreadLoader);\n```\n\n# 3、反常\n\"双亲委派\"模型有优点，也有力不从心的地方\n\n> Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。\n  \n> 这些 SPI 的接口由 Java 核心库来提供，而这些 SPI 的实现代码则是作为 Java 应用所依赖的 jar 包被包含进类路径（CLASSPATH）里。SPI接口中的代码经常需要加载具体的实现类。那么问题来了，SPI的接口是Java核心库的一部分，是由启动类加载器(Bootstrap Classloader)来加载的；SPI的实现类是由系统类加载器(System ClassLoader)来加载的。引导类加载器是无法找到 SPI 的实现类的，因为依照双亲委派模型，BootstrapClassloader无法委派AppClassLoader来加载类。\n> 而线程上下文类加载器破坏了“双亲委派模型”，可以在执行线程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器。\n\n## 场景：\n\n1. 当高层提供了统一的接口让低层去实现，同时又要在高层加载（或者实例化）低层的类时，就必须要通过线程上下文类加载器来帮助高层的ClassLoader找到并加载该类\n2. 当使用本类托管类加载，然而加载本类的ClassLoader未知时，为了隔离不同的调用者，可以取调用者各自的线程上下文类加载器代为托管\n\n## 解决方案：\n\n从jdk1.2开始引入的，类Thread中的getContextClassLoader()与setContextClassLoader(ClassLoader c1)，分别用来获取和设置类加载器\n\n一般使用模式：获取-使用-还原\n\n```\nClassLoader classLoader = Thread.currentThread().getContextClassLoader(); \ntry{    \n    Thread.currentThread().setContextClassLoader(targetTccl);    \n    excute(); \n} finally { \n    Thread.currentThread().setContextClassLoader(classLoader); \n}\n\n```\n## jdbc\n以jdbc看下场景1的情况\n\n```\nClass.forName(\"com.mysql.jdbc.Driver\")\nString url = \"jdbc:mysql://localhost:3306/testdb\";    \n// 通过java库获取数据库连接\nConnection conn = java.sql.DriverManager.getConnection(url, \"name\", \"password\");\n```\n\n- 1.Class.forName(\"com.mysql.jdbc.Driver\"); 在com.mysql.jdbc.Driver中\n```\npublic class Driver extends NonRegisteringDriver implements java.sql.Driver {\n\tstatic {\n\t\ttry {\n\t\t\tjava.sql.DriverManager.registerDriver(new Driver());\n\t\t} catch (SQLException E) {\n\t\t\tthrow new RuntimeException(\"Can't register driver!\");\n\t\t}\n\t}\n \n\tpublic Driver() throws SQLException {\n\t\t// Required for Class.forName().newInstance()\n\t}\n}\n\n```\n通过Class.forName()，主要就是执行初始化static代码块，也就是向DriverManager注册Driver\n\n此时：应用类、Driver是由AppClassLoader加载，但由于双亲委派java.sql.DriverManager是由BootstrapClassLoader加载\n\n- 2.java.sql.DriverManager.getConnection 获取连接\n```\nprivate static Connection getConnection(\n\tString url, java.util.Properties info, ClassLoader callerCL) throws SQLException {\n\tjava.util.Vector drivers = null;\n        \n\tsynchronized(DriverManager.class) {\t \n\t  if(callerCL == null) {\n\t      callerCL = Thread.currentThread().getContextClassLoader();\n\t   }    \n\t} \n\t \n\tif(url == null) {\n\t    throw new SQLException(\"The url cannot be null\", \"08001\");\n\t}\n    \n\tprintln(\"DriverManager.getConnection(\\\"\" + url + \"\\\")\");\n    \n\tif (!initialized) {\n\t    initialize();\n\t}\n \n\tsynchronized (DriverManager.class){ \n\t    drivers = readDrivers;  \n        }\n \n\tSQLException reason = null;\n\tfor (int i = 0; i < drivers.size(); i++) {\n\t    DriverInfo di = (DriverInfo)drivers.elementAt(i);\n  \n\t    if ( getCallerClass(callerCL, di.driverClassName ) != di.driverClass ) {\n\t\tprintln(\"    skipping: \" + di);\n\t\tcontinue;\n\t    }\n\t    try {\n\t\tprintln(\"    trying \" + di);\n\t\tConnection result = di.driver.connect(url, info);\n\t\tif (result != null) {\n\t\t    // Success!\n\t\t    println(\"getConnection returning \" + di);\n\t\t    return (result);\n\t\t}\n\t    } catch (SQLException ex) {\n\t\tif (reason == null) {\n\t\t    reason = ex;\n\t\t}\n\t    }\n\t}\n \n\tif (reason != null)    {\n\t    println(\"getConnection failed: \" + reason);\n\t    throw reason;\n\t}\n    \n\tprintln(\"getConnection: no suitable driver found for \"+ url);\n\tthrow new SQLException(\"No suitable driver found for \"+ url, \"08001\");\n    }\n\n\nprivate static Class getCallerClass(ClassLoader callerClassLoader, \n\t\t\t\t\tString driverClassName) {\n\tClass callerC = null;\n \n\ttry {\n\t    callerC = Class.forName(driverClassName, true, callerClassLoader);\n\t}\n\tcatch (Exception ex) {\n\t    callerC = null;           // being very careful \n\t}\n \n\treturn callerC;\n    }\n\n```\n\n这其中有两行代码：\n```\ncallerCL = Thread.currentThread().getContextClassLoader();\n\ncallerC = Class.forName(driverClassName, true, callerClassLoader);\n\n```\n这儿是取线程上下文中的classloader，也就是AppClassLoader；如果不取此classloader，那么Class.forName(driverClassName)就是使用DriverManager的BootstrapClassLoader加载，那必然是加载不到，这也就是父层类加载器加载不了低层类。\n\n还有个问题，为什么在应用程序中已经加载过Driver，到了getConnection()又要再加载，还得通过Thread.currentThread().getContextClassLoader()？\n\n其实在getConnection()中，只是对比class是否是同一个，像tomcat那样，各个应用都有自己的mysql-driver的jar包，就只能通过classloader来区分，因为class是不是相同需要classname+classloader组合鉴别\n\n## spring\n对于场景2的问题\n\n> 如果有 10 个 Web 应用程序都用到了spring的话，可以把Spring的jar包放到 common 或 shared 目录下让这些程序共享。Spring 的作用是管理每个web应用程序的bean，getBean时自然要能访问到应用程序的类，而用户的程序显然是放在 /WebApp/WEB-INF 目录中的（由 WebAppClassLoader 加载），那么在 CommonClassLoader 或 SharedClassLoader 中的 Spring 容器如何去加载并不在其加载范围的用户程序（/WebApp/WEB-INF/）中的Class呢？\n\n> 答案呼之欲出：spring根本不会去管自己被放在哪里，它统统使用线程上下文加载器来加载类，而线程上下文加载器默认设置为了WebAppClassLoader，也就是说哪个WebApp应用调用了spring，spring就去取该应用自己的WebAppClassLoader来加载bean\n\norg.springframework.web.context.ContextLoader类\n```\npublic WebApplicationContext initWebApplicationContext(ServletContext servletContext) {\n\t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \" +\n\t\t\t\t\t\"check whether you have multiple ContextLoader* definitions in your web.xml!\");\n\t\t}\n\n\t\tLog logger = LogFactory.getLog(ContextLoader.class);\n\t\tservletContext.log(\"Initializing Spring root WebApplicationContext\");\n\t\tif (logger.isInfoEnabled()) {\n\t\t\tlogger.info(\"Root WebApplicationContext: initialization started\");\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\ttry {\n\t\t\t// Determine parent for root web application context, if any.\n\t\t\tApplicationContext parent = loadParentContext(servletContext);\n\n\t\t\t// Store context in local instance variable, to guarantee that\n\t\t\t// it is available on ServletContext shutdown.\n\t\t\tthis.context = createWebApplicationContext(servletContext, parent);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);\n\n\t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();\n\t\t\tif (ccl == ContextLoader.class.getClassLoader()) {\n\t\t\t\tcurrentContext = this.context;\n\t\t\t}\n\t\t\telse if (ccl != null) {\n\t\t\t\tcurrentContextPerThread.put(ccl, this.context);\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Published root WebApplicationContext as ServletContext attribute with name [\" +\n\t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + \"]\");\n\t\t\t}\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n\t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \" + elapsedTime + \" ms\");\n\t\t\t}\n\n\t\t\treturn this.context;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tlogger.error(\"Context initialization failed\", ex);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Error err) {\n\t\t\tlogger.error(\"Context initialization failed\", err);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);\n\t\t\tthrow err;\n\t\t}\n\t}\n```\n关键代码：\n```\n// 获取线程上下文类加载器，默认为WebAppClassLoader\nClassLoader ccl = Thread.currentThread().getContextClassLoader();\n// 如果spring的jar包放在每个webapp自己的目录中\n// 此时线程上下文类加载器会与本类的类加载器（加载spring的）相同，都是WebAppClassLoader\nif (ccl == ContextLoader.class.getClassLoader()) {\n    currentContext = this.context;\n}\nelse if (ccl != null) {\n    // 如果不同，也就是上面说的那个问题的情况，那么用一个map把刚才创建的WebApplicationContext及对应的WebAppClassLoader存下来\n    // 一个webapp对应一个记录，后续调用时直接根据WebAppClassLoader来取出\n    currentContextPerThread.put(ccl, this.context);\n}\n\n```\n这样做的目的在于当通过ConetxtLoader的静态方法获取context的时候，能保证获取的是当前web application的context.实际上就是对于tomcat下面的任何一个线程，我们都能很方便的找出这个线程对应的webapplicationContext.于是在一些不能方便获取servletContext的场合，我们可以通过当前线程获取webapplicationContext.\n```\npublic static WebApplicationContext getCurrentWebApplicationContext() {\n\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();\n\t\tif (ccl != null) {\n\t\t\tWebApplicationContext ccpt = currentContextPerThread.get(ccl);\n\t\t\tif (ccpt != null) {\n\t\t\t\treturn ccpt;\n\t\t\t}\n\t\t}\n\t\treturn currentContext;\n\t}\n```\n\n## 总结\n简而言之就是ContextClassLoader默认存放了AppClassLoader的引用，由于它是在运行时被放在了线程中，所以不管当前程序处于何处（BootstrapClassLoader或是ExtClassLoader等），在任何需要的时候都可以用Thread.currentThread().getContextClassLoader()取出应用程序类加载器来完成需要的操作\n\n\n\n# 4、参考资料\n\n[以jdbc为例搞清contextClassLoader](https://blog.csdn.net/liweisnake/article/details/8795976)","source":"_posts/自定义类加载器.md","raw":"title: 自定义类加载器\nauthor: 朱兴生\ntranslate_title: custom-class-loader\ndate: 2018-10-10 21:29:36\ntags:\n---\n# 1、为什么需要自定义类加载器\n1. 在[《类加载器》](https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg)中讲的，默认类加载器只能加载固定路径下的class，如果有特定路径下的class，需要自定义\n2. 安全性：系统自身需要一些jar，class，如果业务类代码中也有相同的class，破坏系统，类似双亲委托安全性\n\n可以看看tomcat自定义类加载器的原因，别的就大同小异了\n```\na)、要保证部署在tomcat上的每个应用依赖的类库相互独立，不受影响。\nb)、由于tomcat是采用java语言编写的，它自身也有类库依赖，为了安全考虑，tomcat使用的类库要与部署的应用的类库相互独立。\nc)、有些类库tomcat与部署的应用可以共享，比如说servlet-api，使用maven编写web程序时，servlet-api的范围是provided，\n表示打包时不打包这个依赖，因为我们都知道服务器已经有这个依赖了。\nd)、部署的应用之间的类库可以共享。这听起来好像与第一点相互矛盾，但其实这很合理，类被类加载器加载到虚拟机后，\n会生成代表该类的class对象存放在永久代区域，这时候如果有大量的应用使用spring来管理，如果spring类库不能共享，\n那每个应用的spring类库都会被加载一次，将会是很大的资源浪费。\n\n```\n\n# 2、自定义加载器\n这儿主要说下我司的自定义类加载器；更复杂点的可以看看tomcat的类加载机制\n\n为什么需要自定义类加载器？这可以参考章节1的答案\n\n主要在于应用与基础平台的隔离，相对应用:可以有更大技术选型自由度,不用考虑基础平台的jar包版本、相对平台：更可靠安全，不被应用class影响\n\n## 类加载器结构\n虽然JAVA使用了类加载的委派机制，但并没严格要求开发者必须遵守该机制，我们可以打破这种\"双亲委派\"机制\n\n### 目录结构\n\n目录 | 说明\n---|---\n/servicesdir | 业务实现jar包\n/thirddir    | 业务依赖jar包\n/platformdir | 平台依赖jar包\n\n### 类加载器\n\n- 1.PlatformClassLoader平台加载器\n    - 1.1.加载/platformdir下的jar包\n    - 1.2.在加载时，采用了默认的“双亲委派”\n- 2.AppClassLoader应用加载器\n    - 2.1.加载/servicesdir,/thirddir下的jar\n    - 2.2.该类加载器一定程度上打破了默认的“双亲委派”\n        - 2.2.0.loadClass方法中，如果本加载器没有load到对应的类，则会检查该类是否处于平台类加载器白名单中：\n        - 2.2.1.如果处于白名单中，则委派PlatformClassLoader加载\n        - 2.2.2.否则，通过super.loadClass(String,boolean)走默认的双亲委派\n\n此处白名单类：平台核心类，不能被同名业务类干扰\n\n## 预加载\n[《类加载器》](https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg)中说过，程序启动后，并不会加载所有类，在运行中实现到时，才会去加载。这儿就有性能损耗。\n\n按类加载规则，一个类只加载一次\n\n可以测试一下，加载需要的损耗\n```\n/**\n * 类加载时间性能测试\n *\n * 看一下类加载需要消耗的时间\n * Created by Jack on 2018/10/8.\n */\npublic class ClassLoaderTest1 {\n    public static void main(String[] args) throws SQLException {\n        long s = System.nanoTime();\n\n        LoaderClass loaderClass = new LoaderClass();\n        long e = System.nanoTime();\n        //第一次时间\n        System.out.println(e - s);\n        e = System.nanoTime();\n        //第二次实例，但已经加载过，不再需要加载\n        LoaderClass loaderClass1 = new LoaderClass();\n        long e1 = System.nanoTime();\n        //第二次时间\n        System.out.println(e1 - e);\n    }\n}\n//输出\n2409737\n396\n```\n可以从输出看到性能损耗是不小的，这部分损耗可以通过预加载来消除\n\n随着程序运行时间越久，被触发的业务越多，那加载到的业务类越多。\n\n### 预加载类的逻辑\n\nClassWarmUp\n\n- 1.在classloader中loadClass时，把className加入到LinkedBlockingDeque中\n- 2.为了性能，异步把deque中的class写入到文件中，需要起一个后台线程\n    - 2.1 后台线程，从deque中取出class，写入到文件中\n- 3.下次从文件中预先加载class\n\n\n## 打包\n\n对于/servicesdir 与 /thirddir 都好处理，但对于platformdir是怎么打包的呢？毕竟在开发时，只是引入一个平台基础jar就行\n\n\n## 使用\n有了自定义类加载器，在应用主函数中，就不能直接new了，不然就会使用AppClassLoader\n\n所以需要使用反射机制\n\n```\nClass<?> loadClass = platformClassLoader.loadClass(\"com.jack.Start\");\nMethod startMethod = loadClass.getMethod(\"startUp\");\nstartMethod.invoke(loadClass);\n```\n这样，通过Start加载的类也会通过platformClassLoader去加载\n\n创建springcontext也一样,这儿还需使用到Thread.currentThread().getContextClassLoader()【下面有详解】\n```\nClassLoader currentThreadLoader = Thread.currentThread().getContextClassLoader();\nThread.currentThread().setContextClassLoader(appClassLoader);\n\nClass<?> contextClass = appClassLoader\n\t\t\t\t.loadClass(\"org.springframework.context.support.FileSystemXmlApplicationContext\");\nClass<?>[] parameterTypes = new Class[] { String[].class };\nConstructor<?> constructor = contextClass.getConstructor(parameterTypes);\nreturn constructor.newInstance(new Object[] { xmlPaths.toArray(new String[0]) });\n\n\n// switch back the thread context classloader\nThread.currentThread().setContextClassLoader(currentThreadLoader);\n```\n\n# 3、反常\n\"双亲委派\"模型有优点，也有力不从心的地方\n\n> Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。\n  \n> 这些 SPI 的接口由 Java 核心库来提供，而这些 SPI 的实现代码则是作为 Java 应用所依赖的 jar 包被包含进类路径（CLASSPATH）里。SPI接口中的代码经常需要加载具体的实现类。那么问题来了，SPI的接口是Java核心库的一部分，是由启动类加载器(Bootstrap Classloader)来加载的；SPI的实现类是由系统类加载器(System ClassLoader)来加载的。引导类加载器是无法找到 SPI 的实现类的，因为依照双亲委派模型，BootstrapClassloader无法委派AppClassLoader来加载类。\n> 而线程上下文类加载器破坏了“双亲委派模型”，可以在执行线程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器。\n\n## 场景：\n\n1. 当高层提供了统一的接口让低层去实现，同时又要在高层加载（或者实例化）低层的类时，就必须要通过线程上下文类加载器来帮助高层的ClassLoader找到并加载该类\n2. 当使用本类托管类加载，然而加载本类的ClassLoader未知时，为了隔离不同的调用者，可以取调用者各自的线程上下文类加载器代为托管\n\n## 解决方案：\n\n从jdk1.2开始引入的，类Thread中的getContextClassLoader()与setContextClassLoader(ClassLoader c1)，分别用来获取和设置类加载器\n\n一般使用模式：获取-使用-还原\n\n```\nClassLoader classLoader = Thread.currentThread().getContextClassLoader(); \ntry{    \n    Thread.currentThread().setContextClassLoader(targetTccl);    \n    excute(); \n} finally { \n    Thread.currentThread().setContextClassLoader(classLoader); \n}\n\n```\n## jdbc\n以jdbc看下场景1的情况\n\n```\nClass.forName(\"com.mysql.jdbc.Driver\")\nString url = \"jdbc:mysql://localhost:3306/testdb\";    \n// 通过java库获取数据库连接\nConnection conn = java.sql.DriverManager.getConnection(url, \"name\", \"password\");\n```\n\n- 1.Class.forName(\"com.mysql.jdbc.Driver\"); 在com.mysql.jdbc.Driver中\n```\npublic class Driver extends NonRegisteringDriver implements java.sql.Driver {\n\tstatic {\n\t\ttry {\n\t\t\tjava.sql.DriverManager.registerDriver(new Driver());\n\t\t} catch (SQLException E) {\n\t\t\tthrow new RuntimeException(\"Can't register driver!\");\n\t\t}\n\t}\n \n\tpublic Driver() throws SQLException {\n\t\t// Required for Class.forName().newInstance()\n\t}\n}\n\n```\n通过Class.forName()，主要就是执行初始化static代码块，也就是向DriverManager注册Driver\n\n此时：应用类、Driver是由AppClassLoader加载，但由于双亲委派java.sql.DriverManager是由BootstrapClassLoader加载\n\n- 2.java.sql.DriverManager.getConnection 获取连接\n```\nprivate static Connection getConnection(\n\tString url, java.util.Properties info, ClassLoader callerCL) throws SQLException {\n\tjava.util.Vector drivers = null;\n        \n\tsynchronized(DriverManager.class) {\t \n\t  if(callerCL == null) {\n\t      callerCL = Thread.currentThread().getContextClassLoader();\n\t   }    \n\t} \n\t \n\tif(url == null) {\n\t    throw new SQLException(\"The url cannot be null\", \"08001\");\n\t}\n    \n\tprintln(\"DriverManager.getConnection(\\\"\" + url + \"\\\")\");\n    \n\tif (!initialized) {\n\t    initialize();\n\t}\n \n\tsynchronized (DriverManager.class){ \n\t    drivers = readDrivers;  \n        }\n \n\tSQLException reason = null;\n\tfor (int i = 0; i < drivers.size(); i++) {\n\t    DriverInfo di = (DriverInfo)drivers.elementAt(i);\n  \n\t    if ( getCallerClass(callerCL, di.driverClassName ) != di.driverClass ) {\n\t\tprintln(\"    skipping: \" + di);\n\t\tcontinue;\n\t    }\n\t    try {\n\t\tprintln(\"    trying \" + di);\n\t\tConnection result = di.driver.connect(url, info);\n\t\tif (result != null) {\n\t\t    // Success!\n\t\t    println(\"getConnection returning \" + di);\n\t\t    return (result);\n\t\t}\n\t    } catch (SQLException ex) {\n\t\tif (reason == null) {\n\t\t    reason = ex;\n\t\t}\n\t    }\n\t}\n \n\tif (reason != null)    {\n\t    println(\"getConnection failed: \" + reason);\n\t    throw reason;\n\t}\n    \n\tprintln(\"getConnection: no suitable driver found for \"+ url);\n\tthrow new SQLException(\"No suitable driver found for \"+ url, \"08001\");\n    }\n\n\nprivate static Class getCallerClass(ClassLoader callerClassLoader, \n\t\t\t\t\tString driverClassName) {\n\tClass callerC = null;\n \n\ttry {\n\t    callerC = Class.forName(driverClassName, true, callerClassLoader);\n\t}\n\tcatch (Exception ex) {\n\t    callerC = null;           // being very careful \n\t}\n \n\treturn callerC;\n    }\n\n```\n\n这其中有两行代码：\n```\ncallerCL = Thread.currentThread().getContextClassLoader();\n\ncallerC = Class.forName(driverClassName, true, callerClassLoader);\n\n```\n这儿是取线程上下文中的classloader，也就是AppClassLoader；如果不取此classloader，那么Class.forName(driverClassName)就是使用DriverManager的BootstrapClassLoader加载，那必然是加载不到，这也就是父层类加载器加载不了低层类。\n\n还有个问题，为什么在应用程序中已经加载过Driver，到了getConnection()又要再加载，还得通过Thread.currentThread().getContextClassLoader()？\n\n其实在getConnection()中，只是对比class是否是同一个，像tomcat那样，各个应用都有自己的mysql-driver的jar包，就只能通过classloader来区分，因为class是不是相同需要classname+classloader组合鉴别\n\n## spring\n对于场景2的问题\n\n> 如果有 10 个 Web 应用程序都用到了spring的话，可以把Spring的jar包放到 common 或 shared 目录下让这些程序共享。Spring 的作用是管理每个web应用程序的bean，getBean时自然要能访问到应用程序的类，而用户的程序显然是放在 /WebApp/WEB-INF 目录中的（由 WebAppClassLoader 加载），那么在 CommonClassLoader 或 SharedClassLoader 中的 Spring 容器如何去加载并不在其加载范围的用户程序（/WebApp/WEB-INF/）中的Class呢？\n\n> 答案呼之欲出：spring根本不会去管自己被放在哪里，它统统使用线程上下文加载器来加载类，而线程上下文加载器默认设置为了WebAppClassLoader，也就是说哪个WebApp应用调用了spring，spring就去取该应用自己的WebAppClassLoader来加载bean\n\norg.springframework.web.context.ContextLoader类\n```\npublic WebApplicationContext initWebApplicationContext(ServletContext servletContext) {\n\t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) {\n\t\t\tthrow new IllegalStateException(\n\t\t\t\t\t\"Cannot initialize context because there is already a root application context present - \" +\n\t\t\t\t\t\"check whether you have multiple ContextLoader* definitions in your web.xml!\");\n\t\t}\n\n\t\tLog logger = LogFactory.getLog(ContextLoader.class);\n\t\tservletContext.log(\"Initializing Spring root WebApplicationContext\");\n\t\tif (logger.isInfoEnabled()) {\n\t\t\tlogger.info(\"Root WebApplicationContext: initialization started\");\n\t\t}\n\t\tlong startTime = System.currentTimeMillis();\n\n\t\ttry {\n\t\t\t// Determine parent for root web application context, if any.\n\t\t\tApplicationContext parent = loadParentContext(servletContext);\n\n\t\t\t// Store context in local instance variable, to guarantee that\n\t\t\t// it is available on ServletContext shutdown.\n\t\t\tthis.context = createWebApplicationContext(servletContext, parent);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);\n\n\t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();\n\t\t\tif (ccl == ContextLoader.class.getClassLoader()) {\n\t\t\t\tcurrentContext = this.context;\n\t\t\t}\n\t\t\telse if (ccl != null) {\n\t\t\t\tcurrentContextPerThread.put(ccl, this.context);\n\t\t\t}\n\n\t\t\tif (logger.isDebugEnabled()) {\n\t\t\t\tlogger.debug(\"Published root WebApplicationContext as ServletContext attribute with name [\" +\n\t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + \"]\");\n\t\t\t}\n\t\t\tif (logger.isInfoEnabled()) {\n\t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;\n\t\t\t\tlogger.info(\"Root WebApplicationContext: initialization completed in \" + elapsedTime + \" ms\");\n\t\t\t}\n\n\t\t\treturn this.context;\n\t\t}\n\t\tcatch (RuntimeException ex) {\n\t\t\tlogger.error(\"Context initialization failed\", ex);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);\n\t\t\tthrow ex;\n\t\t}\n\t\tcatch (Error err) {\n\t\t\tlogger.error(\"Context initialization failed\", err);\n\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);\n\t\t\tthrow err;\n\t\t}\n\t}\n```\n关键代码：\n```\n// 获取线程上下文类加载器，默认为WebAppClassLoader\nClassLoader ccl = Thread.currentThread().getContextClassLoader();\n// 如果spring的jar包放在每个webapp自己的目录中\n// 此时线程上下文类加载器会与本类的类加载器（加载spring的）相同，都是WebAppClassLoader\nif (ccl == ContextLoader.class.getClassLoader()) {\n    currentContext = this.context;\n}\nelse if (ccl != null) {\n    // 如果不同，也就是上面说的那个问题的情况，那么用一个map把刚才创建的WebApplicationContext及对应的WebAppClassLoader存下来\n    // 一个webapp对应一个记录，后续调用时直接根据WebAppClassLoader来取出\n    currentContextPerThread.put(ccl, this.context);\n}\n\n```\n这样做的目的在于当通过ConetxtLoader的静态方法获取context的时候，能保证获取的是当前web application的context.实际上就是对于tomcat下面的任何一个线程，我们都能很方便的找出这个线程对应的webapplicationContext.于是在一些不能方便获取servletContext的场合，我们可以通过当前线程获取webapplicationContext.\n```\npublic static WebApplicationContext getCurrentWebApplicationContext() {\n\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();\n\t\tif (ccl != null) {\n\t\t\tWebApplicationContext ccpt = currentContextPerThread.get(ccl);\n\t\t\tif (ccpt != null) {\n\t\t\t\treturn ccpt;\n\t\t\t}\n\t\t}\n\t\treturn currentContext;\n\t}\n```\n\n## 总结\n简而言之就是ContextClassLoader默认存放了AppClassLoader的引用，由于它是在运行时被放在了线程中，所以不管当前程序处于何处（BootstrapClassLoader或是ExtClassLoader等），在任何需要的时候都可以用Thread.currentThread().getContextClassLoader()取出应用程序类加载器来完成需要的操作\n\n\n\n# 4、参考资料\n\n[以jdbc为例搞清contextClassLoader](https://blog.csdn.net/liweisnake/article/details/8795976)","slug":"自定义类加载器","published":1,"updated":"2018-10-10T13:29:38.317Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cjn36yzze0000dkjolo9iya3f","content":"<h1 id=\"1、为什么需要自定义类加载器\"><a href=\"#1、为什么需要自定义类加载器\" class=\"headerlink\" title=\"1、为什么需要自定义类加载器\"></a>1、为什么需要自定义类加载器</h1><ol>\n<li>在<a href=\"https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg\" target=\"_blank\" rel=\"noopener\">《类加载器》</a>中讲的，默认类加载器只能加载固定路径下的class，如果有特定路径下的class，需要自定义</li>\n<li>安全性：系统自身需要一些jar，class，如果业务类代码中也有相同的class，破坏系统，类似双亲委托安全性</li>\n</ol>\n<p>可以看看tomcat自定义类加载器的原因，别的就大同小异了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a)、要保证部署在tomcat上的每个应用依赖的类库相互独立，不受影响。</span><br><span class=\"line\">b)、由于tomcat是采用java语言编写的，它自身也有类库依赖，为了安全考虑，tomcat使用的类库要与部署的应用的类库相互独立。</span><br><span class=\"line\">c)、有些类库tomcat与部署的应用可以共享，比如说servlet-api，使用maven编写web程序时，servlet-api的范围是provided，</span><br><span class=\"line\">表示打包时不打包这个依赖，因为我们都知道服务器已经有这个依赖了。</span><br><span class=\"line\">d)、部署的应用之间的类库可以共享。这听起来好像与第一点相互矛盾，但其实这很合理，类被类加载器加载到虚拟机后，</span><br><span class=\"line\">会生成代表该类的class对象存放在永久代区域，这时候如果有大量的应用使用spring来管理，如果spring类库不能共享，</span><br><span class=\"line\">那每个应用的spring类库都会被加载一次，将会是很大的资源浪费。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2、自定义加载器\"><a href=\"#2、自定义加载器\" class=\"headerlink\" title=\"2、自定义加载器\"></a>2、自定义加载器</h1><p>这儿主要说下我司的自定义类加载器；更复杂点的可以看看tomcat的类加载机制</p>\n<p>为什么需要自定义类加载器？这可以参考章节1的答案</p>\n<p>主要在于应用与基础平台的隔离，相对应用:可以有更大技术选型自由度,不用考虑基础平台的jar包版本、相对平台：更可靠安全，不被应用class影响</p>\n<h2 id=\"类加载器结构\"><a href=\"#类加载器结构\" class=\"headerlink\" title=\"类加载器结构\"></a>类加载器结构</h2><p>虽然JAVA使用了类加载的委派机制，但并没严格要求开发者必须遵守该机制，我们可以打破这种”双亲委派”机制</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/servicesdir</td>\n<td>业务实现jar包</td>\n</tr>\n<tr>\n<td>/thirddir</td>\n<td>业务依赖jar包</td>\n</tr>\n<tr>\n<td>/platformdir</td>\n<td>平台依赖jar包</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><ul>\n<li>1.PlatformClassLoader平台加载器<ul>\n<li>1.1.加载/platformdir下的jar包</li>\n<li>1.2.在加载时，采用了默认的“双亲委派”</li>\n</ul>\n</li>\n<li>2.AppClassLoader应用加载器<ul>\n<li>2.1.加载/servicesdir,/thirddir下的jar</li>\n<li>2.2.该类加载器一定程度上打破了默认的“双亲委派”<ul>\n<li>2.2.0.loadClass方法中，如果本加载器没有load到对应的类，则会检查该类是否处于平台类加载器白名单中：</li>\n<li>2.2.1.如果处于白名单中，则委派PlatformClassLoader加载</li>\n<li>2.2.2.否则，通过super.loadClass(String,boolean)走默认的双亲委派</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>此处白名单类：平台核心类，不能被同名业务类干扰</p>\n<h2 id=\"预加载\"><a href=\"#预加载\" class=\"headerlink\" title=\"预加载\"></a>预加载</h2><p><a href=\"https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg\" target=\"_blank\" rel=\"noopener\">《类加载器》</a>中说过，程序启动后，并不会加载所有类，在运行中实现到时，才会去加载。这儿就有性能损耗。</p>\n<p>按类加载规则，一个类只加载一次</p>\n<p>可以测试一下，加载需要的损耗<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 类加载时间性能测试</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 看一下类加载需要消耗的时间</span><br><span class=\"line\"> * Created by Jack on 2018/10/8.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassLoaderTest1 &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws SQLException &#123;</span><br><span class=\"line\">        long s = System.nanoTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        LoaderClass loaderClass = new LoaderClass();</span><br><span class=\"line\">        long e = System.nanoTime();</span><br><span class=\"line\">        //第一次时间</span><br><span class=\"line\">        System.out.println(e - s);</span><br><span class=\"line\">        e = System.nanoTime();</span><br><span class=\"line\">        //第二次实例，但已经加载过，不再需要加载</span><br><span class=\"line\">        LoaderClass loaderClass1 = new LoaderClass();</span><br><span class=\"line\">        long e1 = System.nanoTime();</span><br><span class=\"line\">        //第二次时间</span><br><span class=\"line\">        System.out.println(e1 - e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">2409737</span><br><span class=\"line\">396</span><br></pre></td></tr></table></figure></p>\n<p>可以从输出看到性能损耗是不小的，这部分损耗可以通过预加载来消除</p>\n<p>随着程序运行时间越久，被触发的业务越多，那加载到的业务类越多。</p>\n<h3 id=\"预加载类的逻辑\"><a href=\"#预加载类的逻辑\" class=\"headerlink\" title=\"预加载类的逻辑\"></a>预加载类的逻辑</h3><p>ClassWarmUp</p>\n<ul>\n<li>1.在classloader中loadClass时，把className加入到LinkedBlockingDeque中</li>\n<li>2.为了性能，异步把deque中的class写入到文件中，需要起一个后台线程<ul>\n<li>2.1 后台线程，从deque中取出class，写入到文件中</li>\n</ul>\n</li>\n<li>3.下次从文件中预先加载class</li>\n</ul>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>对于/servicesdir 与 /thirddir 都好处理，但对于platformdir是怎么打包的呢？毕竟在开发时，只是引入一个平台基础jar就行</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>有了自定义类加载器，在应用主函数中，就不能直接new了，不然就会使用AppClassLoader</p>\n<p>所以需要使用反射机制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; loadClass = platformClassLoader.loadClass(&quot;com.jack.Start&quot;);</span><br><span class=\"line\">Method startMethod = loadClass.getMethod(&quot;startUp&quot;);</span><br><span class=\"line\">startMethod.invoke(loadClass);</span><br></pre></td></tr></table></figure>\n<p>这样，通过Start加载的类也会通过platformClassLoader去加载</p>\n<p>创建springcontext也一样,这儿还需使用到Thread.currentThread().getContextClassLoader()【下面有详解】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassLoader currentThreadLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">Thread.currentThread().setContextClassLoader(appClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">Class&lt;?&gt; contextClass = appClassLoader</span><br><span class=\"line\">\t\t\t\t.loadClass(&quot;org.springframework.context.support.FileSystemXmlApplicationContext&quot;);</span><br><span class=\"line\">Class&lt;?&gt;[] parameterTypes = new Class[] &#123; String[].class &#125;;</span><br><span class=\"line\">Constructor&lt;?&gt; constructor = contextClass.getConstructor(parameterTypes);</span><br><span class=\"line\">return constructor.newInstance(new Object[] &#123; xmlPaths.toArray(new String[0]) &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// switch back the thread context classloader</span><br><span class=\"line\">Thread.currentThread().setContextClassLoader(currentThreadLoader);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3、反常\"><a href=\"#3、反常\" class=\"headerlink\" title=\"3、反常\"></a>3、反常</h1><p>“双亲委派”模型有优点，也有力不从心的地方</p>\n<blockquote>\n<p>Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。</p>\n</blockquote>\n<blockquote>\n<p>这些 SPI 的接口由 Java 核心库来提供，而这些 SPI 的实现代码则是作为 Java 应用所依赖的 jar 包被包含进类路径（CLASSPATH）里。SPI接口中的代码经常需要加载具体的实现类。那么问题来了，SPI的接口是Java核心库的一部分，是由启动类加载器(Bootstrap Classloader)来加载的；SPI的实现类是由系统类加载器(System ClassLoader)来加载的。引导类加载器是无法找到 SPI 的实现类的，因为依照双亲委派模型，BootstrapClassloader无法委派AppClassLoader来加载类。<br>而线程上下文类加载器破坏了“双亲委派模型”，可以在执行线程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器。</p>\n</blockquote>\n<h2 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h2><ol>\n<li>当高层提供了统一的接口让低层去实现，同时又要在高层加载（或者实例化）低层的类时，就必须要通过线程上下文类加载器来帮助高层的ClassLoader找到并加载该类</li>\n<li>当使用本类托管类加载，然而加载本类的ClassLoader未知时，为了隔离不同的调用者，可以取调用者各自的线程上下文类加载器代为托管</li>\n</ol>\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><p>从jdk1.2开始引入的，类Thread中的getContextClassLoader()与setContextClassLoader(ClassLoader c1)，分别用来获取和设置类加载器</p>\n<p>一般使用模式：获取-使用-还原</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassLoader classLoader = Thread.currentThread().getContextClassLoader(); </span><br><span class=\"line\">try&#123;    </span><br><span class=\"line\">    Thread.currentThread().setContextClassLoader(targetTccl);    </span><br><span class=\"line\">    excute(); </span><br><span class=\"line\">&#125; finally &#123; </span><br><span class=\"line\">    Thread.currentThread().setContextClassLoader(classLoader); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"jdbc\"><a href=\"#jdbc\" class=\"headerlink\" title=\"jdbc\"></a>jdbc</h2><p>以jdbc看下场景1的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</span><br><span class=\"line\">String url = &quot;jdbc:mysql://localhost:3306/testdb&quot;;    </span><br><span class=\"line\">// 通过java库获取数据库连接</span><br><span class=\"line\">Connection conn = java.sql.DriverManager.getConnection(url, &quot;name&quot;, &quot;password&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.Class.forName(“com.mysql.jdbc.Driver”); 在com.mysql.jdbc.Driver中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Driver extends NonRegisteringDriver implements java.sql.Driver &#123;</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tjava.sql.DriverManager.registerDriver(new Driver());</span><br><span class=\"line\">\t\t&#125; catch (SQLException E) &#123;</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(&quot;Can&apos;t register driver!&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tpublic Driver() throws SQLException &#123;</span><br><span class=\"line\">\t\t// Required for Class.forName().newInstance()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过Class.forName()，主要就是执行初始化static代码块，也就是向DriverManager注册Driver</p>\n<p>此时：应用类、Driver是由AppClassLoader加载，但由于双亲委派java.sql.DriverManager是由BootstrapClassLoader加载</p>\n<ul>\n<li>2.java.sql.DriverManager.getConnection 获取连接<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Connection getConnection(</span><br><span class=\"line\">\tString url, java.util.Properties info, ClassLoader callerCL) throws SQLException &#123;</span><br><span class=\"line\">\tjava.util.Vector drivers = null;</span><br><span class=\"line\">        </span><br><span class=\"line\">\tsynchronized(DriverManager.class) &#123;\t </span><br><span class=\"line\">\t  if(callerCL == null) &#123;</span><br><span class=\"line\">\t      callerCL = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t   &#125;    </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t </span><br><span class=\"line\">\tif(url == null) &#123;</span><br><span class=\"line\">\t    throw new SQLException(&quot;The url cannot be null&quot;, &quot;08001&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tprintln(&quot;DriverManager.getConnection(\\&quot;&quot; + url + &quot;\\&quot;)&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">\tif (!initialized) &#123;</span><br><span class=\"line\">\t    initialize();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tsynchronized (DriverManager.class)&#123; </span><br><span class=\"line\">\t    drivers = readDrivers;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tSQLException reason = null;</span><br><span class=\"line\">\tfor (int i = 0; i &lt; drivers.size(); i++) &#123;</span><br><span class=\"line\">\t    DriverInfo di = (DriverInfo)drivers.elementAt(i);</span><br><span class=\"line\">  </span><br><span class=\"line\">\t    if ( getCallerClass(callerCL, di.driverClassName ) != di.driverClass ) &#123;</span><br><span class=\"line\">\t\tprintln(&quot;    skipping: &quot; + di);</span><br><span class=\"line\">\t\tcontinue;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    try &#123;</span><br><span class=\"line\">\t\tprintln(&quot;    trying &quot; + di);</span><br><span class=\"line\">\t\tConnection result = di.driver.connect(url, info);</span><br><span class=\"line\">\t\tif (result != null) &#123;</span><br><span class=\"line\">\t\t    // Success!</span><br><span class=\"line\">\t\t    println(&quot;getConnection returning &quot; + di);</span><br><span class=\"line\">\t\t    return (result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125; catch (SQLException ex) &#123;</span><br><span class=\"line\">\t\tif (reason == null) &#123;</span><br><span class=\"line\">\t\t    reason = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tif (reason != null)    &#123;</span><br><span class=\"line\">\t    println(&quot;getConnection failed: &quot; + reason);</span><br><span class=\"line\">\t    throw reason;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tprintln(&quot;getConnection: no suitable driver found for &quot;+ url);</span><br><span class=\"line\">\tthrow new SQLException(&quot;No suitable driver found for &quot;+ url, &quot;08001&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private static Class getCallerClass(ClassLoader callerClassLoader, </span><br><span class=\"line\">\t\t\t\t\tString driverClassName) &#123;</span><br><span class=\"line\">\tClass callerC = null;</span><br><span class=\"line\"> </span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    callerC = Class.forName(driverClassName, true, callerClassLoader);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (Exception ex) &#123;</span><br><span class=\"line\">\t    callerC = null;           // being very careful </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\treturn callerC;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这其中有两行代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callerCL = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">callerC = Class.forName(driverClassName, true, callerClassLoader);</span><br></pre></td></tr></table></figure></p>\n<p>这儿是取线程上下文中的classloader，也就是AppClassLoader；如果不取此classloader，那么Class.forName(driverClassName)就是使用DriverManager的BootstrapClassLoader加载，那必然是加载不到，这也就是父层类加载器加载不了低层类。</p>\n<p>还有个问题，为什么在应用程序中已经加载过Driver，到了getConnection()又要再加载，还得通过Thread.currentThread().getContextClassLoader()？</p>\n<p>其实在getConnection()中，只是对比class是否是同一个，像tomcat那样，各个应用都有自己的mysql-driver的jar包，就只能通过classloader来区分，因为class是不是相同需要classname+classloader组合鉴别</p>\n<h2 id=\"spring\"><a href=\"#spring\" class=\"headerlink\" title=\"spring\"></a>spring</h2><p>对于场景2的问题</p>\n<blockquote>\n<p>如果有 10 个 Web 应用程序都用到了spring的话，可以把Spring的jar包放到 common 或 shared 目录下让这些程序共享。Spring 的作用是管理每个web应用程序的bean，getBean时自然要能访问到应用程序的类，而用户的程序显然是放在 /WebApp/WEB-INF 目录中的（由 WebAppClassLoader 加载），那么在 CommonClassLoader 或 SharedClassLoader 中的 Spring 容器如何去加载并不在其加载范围的用户程序（/WebApp/WEB-INF/）中的Class呢？</p>\n</blockquote>\n<blockquote>\n<p>答案呼之欲出：spring根本不会去管自己被放在哪里，它统统使用线程上下文加载器来加载类，而线程上下文加载器默认设置为了WebAppClassLoader，也就是说哪个WebApp应用调用了spring，spring就去取该应用自己的WebAppClassLoader来加载bean</p>\n</blockquote>\n<p>org.springframework.web.context.ContextLoader类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public WebApplicationContext initWebApplicationContext(ServletContext servletContext) &#123;</span><br><span class=\"line\">\t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) &#123;</span><br><span class=\"line\">\t\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t\t\t&quot;Cannot initialize context because there is already a root application context present - &quot; +</span><br><span class=\"line\">\t\t\t\t\t&quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tLog logger = LogFactory.getLog(ContextLoader.class);</span><br><span class=\"line\">\t\tservletContext.log(&quot;Initializing Spring root WebApplicationContext&quot;);</span><br><span class=\"line\">\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization started&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlong startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// Determine parent for root web application context, if any.</span><br><span class=\"line\">\t\t\tApplicationContext parent = loadParentContext(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Store context in local instance variable, to guarantee that</span><br><span class=\"line\">\t\t\t// it is available on ServletContext shutdown.</span><br><span class=\"line\">\t\t\tthis.context = createWebApplicationContext(servletContext, parent);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t\t\tif (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContext = this.context;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (ccl != null) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContextPerThread.put(ccl, this.context);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Published root WebApplicationContext as ServletContext attribute with name [&quot; +</span><br><span class=\"line\">\t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class=\"line\">\t\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization completed in &quot; + elapsedTime + &quot; ms&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn this.context;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (RuntimeException ex) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, ex);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class=\"line\">\t\t\tthrow ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Error err) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, err);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class=\"line\">\t\t\tthrow err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关键代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取线程上下文类加载器，默认为WebAppClassLoader</span><br><span class=\"line\">ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">// 如果spring的jar包放在每个webapp自己的目录中</span><br><span class=\"line\">// 此时线程上下文类加载器会与本类的类加载器（加载spring的）相同，都是WebAppClassLoader</span><br><span class=\"line\">if (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class=\"line\">    currentContext = this.context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ccl != null) &#123;</span><br><span class=\"line\">    // 如果不同，也就是上面说的那个问题的情况，那么用一个map把刚才创建的WebApplicationContext及对应的WebAppClassLoader存下来</span><br><span class=\"line\">    // 一个webapp对应一个记录，后续调用时直接根据WebAppClassLoader来取出</span><br><span class=\"line\">    currentContextPerThread.put(ccl, this.context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样做的目的在于当通过ConetxtLoader的静态方法获取context的时候，能保证获取的是当前web application的context.实际上就是对于tomcat下面的任何一个线程，我们都能很方便的找出这个线程对应的webapplicationContext.于是在一些不能方便获取servletContext的场合，我们可以通过当前线程获取webapplicationContext.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static WebApplicationContext getCurrentWebApplicationContext() &#123;</span><br><span class=\"line\">\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t\tif (ccl != null) &#123;</span><br><span class=\"line\">\t\t\tWebApplicationContext ccpt = currentContextPerThread.get(ccl);</span><br><span class=\"line\">\t\t\tif (ccpt != null) &#123;</span><br><span class=\"line\">\t\t\t\treturn ccpt;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn currentContext;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>简而言之就是ContextClassLoader默认存放了AppClassLoader的引用，由于它是在运行时被放在了线程中，所以不管当前程序处于何处（BootstrapClassLoader或是ExtClassLoader等），在任何需要的时候都可以用Thread.currentThread().getContextClassLoader()取出应用程序类加载器来完成需要的操作</p>\n<h1 id=\"4、参考资料\"><a href=\"#4、参考资料\" class=\"headerlink\" title=\"4、参考资料\"></a>4、参考资料</h1><p><a href=\"https://blog.csdn.net/liweisnake/article/details/8795976\" target=\"_blank\" rel=\"noopener\">以jdbc为例搞清contextClassLoader</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"1、为什么需要自定义类加载器\"><a href=\"#1、为什么需要自定义类加载器\" class=\"headerlink\" title=\"1、为什么需要自定义类加载器\"></a>1、为什么需要自定义类加载器</h1><ol>\n<li>在<a href=\"https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg\" target=\"_blank\" rel=\"noopener\">《类加载器》</a>中讲的，默认类加载器只能加载固定路径下的class，如果有特定路径下的class，需要自定义</li>\n<li>安全性：系统自身需要一些jar，class，如果业务类代码中也有相同的class，破坏系统，类似双亲委托安全性</li>\n</ol>\n<p>可以看看tomcat自定义类加载器的原因，别的就大同小异了<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a)、要保证部署在tomcat上的每个应用依赖的类库相互独立，不受影响。</span><br><span class=\"line\">b)、由于tomcat是采用java语言编写的，它自身也有类库依赖，为了安全考虑，tomcat使用的类库要与部署的应用的类库相互独立。</span><br><span class=\"line\">c)、有些类库tomcat与部署的应用可以共享，比如说servlet-api，使用maven编写web程序时，servlet-api的范围是provided，</span><br><span class=\"line\">表示打包时不打包这个依赖，因为我们都知道服务器已经有这个依赖了。</span><br><span class=\"line\">d)、部署的应用之间的类库可以共享。这听起来好像与第一点相互矛盾，但其实这很合理，类被类加载器加载到虚拟机后，</span><br><span class=\"line\">会生成代表该类的class对象存放在永久代区域，这时候如果有大量的应用使用spring来管理，如果spring类库不能共享，</span><br><span class=\"line\">那每个应用的spring类库都会被加载一次，将会是很大的资源浪费。</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"2、自定义加载器\"><a href=\"#2、自定义加载器\" class=\"headerlink\" title=\"2、自定义加载器\"></a>2、自定义加载器</h1><p>这儿主要说下我司的自定义类加载器；更复杂点的可以看看tomcat的类加载机制</p>\n<p>为什么需要自定义类加载器？这可以参考章节1的答案</p>\n<p>主要在于应用与基础平台的隔离，相对应用:可以有更大技术选型自由度,不用考虑基础平台的jar包版本、相对平台：更可靠安全，不被应用class影响</p>\n<h2 id=\"类加载器结构\"><a href=\"#类加载器结构\" class=\"headerlink\" title=\"类加载器结构\"></a>类加载器结构</h2><p>虽然JAVA使用了类加载的委派机制，但并没严格要求开发者必须遵守该机制，我们可以打破这种”双亲委派”机制</p>\n<h3 id=\"目录结构\"><a href=\"#目录结构\" class=\"headerlink\" title=\"目录结构\"></a>目录结构</h3><table>\n<thead>\n<tr>\n<th>目录</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>/servicesdir</td>\n<td>业务实现jar包</td>\n</tr>\n<tr>\n<td>/thirddir</td>\n<td>业务依赖jar包</td>\n</tr>\n<tr>\n<td>/platformdir</td>\n<td>平台依赖jar包</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"类加载器\"><a href=\"#类加载器\" class=\"headerlink\" title=\"类加载器\"></a>类加载器</h3><ul>\n<li>1.PlatformClassLoader平台加载器<ul>\n<li>1.1.加载/platformdir下的jar包</li>\n<li>1.2.在加载时，采用了默认的“双亲委派”</li>\n</ul>\n</li>\n<li>2.AppClassLoader应用加载器<ul>\n<li>2.1.加载/servicesdir,/thirddir下的jar</li>\n<li>2.2.该类加载器一定程度上打破了默认的“双亲委派”<ul>\n<li>2.2.0.loadClass方法中，如果本加载器没有load到对应的类，则会检查该类是否处于平台类加载器白名单中：</li>\n<li>2.2.1.如果处于白名单中，则委派PlatformClassLoader加载</li>\n<li>2.2.2.否则，通过super.loadClass(String,boolean)走默认的双亲委派</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>此处白名单类：平台核心类，不能被同名业务类干扰</p>\n<h2 id=\"预加载\"><a href=\"#预加载\" class=\"headerlink\" title=\"预加载\"></a>预加载</h2><p><a href=\"https://mp.weixin.qq.com/s/yOktvsG8Cj7XBA6PjgX3Xg\" target=\"_blank\" rel=\"noopener\">《类加载器》</a>中说过，程序启动后，并不会加载所有类，在运行中实现到时，才会去加载。这儿就有性能损耗。</p>\n<p>按类加载规则，一个类只加载一次</p>\n<p>可以测试一下，加载需要的损耗<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/**</span><br><span class=\"line\"> * 类加载时间性能测试</span><br><span class=\"line\"> *</span><br><span class=\"line\"> * 看一下类加载需要消耗的时间</span><br><span class=\"line\"> * Created by Jack on 2018/10/8.</span><br><span class=\"line\"> */</span><br><span class=\"line\">public class ClassLoaderTest1 &#123;</span><br><span class=\"line\">    public static void main(String[] args) throws SQLException &#123;</span><br><span class=\"line\">        long s = System.nanoTime();</span><br><span class=\"line\"></span><br><span class=\"line\">        LoaderClass loaderClass = new LoaderClass();</span><br><span class=\"line\">        long e = System.nanoTime();</span><br><span class=\"line\">        //第一次时间</span><br><span class=\"line\">        System.out.println(e - s);</span><br><span class=\"line\">        e = System.nanoTime();</span><br><span class=\"line\">        //第二次实例，但已经加载过，不再需要加载</span><br><span class=\"line\">        LoaderClass loaderClass1 = new LoaderClass();</span><br><span class=\"line\">        long e1 = System.nanoTime();</span><br><span class=\"line\">        //第二次时间</span><br><span class=\"line\">        System.out.println(e1 - e);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//输出</span><br><span class=\"line\">2409737</span><br><span class=\"line\">396</span><br></pre></td></tr></table></figure></p>\n<p>可以从输出看到性能损耗是不小的，这部分损耗可以通过预加载来消除</p>\n<p>随着程序运行时间越久，被触发的业务越多，那加载到的业务类越多。</p>\n<h3 id=\"预加载类的逻辑\"><a href=\"#预加载类的逻辑\" class=\"headerlink\" title=\"预加载类的逻辑\"></a>预加载类的逻辑</h3><p>ClassWarmUp</p>\n<ul>\n<li>1.在classloader中loadClass时，把className加入到LinkedBlockingDeque中</li>\n<li>2.为了性能，异步把deque中的class写入到文件中，需要起一个后台线程<ul>\n<li>2.1 后台线程，从deque中取出class，写入到文件中</li>\n</ul>\n</li>\n<li>3.下次从文件中预先加载class</li>\n</ul>\n<h2 id=\"打包\"><a href=\"#打包\" class=\"headerlink\" title=\"打包\"></a>打包</h2><p>对于/servicesdir 与 /thirddir 都好处理，但对于platformdir是怎么打包的呢？毕竟在开发时，只是引入一个平台基础jar就行</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>有了自定义类加载器，在应用主函数中，就不能直接new了，不然就会使用AppClassLoader</p>\n<p>所以需要使用反射机制</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class&lt;?&gt; loadClass = platformClassLoader.loadClass(&quot;com.jack.Start&quot;);</span><br><span class=\"line\">Method startMethod = loadClass.getMethod(&quot;startUp&quot;);</span><br><span class=\"line\">startMethod.invoke(loadClass);</span><br></pre></td></tr></table></figure>\n<p>这样，通过Start加载的类也会通过platformClassLoader去加载</p>\n<p>创建springcontext也一样,这儿还需使用到Thread.currentThread().getContextClassLoader()【下面有详解】<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassLoader currentThreadLoader = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">Thread.currentThread().setContextClassLoader(appClassLoader);</span><br><span class=\"line\"></span><br><span class=\"line\">Class&lt;?&gt; contextClass = appClassLoader</span><br><span class=\"line\">\t\t\t\t.loadClass(&quot;org.springframework.context.support.FileSystemXmlApplicationContext&quot;);</span><br><span class=\"line\">Class&lt;?&gt;[] parameterTypes = new Class[] &#123; String[].class &#125;;</span><br><span class=\"line\">Constructor&lt;?&gt; constructor = contextClass.getConstructor(parameterTypes);</span><br><span class=\"line\">return constructor.newInstance(new Object[] &#123; xmlPaths.toArray(new String[0]) &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">// switch back the thread context classloader</span><br><span class=\"line\">Thread.currentThread().setContextClassLoader(currentThreadLoader);</span><br></pre></td></tr></table></figure></p>\n<h1 id=\"3、反常\"><a href=\"#3、反常\" class=\"headerlink\" title=\"3、反常\"></a>3、反常</h1><p>“双亲委派”模型有优点，也有力不从心的地方</p>\n<blockquote>\n<p>Java 提供了很多服务提供者接口（Service Provider Interface，SPI），允许第三方为这些接口提供实现。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。</p>\n</blockquote>\n<blockquote>\n<p>这些 SPI 的接口由 Java 核心库来提供，而这些 SPI 的实现代码则是作为 Java 应用所依赖的 jar 包被包含进类路径（CLASSPATH）里。SPI接口中的代码经常需要加载具体的实现类。那么问题来了，SPI的接口是Java核心库的一部分，是由启动类加载器(Bootstrap Classloader)来加载的；SPI的实现类是由系统类加载器(System ClassLoader)来加载的。引导类加载器是无法找到 SPI 的实现类的，因为依照双亲委派模型，BootstrapClassloader无法委派AppClassLoader来加载类。<br>而线程上下文类加载器破坏了“双亲委派模型”，可以在执行线程中抛弃双亲委派加载链模式，使程序可以逆向使用类加载器。</p>\n</blockquote>\n<h2 id=\"场景：\"><a href=\"#场景：\" class=\"headerlink\" title=\"场景：\"></a>场景：</h2><ol>\n<li>当高层提供了统一的接口让低层去实现，同时又要在高层加载（或者实例化）低层的类时，就必须要通过线程上下文类加载器来帮助高层的ClassLoader找到并加载该类</li>\n<li>当使用本类托管类加载，然而加载本类的ClassLoader未知时，为了隔离不同的调用者，可以取调用者各自的线程上下文类加载器代为托管</li>\n</ol>\n<h2 id=\"解决方案：\"><a href=\"#解决方案：\" class=\"headerlink\" title=\"解决方案：\"></a>解决方案：</h2><p>从jdk1.2开始引入的，类Thread中的getContextClassLoader()与setContextClassLoader(ClassLoader c1)，分别用来获取和设置类加载器</p>\n<p>一般使用模式：获取-使用-还原</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ClassLoader classLoader = Thread.currentThread().getContextClassLoader(); </span><br><span class=\"line\">try&#123;    </span><br><span class=\"line\">    Thread.currentThread().setContextClassLoader(targetTccl);    </span><br><span class=\"line\">    excute(); </span><br><span class=\"line\">&#125; finally &#123; </span><br><span class=\"line\">    Thread.currentThread().setContextClassLoader(classLoader); </span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"jdbc\"><a href=\"#jdbc\" class=\"headerlink\" title=\"jdbc\"></a>jdbc</h2><p>以jdbc看下场景1的情况</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Class.forName(&quot;com.mysql.jdbc.Driver&quot;)</span><br><span class=\"line\">String url = &quot;jdbc:mysql://localhost:3306/testdb&quot;;    </span><br><span class=\"line\">// 通过java库获取数据库连接</span><br><span class=\"line\">Connection conn = java.sql.DriverManager.getConnection(url, &quot;name&quot;, &quot;password&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>1.Class.forName(“com.mysql.jdbc.Driver”); 在com.mysql.jdbc.Driver中<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public class Driver extends NonRegisteringDriver implements java.sql.Driver &#123;</span><br><span class=\"line\">\tstatic &#123;</span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\tjava.sql.DriverManager.registerDriver(new Driver());</span><br><span class=\"line\">\t\t&#125; catch (SQLException E) &#123;</span><br><span class=\"line\">\t\t\tthrow new RuntimeException(&quot;Can&apos;t register driver!&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tpublic Driver() throws SQLException &#123;</span><br><span class=\"line\">\t\t// Required for Class.forName().newInstance()</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>通过Class.forName()，主要就是执行初始化static代码块，也就是向DriverManager注册Driver</p>\n<p>此时：应用类、Driver是由AppClassLoader加载，但由于双亲委派java.sql.DriverManager是由BootstrapClassLoader加载</p>\n<ul>\n<li>2.java.sql.DriverManager.getConnection 获取连接<figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">private static Connection getConnection(</span><br><span class=\"line\">\tString url, java.util.Properties info, ClassLoader callerCL) throws SQLException &#123;</span><br><span class=\"line\">\tjava.util.Vector drivers = null;</span><br><span class=\"line\">        </span><br><span class=\"line\">\tsynchronized(DriverManager.class) &#123;\t </span><br><span class=\"line\">\t  if(callerCL == null) &#123;</span><br><span class=\"line\">\t      callerCL = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t   &#125;    </span><br><span class=\"line\">\t&#125; </span><br><span class=\"line\">\t </span><br><span class=\"line\">\tif(url == null) &#123;</span><br><span class=\"line\">\t    throw new SQLException(&quot;The url cannot be null&quot;, &quot;08001&quot;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tprintln(&quot;DriverManager.getConnection(\\&quot;&quot; + url + &quot;\\&quot;)&quot;);</span><br><span class=\"line\">    </span><br><span class=\"line\">\tif (!initialized) &#123;</span><br><span class=\"line\">\t    initialize();</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tsynchronized (DriverManager.class)&#123; </span><br><span class=\"line\">\t    drivers = readDrivers;  </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tSQLException reason = null;</span><br><span class=\"line\">\tfor (int i = 0; i &lt; drivers.size(); i++) &#123;</span><br><span class=\"line\">\t    DriverInfo di = (DriverInfo)drivers.elementAt(i);</span><br><span class=\"line\">  </span><br><span class=\"line\">\t    if ( getCallerClass(callerCL, di.driverClassName ) != di.driverClass ) &#123;</span><br><span class=\"line\">\t\tprintln(&quot;    skipping: &quot; + di);</span><br><span class=\"line\">\t\tcontinue;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t    try &#123;</span><br><span class=\"line\">\t\tprintln(&quot;    trying &quot; + di);</span><br><span class=\"line\">\t\tConnection result = di.driver.connect(url, info);</span><br><span class=\"line\">\t\tif (result != null) &#123;</span><br><span class=\"line\">\t\t    // Success!</span><br><span class=\"line\">\t\t    println(&quot;getConnection returning &quot; + di);</span><br><span class=\"line\">\t\t    return (result);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125; catch (SQLException ex) &#123;</span><br><span class=\"line\">\t\tif (reason == null) &#123;</span><br><span class=\"line\">\t\t    reason = ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t    &#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\tif (reason != null)    &#123;</span><br><span class=\"line\">\t    println(&quot;getConnection failed: &quot; + reason);</span><br><span class=\"line\">\t    throw reason;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">    </span><br><span class=\"line\">\tprintln(&quot;getConnection: no suitable driver found for &quot;+ url);</span><br><span class=\"line\">\tthrow new SQLException(&quot;No suitable driver found for &quot;+ url, &quot;08001&quot;);</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">private static Class getCallerClass(ClassLoader callerClassLoader, </span><br><span class=\"line\">\t\t\t\t\tString driverClassName) &#123;</span><br><span class=\"line\">\tClass callerC = null;</span><br><span class=\"line\"> </span><br><span class=\"line\">\ttry &#123;</span><br><span class=\"line\">\t    callerC = Class.forName(driverClassName, true, callerClassLoader);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\tcatch (Exception ex) &#123;</span><br><span class=\"line\">\t    callerC = null;           // being very careful </span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">\treturn callerC;</span><br><span class=\"line\">    &#125;</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>这其中有两行代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">callerCL = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\"></span><br><span class=\"line\">callerC = Class.forName(driverClassName, true, callerClassLoader);</span><br></pre></td></tr></table></figure></p>\n<p>这儿是取线程上下文中的classloader，也就是AppClassLoader；如果不取此classloader，那么Class.forName(driverClassName)就是使用DriverManager的BootstrapClassLoader加载，那必然是加载不到，这也就是父层类加载器加载不了低层类。</p>\n<p>还有个问题，为什么在应用程序中已经加载过Driver，到了getConnection()又要再加载，还得通过Thread.currentThread().getContextClassLoader()？</p>\n<p>其实在getConnection()中，只是对比class是否是同一个，像tomcat那样，各个应用都有自己的mysql-driver的jar包，就只能通过classloader来区分，因为class是不是相同需要classname+classloader组合鉴别</p>\n<h2 id=\"spring\"><a href=\"#spring\" class=\"headerlink\" title=\"spring\"></a>spring</h2><p>对于场景2的问题</p>\n<blockquote>\n<p>如果有 10 个 Web 应用程序都用到了spring的话，可以把Spring的jar包放到 common 或 shared 目录下让这些程序共享。Spring 的作用是管理每个web应用程序的bean，getBean时自然要能访问到应用程序的类，而用户的程序显然是放在 /WebApp/WEB-INF 目录中的（由 WebAppClassLoader 加载），那么在 CommonClassLoader 或 SharedClassLoader 中的 Spring 容器如何去加载并不在其加载范围的用户程序（/WebApp/WEB-INF/）中的Class呢？</p>\n</blockquote>\n<blockquote>\n<p>答案呼之欲出：spring根本不会去管自己被放在哪里，它统统使用线程上下文加载器来加载类，而线程上下文加载器默认设置为了WebAppClassLoader，也就是说哪个WebApp应用调用了spring，spring就去取该应用自己的WebAppClassLoader来加载bean</p>\n</blockquote>\n<p>org.springframework.web.context.ContextLoader类<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public WebApplicationContext initWebApplicationContext(ServletContext servletContext) &#123;</span><br><span class=\"line\">\t\tif (servletContext.getAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE) != null) &#123;</span><br><span class=\"line\">\t\t\tthrow new IllegalStateException(</span><br><span class=\"line\">\t\t\t\t\t&quot;Cannot initialize context because there is already a root application context present - &quot; +</span><br><span class=\"line\">\t\t\t\t\t&quot;check whether you have multiple ContextLoader* definitions in your web.xml!&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\tLog logger = LogFactory.getLog(ContextLoader.class);</span><br><span class=\"line\">\t\tservletContext.log(&quot;Initializing Spring root WebApplicationContext&quot;);</span><br><span class=\"line\">\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization started&quot;);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tlong startTime = System.currentTimeMillis();</span><br><span class=\"line\"></span><br><span class=\"line\">\t\ttry &#123;</span><br><span class=\"line\">\t\t\t// Determine parent for root web application context, if any.</span><br><span class=\"line\">\t\t\tApplicationContext parent = loadParentContext(servletContext);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\t// Store context in local instance variable, to guarantee that</span><br><span class=\"line\">\t\t\t// it is available on ServletContext shutdown.</span><br><span class=\"line\">\t\t\tthis.context = createWebApplicationContext(servletContext, parent);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, this.context);</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t\t\tif (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContext = this.context;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\telse if (ccl != null) &#123;</span><br><span class=\"line\">\t\t\t\tcurrentContextPerThread.put(ccl, this.context);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\tif (logger.isDebugEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlogger.debug(&quot;Published root WebApplicationContext as ServletContext attribute with name [&quot; +</span><br><span class=\"line\">\t\t\t\t\t\tWebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE + &quot;]&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t\tif (logger.isInfoEnabled()) &#123;</span><br><span class=\"line\">\t\t\t\tlong elapsedTime = System.currentTimeMillis() - startTime;</span><br><span class=\"line\">\t\t\t\tlogger.info(&quot;Root WebApplicationContext: initialization completed in &quot; + elapsedTime + &quot; ms&quot;);</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\t\t\treturn this.context;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (RuntimeException ex) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, ex);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, ex);</span><br><span class=\"line\">\t\t\tthrow ex;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\tcatch (Error err) &#123;</span><br><span class=\"line\">\t\t\tlogger.error(&quot;Context initialization failed&quot;, err);</span><br><span class=\"line\">\t\t\tservletContext.setAttribute(WebApplicationContext.ROOT_WEB_APPLICATION_CONTEXT_ATTRIBUTE, err);</span><br><span class=\"line\">\t\t\tthrow err;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<p>关键代码：<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 获取线程上下文类加载器，默认为WebAppClassLoader</span><br><span class=\"line\">ClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">// 如果spring的jar包放在每个webapp自己的目录中</span><br><span class=\"line\">// 此时线程上下文类加载器会与本类的类加载器（加载spring的）相同，都是WebAppClassLoader</span><br><span class=\"line\">if (ccl == ContextLoader.class.getClassLoader()) &#123;</span><br><span class=\"line\">    currentContext = this.context;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else if (ccl != null) &#123;</span><br><span class=\"line\">    // 如果不同，也就是上面说的那个问题的情况，那么用一个map把刚才创建的WebApplicationContext及对应的WebAppClassLoader存下来</span><br><span class=\"line\">    // 一个webapp对应一个记录，后续调用时直接根据WebAppClassLoader来取出</span><br><span class=\"line\">    currentContextPerThread.put(ccl, this.context);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></p>\n<p>这样做的目的在于当通过ConetxtLoader的静态方法获取context的时候，能保证获取的是当前web application的context.实际上就是对于tomcat下面的任何一个线程，我们都能很方便的找出这个线程对应的webapplicationContext.于是在一些不能方便获取servletContext的场合，我们可以通过当前线程获取webapplicationContext.<br><figure class=\"highlight plain\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">public static WebApplicationContext getCurrentWebApplicationContext() &#123;</span><br><span class=\"line\">\t\tClassLoader ccl = Thread.currentThread().getContextClassLoader();</span><br><span class=\"line\">\t\tif (ccl != null) &#123;</span><br><span class=\"line\">\t\t\tWebApplicationContext ccpt = currentContextPerThread.get(ccl);</span><br><span class=\"line\">\t\t\tif (ccpt != null) &#123;</span><br><span class=\"line\">\t\t\t\treturn ccpt;</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\treturn currentContext;</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure></p>\n<h2 id=\"总结\"><a href=\"#总结\" class=\"headerlink\" title=\"总结\"></a>总结</h2><p>简而言之就是ContextClassLoader默认存放了AppClassLoader的引用，由于它是在运行时被放在了线程中，所以不管当前程序处于何处（BootstrapClassLoader或是ExtClassLoader等），在任何需要的时候都可以用Thread.currentThread().getContextClassLoader()取出应用程序类加载器来完成需要的操作</p>\n<h1 id=\"4、参考资料\"><a href=\"#4、参考资料\" class=\"headerlink\" title=\"4、参考资料\"></a>4、参考资料</h1><p><a href=\"https://blog.csdn.net/liweisnake/article/details/8795976\" target=\"_blank\" rel=\"noopener\">以jdbc为例搞清contextClassLoader</a></p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cjn35m50i0000kkjoy1bq8d4z","category_id":"cjn35m50i0003kkjoyuwet3ll","_id":"cjn35m50y0006kkjopfxscgjb"},{"post_id":"cjn369p7k00009wjoeok9n47t","category_id":"cjn369p8200019wjo3kxj1yo0","_id":"cjn369p8a00049wjoxphpyrnl"}],"PostTag":[{"post_id":"cjn35m50i0000kkjoy1bq8d4z","tag_id":"cjn35m50i0004kkjo6zmjbdzz","_id":"cjn35m50y0007kkjoz2moe1u6"},{"post_id":"cjn35m50i0000kkjoy1bq8d4z","tag_id":"cjn35m50y0005kkjoh4ufhrop","_id":"cjn35m50y0008kkjo34h902kp"},{"post_id":"cjn369p7k00009wjoeok9n47t","tag_id":"cjn369p8500029wjoamf45ysj","_id":"cjn369p8800039wjos46a9yyj"}],"Tag":[{"name":"rpc","_id":"cjn35m50i0004kkjo6zmjbdzz"},{"name":"thrift","_id":"cjn35m50y0005kkjoh4ufhrop"},{"name":"classloader","_id":"cjn369p8500029wjoamf45ysj"}]}}